using System;
using System.Collections.Generic;
using System.Web;
using System.Configuration;
using System.Collections;
using MySql.Data.MySqlClient;
using System.Globalization;
using System.IO;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Text;
using System.Device.Location;
using System.Net;
using System.Xml;
using System.Text.RegularExpressions;
using System.Data;

/// <summary>
/// Summary description for MainController
/// </summary>
public class MainController
{
    public DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
    public DateTimeFormatInfo ukDtfi = new CultureInfo("en-GB", false).DateTimeFormat;

    private String sErrorLog = "";
    public MainController()
    {
        sErrorLog = "";
    }
	public MainController(String _sErrorLog)
	{
        sErrorLog = _sErrorLog;
	}

    //insert form
    public void insertBusRoute(String sRouteID, String sRouteGrpID, String sComp, String sStartLocation, String sEndLocation, int iDistance)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO busroute (routeid, comp, routegrpid, startlocation, endlocation, distance, routestatus) ";
                query = query + " VALUES (?routeid, ?comp, ?routegrpid, ?startlocation, ?endlocation, ?distance, 'A') ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?routeid", MySqlDbType.VarChar).Value = sRouteID;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.Parameters.Add("?routegrpid", MySqlDbType.VarChar).Value = sRouteGrpID;
                cmd.Parameters.Add("?startlocation", MySqlDbType.VarChar).Value = sStartLocation;
                cmd.Parameters.Add("?endlocation", MySqlDbType.VarChar).Value = sEndLocation;
                cmd.Parameters.Add("?distance", MySqlDbType.Int16).Value = iDistance;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertBusRoute: " + e.Message.ToString());
        }
    }

    //modify form
    public void modifyBusRoute(String sRouteID, String sRouteGrpID, String sComp, String sStartLocation, String sEndLocation, int iDistance, String sRouteStatus)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE busroute ";
                query = query + " SET    startlocation = ?startlocation, ";
                query = query + "        endlocation = ?endlocation, ";
                query = query + "        distance = ?distance, ";
                query = query + "        routestatus = ?routestatus ";
                query = query + " WHERE routegrpid = ?routegrpid ";
                query = query + " AND routeid = ?routeid ";
                query = query + " AND comp = ?comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?startlocation", MySqlDbType.VarChar).Value = sStartLocation;
                cmd.Parameters.Add("?endlocation", MySqlDbType.VarChar).Value = sEndLocation;
                cmd.Parameters.Add("?distance", MySqlDbType.Int16).Value = iDistance;
                cmd.Parameters.Add("?routestatus", MySqlDbType.VarChar).Value = sRouteStatus;
                cmd.Parameters.Add("?routegrpid", MySqlDbType.VarChar).Value = sRouteGrpID;
                cmd.Parameters.Add("?routeid", MySqlDbType.VarChar).Value = sRouteID;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-modifyBusRoute: " + e.Message.ToString());
        }
    }

    public void deleteBusRoute(String sRouteID, String sRouteGrpID, String sComp)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE from busroute ";
                query = query + " WHERE  routeid is not NULL ";
                query = query + " AND    routegrpid = '" + sRouteGrpID + "' ";
                query = query + " AND    comp = '" + sComp + "' ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteBusRoute: " + e.Message.ToString());
        }
    }

    public void insertLocation(String sLocID, String sComp, String sLocName, String sLocLatitude, String sLocLongitude)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO location (locationid, comp, locationname, locationlatitude, locationlongitude, locationstatus) ";
                query = query + " VALUES (?locationid, ?comp, ?locationname, ?locationlatitude, ?locationlongitude, 'A') ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?locationid", MySqlDbType.VarChar).Value = sLocID;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.Parameters.Add("?locationname", MySqlDbType.VarChar).Value = sLocName;
                cmd.Parameters.Add("?locationlatitude", MySqlDbType.VarChar).Value = sLocLatitude;
                cmd.Parameters.Add("?locationlongitude", MySqlDbType.VarChar).Value = sLocLongitude;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertLocation: " + e.Message.ToString());
        }
    }

    public void insertRouteLocation(String sRouteID, String sLocID, String sComp, int iRouteLocSeqNo)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO routelocation (routeid, locationid, comp, routelocationseq) ";
                query = query + " VALUES (?routeid, ?locationid, ?comp, ?routelocationseq) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?routeid", MySqlDbType.VarChar).Value = sRouteID;
                cmd.Parameters.Add("?locationid", MySqlDbType.VarChar).Value = sLocID;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.Parameters.Add("?routelocationseq", MySqlDbType.Int16).Value = iRouteLocSeqNo;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertRouteLocation: " + e.Message.ToString());
        }
    }

    public void insertTicketPrice(String sPriceId, String sComp, String sStartLocation, String sEndLocation, String sPriceType, decimal dPriceAmt)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO ticketprice (priceid, comp, startlocation, endlocation, pricetype, priceamt) ";
                query = query + " VALUES (?priceid, ?comp, ?startlocation, ?endlocation, ?pricetype, ?priceamt) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?priceid", MySqlDbType.VarChar).Value = sPriceId;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.Parameters.Add("?startlocation", MySqlDbType.VarChar).Value = sStartLocation;
                cmd.Parameters.Add("?endlocation", MySqlDbType.VarChar).Value = sEndLocation;
                cmd.Parameters.Add("?pricetype", MySqlDbType.VarChar).Value = sPriceType;
                cmd.Parameters.Add("?priceamt", MySqlDbType.Decimal).Value = dPriceAmt;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertTicketPrice: " + e.Message.ToString());
        }
    }

    //modify form
    public void modifyRouteLocation(String sRouteID, String sLocID, String sComp, int iRouteLocSeqNo)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE routelocation ";
                query = query + " SET routelocationseq = ?routelocationseq ";
                query = query + " WHERE routeid = ?routeid ";
                query = query + " AND locationid = ?locationid ";
                query = query + " AND comp = ?comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?routelocationseq", MySqlDbType.Int16).Value = iRouteLocSeqNo;
                cmd.Parameters.Add("?routeid", MySqlDbType.VarChar).Value = sRouteID;
                cmd.Parameters.Add("?locationid", MySqlDbType.VarChar).Value = sLocID;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-modifyRouteLocation: " + e.Message.ToString());
        }
    }

    public void modifyTicketPrice(String sPriceId, String sComp, String sStartLocation, String sEndLocation, String sPriceType, decimal dPriceAmt)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (sPriceId.Trim().Length > 0)
                {
                    query = "";
                    query = query + " UPDATE ticketprice ";
                    query = query + " SET priceamt = ?priceamt ";
                    query = query + " WHERE priceid = ?priceid ";
                    query = query + " AND comp = ?comp ";
                    query = query + " AND pricetype = ?pricetype ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?priceamt", MySqlDbType.Decimal).Value = dPriceAmt;
                    cmd.Parameters.Add("?priceid", MySqlDbType.VarChar).Value = sPriceId;
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                    cmd.Parameters.Add("?pricetype", MySqlDbType.VarChar).Value = sPriceType;
                    cmd.ExecuteNonQuery();
                }
                else if (sStartLocation.Trim().Length > 0 && sEndLocation.Trim().Length > 0)
                {
                    query = "";
                    query = query + " UPDATE ticketprice ";
                    query = query + " SET priceamt = ?priceamt ";
                    query = query + " WHERE priceid is not null ";
                    query = query + " AND comp = ?comp ";
                    query = query + " AND startlocation = ?startlocation ";
                    query = query + " AND endlocation = ?endlocation ";
                    query = query + " AND pricetype = ?pricetype ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?priceamt", MySqlDbType.Decimal).Value = dPriceAmt;
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                    cmd.Parameters.Add("?startlocation", MySqlDbType.VarChar).Value = sStartLocation.Trim();
                    cmd.Parameters.Add("?endlocation", MySqlDbType.VarChar).Value = sEndLocation.Trim();
                    cmd.Parameters.Add("?pricetype", MySqlDbType.VarChar).Value = sPriceType;
                    cmd.ExecuteNonQuery();
                }
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-modifyTicketPrice: " + e.Message.ToString());
        }
    }

    //delete form
    public void deleteLocation(String sLocID, String sComp)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE from location ";
                query = query + " WHERE  locationid is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                if (sLocID.Trim().Length > 0)
                {
                    query = query + " and  locationid = '" + sLocID + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteLocation: " + e.Message.ToString());
        }
    }

    public void deleteRouteLocation(String sRouteID, String sLocID, String sComp)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE from routelocation ";
                query = query + " WHERE  routeid is not NULL ";
                query = query + " AND  locationid is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                if (sRouteID.Trim().Length > 0)
                {
                    query = query + " and  routeid = '" + sRouteID + "' ";
                }
                if (sLocID.Trim().Length > 0)
                {
                    query = query + " and  locationid = '" + sLocID + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteRouteLocation: " + e.Message.ToString());
        }
    }

    #region /*** BEGIN FOR PEOPLE ***/

    public String insertPeople(MainModel oModPeople)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO people (comp, id, name, nokp, address, gender, telno, email, status, createdby, createddate, modifiedby, modifieddate) ";
                query = query + " VALUES (?comp, ?id, ?name, ?nokp, ?address, ?gender, ?telno, ?email, ?status, ?createdby, ?createddate, ?modifiedby, ?modifieddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPeople.GetSetcomp;
                cmd.Parameters.Add("?id", MySqlDbType.VarChar).Value = oModPeople.GetSetid;
                cmd.Parameters.Add("?name", MySqlDbType.VarChar).Value = oModPeople.GetSetname;
                cmd.Parameters.Add("?nokp", MySqlDbType.VarChar).Value = oModPeople.GetSetnokp;
                cmd.Parameters.Add("?address", MySqlDbType.VarChar).Value = oModPeople.GetSetaddress;
                cmd.Parameters.Add("?gender", MySqlDbType.VarChar).Value = oModPeople.GetSetgender;
                cmd.Parameters.Add("?telno", MySqlDbType.VarChar).Value = oModPeople.GetSettelno;
                cmd.Parameters.Add("?email", MySqlDbType.VarChar).Value = oModPeople.GetSetemail;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPeople.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPeople.GetSetcreatedby;
                if (oModPeople.GetSetcreatedby.Length > 0)
                {
                    if (oModPeople.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPeople.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModPeople.GetSetmodifiedby;
                if (oModPeople.GetSetmodifiedby.Length > 0)
                {
                    if (oModPeople.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPeople.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPeople: " + e.Message.ToString());
        }
        return result;
    }

    public String updatePeople(MainModel oModPeople)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + @" UPDATE people 
                                   SET    name = ?name, 
                                          nokp = ?nokp, 
                                          address = ?address, 
                                            gender = ?gender, 
                                            telno = ?telno, 
                                            email = ?email, 
                                            status = ?status, 
                                            createdby = ?createdby, 
                                            createddate = ?createddate, 
                                            modifiedby = ?modifiedby, 
                                            modifieddate = ?modifieddate
                                    WHERE  comp = ?comp 
                                    AND    id = ?id ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPeople.GetSetcomp;
                cmd.Parameters.Add("?id", MySqlDbType.VarChar).Value = oModPeople.GetSetid;
                cmd.Parameters.Add("?name", MySqlDbType.VarChar).Value = oModPeople.GetSetname;
                cmd.Parameters.Add("?nokp", MySqlDbType.VarChar).Value = oModPeople.GetSetnokp;
                cmd.Parameters.Add("?address", MySqlDbType.VarChar).Value = oModPeople.GetSetaddress;
                cmd.Parameters.Add("?gender", MySqlDbType.VarChar).Value = oModPeople.GetSetgender;
                cmd.Parameters.Add("?telno", MySqlDbType.VarChar).Value = oModPeople.GetSettelno;
                cmd.Parameters.Add("?email", MySqlDbType.VarChar).Value = oModPeople.GetSetemail;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPeople.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPeople.GetSetcreatedby;
                if (oModPeople.GetSetcreatedby.Length > 0)
                {
                    if (oModPeople.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPeople.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModPeople.GetSetmodifiedby;
                if (oModPeople.GetSetmodifiedby.Length > 0)
                {
                    if (oModPeople.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPeople.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePeople: " + e.Message.ToString());
        }
        return result;
    }

    public MainModel getPeople(String comp, String peopleid, String name)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT people.comp, people.id, people.name, people.nokp, people.address, people.gender, people.telno, people.email, ";
                query = query + "        people.status, people.createdby, people.createddate, people.modifiedby, people.modifieddate ";
                query = query + " from   people ";
                query = query + " WHERE  people.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  people.comp = '" + comp + "' ";
                }
                if (peopleid.Trim().Length > 0)
                {
                    query = query + " and  people.id = '" + peopleid + "' ";
                }
                if (name.Trim().Length > 0)
                {
                    query = query + " and  people.name = '" + name + "' ";
                }
                query = query + " order by people.comp, people.name ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetid = replaceNull(dataReader, "id");
                    modItem.GetSetname = replaceNull(dataReader, "name");
                    modItem.GetSetnokp = replaceNull(dataReader, "nokp");
                    modItem.GetSetaddress = replaceNull(dataReader, "address");
                    modItem.GetSetgender = replaceNull(dataReader, "gender");
                    modItem.GetSettelno = replaceNull(dataReader, "telno");
                    modItem.GetSetemail = replaceNull(dataReader, "email");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                    modItem.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modItem.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modItem.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modItem.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPeople: " + e.Message.ToString());
        }
        return modItem;
    }

    public ArrayList getPeopleList(String comp, String peopleid)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT people.comp, people.id, people.name, people.nokp, people.address, people.gender, people.telno, people.email, ";
                query = query + "        people.status, people.createdby, people.createddate, people.modifiedby, people.modifieddate ";
                query = query + " from   people ";
                query = query + " WHERE  people.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  people.comp = '" + comp + "' ";
                }
                if (peopleid.Trim().Length > 0)
                {
                    query = query + " and  people.id = '" + peopleid + "' ";
                }
                query = query + " order by people.comp, people.name ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetid = replaceNull(dataReader, "id");
                    modItem.GetSetname = replaceNull(dataReader, "name");
                    modItem.GetSetnokp = replaceNull(dataReader, "nokp");
                    modItem.GetSetaddress = replaceNull(dataReader, "address");
                    modItem.GetSetgender = replaceNull(dataReader, "gender");
                    modItem.GetSettelno = replaceNull(dataReader, "telno");
                    modItem.GetSetemail = replaceNull(dataReader, "email");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                    modItem.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modItem.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modItem.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modItem.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPeopleList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    #endregion /*** END FOR PEOPLE ***/

    #region /*** BEGIN FOR STITCH ***/

    public String insertStitch(MainModel oModStitch)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + @" INSERT INTO stitch_details (comp, stitchno, stitchdate, peopleid, remarks, measurement, 
                                                               baju_bahu, baju_labuh_lengan, baju_labuh_baju, baju_dada, baju_pinggang, baju_punggung, baju_labuh_kain, baju_leher, baju_span, baju_bahu_dada, baju_bahu_pinggang,
                                                               seluar_pinggang, seluar_punggung, seluar_cawat, seluar_paha, seluar_lutut, seluar_bukaan_kaki, seluar_labuh_seluar,
                                                               status, createdby, createddate, modifiedby, modifieddate)
                                   VALUES (?comp, ?stitchno, ?stitchdate, ?peopleid, ?remarks, ?measurement, 
                                           ?baju_bahu, ?baju_labuh_lengan, ?baju_labuh_baju, ?baju_dada, ?baju_pinggang, ?baju_punggung, ?baju_labuh_kain, ?baju_leher, ?baju_span, ?baju_bahu_dada, ?baju_bahu_pinggang,
                                           ?seluar_pinggang, ?seluar_punggung, ?seluar_cawat, ?seluar_paha, ?seluar_lutut, ?seluar_bukaan_kaki, ?seluar_labuh_seluar,
                                           ?status, ?createdby, ?createddate, ?modifiedby, ?modifieddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModStitch.GetSetcomp;
                cmd.Parameters.Add("?stitchno", MySqlDbType.VarChar).Value = oModStitch.GetSetstitchno;
                if (oModStitch.GetSetstitchdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModStitch.GetSetstitchdate, ukDtfi);
                    cmd.Parameters.Add("?stitchdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?stitchdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?peopleid", MySqlDbType.VarChar).Value = oModStitch.GetSetpeopleid;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModStitch.GetSetremarks;
                cmd.Parameters.Add("?measurement", MySqlDbType.VarChar).Value = oModStitch.GetSetmeasurement;

                cmd.Parameters.Add("?baju_bahu", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu;
                cmd.Parameters.Add("?baju_labuh_lengan", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_lengan;
                cmd.Parameters.Add("?baju_labuh_baju", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_baju;
                cmd.Parameters.Add("?baju_dada", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_dada;

                cmd.Parameters.Add("?baju_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_pinggang;
                cmd.Parameters.Add("?baju_punggung", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_punggung;
                cmd.Parameters.Add("?baju_labuh_kain", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_kain;
                cmd.Parameters.Add("?baju_leher", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_leher;

                cmd.Parameters.Add("?baju_span", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_span;
                cmd.Parameters.Add("?baju_bahu_dada", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu_dada;
                cmd.Parameters.Add("?baju_bahu_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu_pinggang;

                cmd.Parameters.Add("?seluar_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_pinggang;
                cmd.Parameters.Add("?seluar_punggung", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_punggung;
                cmd.Parameters.Add("?seluar_cawat", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_cawat;
                cmd.Parameters.Add("?seluar_paha", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_paha;

                cmd.Parameters.Add("?seluar_lutut", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_lutut;
                cmd.Parameters.Add("?seluar_bukaan_kaki", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_bukaan_kaki;
                cmd.Parameters.Add("?seluar_labuh_seluar", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_labuh_seluar;

                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModStitch.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModStitch.GetSetcreatedby;
                if (oModStitch.GetSetcreatedby.Length > 0)
                {
                    if (oModStitch.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModStitch.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModStitch.GetSetmodifiedby;
                if (oModStitch.GetSetmodifiedby.Length > 0)
                {
                    if (oModStitch.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModStitch.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertStitch: " + e.Message.ToString());
        }
        return result;
    }

    public String updateStitch(MainModel oModStitch)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + @" UPDATE stitch_details 
                                    SET     stitchdate = ?stitchdate, 
                                            peopleid = ?peopleid, 
                                            remarks = ?remarks, 
                                            measurement = ?measurement, 
                                            baju_bahu = ?baju_bahu, baju_labuh_lengan = ?baju_labuh_lengan, baju_labuh_baju = ?baju_labuh_baju, baju_dada = ?baju_dada, 
                                            baju_pinggang = ?baju_pinggang, baju_punggung = ?baju_punggung, baju_labuh_kain = ?baju_labuh_kain, baju_leher = ?baju_leher, 
                                            baju_span = ?baju_span, baju_bahu_dada = ?baju_bahu_dada, baju_bahu_pinggang = ?baju_bahu_pinggang,
                                            seluar_pinggang = ?seluar_pinggang, seluar_punggung = ?seluar_punggung, seluar_cawat = ?seluar_cawat, 
                                            seluar_paha = ?seluar_paha, seluar_lutut = ?seluar_lutut, seluar_bukaan_kaki = ?seluar_bukaan_kaki,
                                            seluar_labuh_seluar = ?seluar_labuh_seluar,
                                            status = ?status, 
                                            createdby = ?createdby, 
                                            createddate = ?createddate, 
                                            modifiedby = ?modifiedby, 
                                            modifieddate = ?modifieddate
                                    WHERE   comp = ?comp 
                                    AND     stitchno = ?stitchno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModStitch.GetSetcomp;
                cmd.Parameters.Add("?stitchno", MySqlDbType.VarChar).Value = oModStitch.GetSetstitchno;
                if (oModStitch.GetSetstitchdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModStitch.GetSetstitchdate, ukDtfi);
                    cmd.Parameters.Add("?stitchdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?stitchdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?peopleid", MySqlDbType.VarChar).Value = oModStitch.GetSetpeopleid;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModStitch.GetSetremarks;
                cmd.Parameters.Add("?measurement", MySqlDbType.VarChar).Value = oModStitch.GetSetmeasurement;

                cmd.Parameters.Add("?baju_bahu", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu;
                cmd.Parameters.Add("?baju_labuh_lengan", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_lengan;
                cmd.Parameters.Add("?baju_labuh_baju", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_baju;
                cmd.Parameters.Add("?baju_dada", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_dada;

                cmd.Parameters.Add("?baju_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_pinggang;
                cmd.Parameters.Add("?baju_punggung", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_punggung;
                cmd.Parameters.Add("?baju_labuh_kain", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_labuh_kain;
                cmd.Parameters.Add("?baju_leher", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_leher;

                cmd.Parameters.Add("?baju_span", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_span;
                cmd.Parameters.Add("?baju_bahu_dada", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu_dada;
                cmd.Parameters.Add("?baju_bahu_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetbaju_bahu_pinggang;

                cmd.Parameters.Add("?seluar_pinggang", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_pinggang;
                cmd.Parameters.Add("?seluar_punggung", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_punggung;
                cmd.Parameters.Add("?seluar_cawat", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_cawat;
                cmd.Parameters.Add("?seluar_paha", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_paha;

                cmd.Parameters.Add("?seluar_lutut", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_lutut;
                cmd.Parameters.Add("?seluar_bukaan_kaki", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_bukaan_kaki;
                cmd.Parameters.Add("?seluar_labuh_seluar", MySqlDbType.VarChar).Value = oModStitch.GetSetseluar_labuh_seluar;

                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModStitch.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModStitch.GetSetcreatedby;
                if (oModStitch.GetSetcreatedby.Length > 0)
                {
                    if (oModStitch.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModStitch.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModStitch.GetSetmodifiedby;
                if (oModStitch.GetSetmodifiedby.Length > 0)
                {
                    if (oModStitch.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModStitch.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertStitch: " + e.Message.ToString());
        }
        return result;
    }

    public ArrayList getStitchList(String comp, String stitchno, String peopleid, String name, String nokp, String telno, String datefrom, String dateto)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT people.comp, people.id, people.name, people.nokp, people.address, people.gender, people.telno, people.email, ";
                query = query + "        stitch_details.stitchno, date_format(stitch_details.stitchdate,'%d-%m-%Y') str_stitchdate, stitch_details.peopleid, stitch_details.remarks, stitch_details.measurement, ";
                query = query + "        stitch_details.baju_bahu, stitch_details.baju_labuh_lengan, stitch_details.baju_labuh_baju, stitch_details.baju_dada, stitch_details.baju_pinggang, ";
                query = query + "        stitch_details.baju_punggung, stitch_details.baju_labuh_kain, stitch_details.baju_leher, stitch_details.baju_span, stitch_details.baju_bahu_dada, stitch_details.baju_bahu_pinggang, ";
                query = query + "        stitch_details.seluar_pinggang, stitch_details.seluar_punggung, stitch_details.seluar_cawat, stitch_details.seluar_paha, stitch_details.seluar_lutut, stitch_details.seluar_bukaan_kaki, ";
                query = query + "        stitch_details.seluar_labuh_seluar, stitch_details.status ";
                query = query + " from   people, stitch_details ";
                query = query + " WHERE  people.comp is not NULL ";
                query = query + " AND    people.comp = stitch_details.comp ";
                query = query + " AND    people.id = stitch_details.peopleid ";
                query = query + " AND    stitch_details.status = 'ACTIVE' ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  people.comp = '" + comp + "' ";
                }
                if (stitchno.Trim().Length > 0)
                {
                    query = query + " and  stitch_details.stitchno = '" + stitchno + "' ";
                }
                if (name.Trim().Length > 0)
                {
                    query = query + " and  upper(people.name) like '%" + name + "%' ";
                }
                if (nokp.Trim().Length > 0)
                {
                    query = query + " and  upper(people.nokp) like '%" + nokp + "%' ";
                }
                if (telno.Trim().Length > 0)
                {
                    query = query + " and  upper(people.telno) like '%" + telno + "%' ";
                }
                if (datefrom.Trim().Length > 0)
                {
                    query = query + " and  stitch_details.stitchdate >= STR_TO_DATE('" + datefrom + "', '%d-%m-%Y') ";
                }
                if (dateto.Trim().Length > 0)
                {
                    query = query + " and  stitch_details.stitchdate <= STR_TO_DATE('" + dateto + "', '%d-%m-%Y') ";
                }
                query = query + " order by people.comp, people.name, stitch_details.stitchdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetid = replaceNull(dataReader, "id");
                    modItem.GetSetname = replaceNull(dataReader, "name");
                    modItem.GetSetnokp = replaceNull(dataReader, "nokp");
                    modItem.GetSetaddress = replaceNull(dataReader, "address");
                    modItem.GetSetgender = replaceNull(dataReader, "gender");
                    modItem.GetSettelno = replaceNull(dataReader, "telno");
                    modItem.GetSetemail = replaceNull(dataReader, "email");
                    modItem.GetSetstitchno = replaceNull(dataReader, "stitchno");
                    modItem.GetSetstitchdate = replaceNull(dataReader, "str_stitchdate");
                    modItem.GetSetpeopleid = replaceNull(dataReader, "peopleid");
                    modItem.GetSetremarks = replaceNull(dataReader, "remarks");
                    modItem.GetSetmeasurement = replaceNull(dataReader, "measurement");
                    modItem.GetSetbaju_bahu = replaceNull(dataReader, "baju_bahu");
                    modItem.GetSetbaju_labuh_lengan = replaceNull(dataReader, "baju_labuh_lengan");
                    modItem.GetSetbaju_labuh_baju = replaceNull(dataReader, "baju_labuh_baju");
                    modItem.GetSetbaju_dada = replaceNull(dataReader, "baju_dada");
                    modItem.GetSetbaju_pinggang = replaceNull(dataReader, "baju_pinggang");
                    modItem.GetSetbaju_punggung = replaceNull(dataReader, "baju_punggung");
                    modItem.GetSetbaju_labuh_kain = replaceNull(dataReader, "baju_labuh_kain");
                    modItem.GetSetbaju_leher = replaceNull(dataReader, "baju_leher");
                    modItem.GetSetbaju_span = replaceNull(dataReader, "baju_span");
                    modItem.GetSetbaju_bahu_dada = replaceNull(dataReader, "baju_bahu_dada");
                    modItem.GetSetbaju_bahu_pinggang = replaceNull(dataReader, "baju_bahu_pinggang");
                    modItem.GetSetseluar_pinggang = replaceNull(dataReader, "seluar_pinggang");
                    modItem.GetSetseluar_punggung = replaceNull(dataReader, "seluar_punggung");
                    modItem.GetSetseluar_cawat = replaceNull(dataReader, "seluar_cawat");
                    modItem.GetSetseluar_paha = replaceNull(dataReader, "seluar_paha");
                    modItem.GetSetseluar_lutut = replaceNull(dataReader, "seluar_lutut");
                    modItem.GetSetseluar_bukaan_kaki = replaceNull(dataReader, "seluar_bukaan_kaki");
                    modItem.GetSetseluar_labuh_seluar = replaceNull(dataReader, "seluar_labuh_seluar");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStitchList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public ArrayList getStitchListObject(String comp, String stitchno, String peopleid, String name, String nokp, String telno, String datefrom, String dateto)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT people.comp, people.id, people.name, people.nokp, people.address, people.gender, people.telno, people.email, ";
                query = query + "        stitch_details.stitchno, date_format(stitch_details.stitchdate,'%d-%m-%Y') str_stitchdate, stitch_details.peopleid, stitch_details.remarks, stitch_details.measurement, ";
                query = query + "        stitch_details.baju_bahu, stitch_details.baju_labuh_lengan, stitch_details.baju_labuh_baju, stitch_details.baju_dada, stitch_details.baju_pinggang, ";
                query = query + "        stitch_details.baju_punggung, stitch_details.baju_labuh_kain, stitch_details.baju_leher, stitch_details.baju_span, stitch_details.baju_bahu_dada, stitch_details.baju_bahu_pinggang, ";
                query = query + "        stitch_details.seluar_pinggang, stitch_details.seluar_punggung, stitch_details.seluar_cawat, stitch_details.seluar_paha, stitch_details.seluar_lutut, stitch_details.seluar_bukaan_kaki, ";
                query = query + "        stitch_details.seluar_labuh_seluar, stitch_details.status ";
                query = query + " from   people, stitch_details ";
                query = query + " WHERE  people.comp is not NULL ";
                query = query + " AND    people.comp = stitch_details.comp ";
                query = query + " AND    people.id = stitch_details.peopleid ";
                query = query + " AND    stitch_details.status = 'ACTIVE' ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  people.comp = '" + comp + "' ";
                }
                if (stitchno.Trim().Length > 0)
                {
                    query = query + " and  stitch_details.stitchno = '" + stitchno + "' ";
                }
                if (name.Trim().Length > 0)
                {
                    query = query + " and  upper(people.name) like '%" + name + "%' ";
                }
                if (nokp.Trim().Length > 0)
                {
                    query = query + " and  upper(people.nokp) like '%" + nokp + "%' ";
                }
                if (telno.Trim().Length > 0)
                {
                    query = query + " and  upper(people.telno) like '%" + telno + "%' ";
                }
                query = query + " order by people.comp, people.name ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetid = replaceNull(dataReader, "id");
                    modItem.GetSetname = replaceNull(dataReader, "name");
                    modItem.GetSetnokp = replaceNull(dataReader, "nokp");
                    modItem.GetSetaddress = replaceNull(dataReader, "address");
                    modItem.GetSetgender = replaceNull(dataReader, "gender");
                    modItem.GetSettelno = replaceNull(dataReader, "telno");
                    modItem.GetSetemail = replaceNull(dataReader, "email");
                    modItem.GetSetstitchno = replaceNull(dataReader, "stitchno");
                    modItem.GetSetstitchdate = replaceNull(dataReader, "str_stitchdate");
                    modItem.GetSetpeopleid = replaceNull(dataReader, "peopleid");
                    modItem.GetSetremarks = replaceNull(dataReader, "remarks");
                    modItem.GetSetmeasurement = replaceNull(dataReader, "measurement");
                    modItem.GetSetbaju_bahu = replaceNull(dataReader, "baju_bahu");
                    modItem.GetSetbaju_labuh_lengan = replaceNull(dataReader, "baju_labuh_lengan");
                    modItem.GetSetbaju_labuh_baju = replaceNull(dataReader, "baju_labuh_baju");
                    modItem.GetSetbaju_dada = replaceNull(dataReader, "baju_dada");
                    modItem.GetSetbaju_pinggang = replaceNull(dataReader, "baju_pinggang");
                    modItem.GetSetbaju_punggung = replaceNull(dataReader, "baju_punggung");
                    modItem.GetSetbaju_labuh_kain = replaceNull(dataReader, "baju_labuh_kain");
                    modItem.GetSetbaju_leher = replaceNull(dataReader, "baju_leher");
                    modItem.GetSetbaju_span = replaceNull(dataReader, "baju_span");
                    modItem.GetSetbaju_bahu_dada = replaceNull(dataReader, "baju_bahu_dada");
                    modItem.GetSetbaju_bahu_pinggang = replaceNull(dataReader, "baju_bahu_pinggang");
                    modItem.GetSetseluar_pinggang = replaceNull(dataReader, "seluar_pinggang");
                    modItem.GetSetseluar_punggung = replaceNull(dataReader, "seluar_punggung");
                    modItem.GetSetseluar_cawat = replaceNull(dataReader, "seluar_cawat");
                    modItem.GetSetseluar_paha = replaceNull(dataReader, "seluar_paha");
                    modItem.GetSetseluar_lutut = replaceNull(dataReader, "seluar_lutut");
                    modItem.GetSetseluar_bukaan_kaki = replaceNull(dataReader, "seluar_bukaan_kaki");
                    modItem.GetSetseluar_labuh_seluar = replaceNull(dataReader, "seluar_labuh_seluar");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                    //lsItemMod.Add(modItem);
                    object objRptData = new
                    {
                        comp = modItem.GetSetcomp,
                        peopleid = modItem.GetSetpeopleid,
                        name = modItem.GetSetname,
                        nokp = modItem.GetSetnokp,
                        telno = modItem.GetSettelno,
                        remarks = modItem.GetSetremarks,
                        measurement = modItem.GetSetmeasurement,
                        baju_bahu = modItem.GetSetbaju_bahu,
                        baju_labuh_lengan = modItem.GetSetbaju_labuh_lengan,
                        baju_labuh_baju = modItem.GetSetbaju_labuh_baju,
                        baju_dada = modItem.GetSetbaju_dada,
                        baju_pinggang = modItem.GetSetbaju_pinggang,
                        baju_punggung = modItem.GetSetbaju_punggung,
                        baju_labuh_kain = modItem.GetSetbaju_labuh_kain,
                        baju_leher = modItem.GetSetbaju_leher,
                        baju_span = modItem.GetSetbaju_span,
                        baju_bahu_dada = modItem.GetSetbaju_bahu_dada,
                        baju_bahu_pinggang = modItem.GetSetbaju_bahu_pinggang,
                        seluar_pinggang = modItem.GetSetseluar_pinggang,
                        seluar_punggung = modItem.GetSetseluar_punggung,
                        seluar_cawat = modItem.GetSetseluar_cawat,
                        seluar_paha = modItem.GetSetseluar_paha,
                        seluar_lutut = modItem.GetSetseluar_lutut,
                        seluar_bukaan_kaki = modItem.GetSetseluar_bukaan_kaki,
                        seluar_labuh_seluar = modItem.GetSetseluar_labuh_seluar,
                        status = modItem.GetSetstatus
                    };
                    lsItemMod.Add(objRptData);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStitchListObject: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public MainModel getStitch(String comp, String stitchno)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT people.comp, people.id, people.name, people.nokp, people.address, people.gender, people.telno, people.email, ";
                query = query + "        stitch_details.stitchno, date_format(stitch_details.stitchdate,'%d-%m-%Y') str_stitchdate, stitch_details.peopleid, stitch_details.remarks, stitch_details.measurement, ";
                query = query + "        stitch_details.baju_bahu, stitch_details.baju_labuh_lengan, stitch_details.baju_labuh_baju, stitch_details.baju_dada, stitch_details.baju_pinggang, ";
                query = query + "        stitch_details.baju_punggung, stitch_details.baju_labuh_kain, stitch_details.baju_leher, stitch_details.baju_span, stitch_details.baju_bahu_dada, stitch_details.baju_bahu_pinggang, ";
                query = query + "        stitch_details.seluar_pinggang, stitch_details.seluar_punggung, stitch_details.seluar_cawat, stitch_details.seluar_paha, stitch_details.seluar_lutut, stitch_details.seluar_bukaan_kaki, ";
                query = query + "        stitch_details.seluar_labuh_seluar, stitch_details.status ";
                query = query + " from   people, stitch_details ";
                query = query + " WHERE  people.comp is not NULL ";
                query = query + " AND    people.comp = stitch_details.comp ";
                query = query + " AND    people.id = stitch_details.peopleid ";
                query = query + " AND    stitch_details.status = 'ACTIVE' ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  people.comp = '" + comp + "' ";
                }
                if (stitchno.Trim().Length > 0)
                {
                    query = query + " and  stitch_details.stitchno = '" + stitchno + "' ";
                }
                query = query + " order by people.comp, people.name, stitch_details.stitchno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetid = replaceNull(dataReader, "id");
                    modItem.GetSetname = replaceNull(dataReader, "name");
                    modItem.GetSetnokp = replaceNull(dataReader, "nokp");
                    modItem.GetSetaddress = replaceNull(dataReader, "address");
                    modItem.GetSetgender = replaceNull(dataReader, "gender");
                    modItem.GetSettelno = replaceNull(dataReader, "telno");
                    modItem.GetSetemail = replaceNull(dataReader, "email");
                    modItem.GetSetstitchno = replaceNull(dataReader, "stitchno");
                    modItem.GetSetstitchdate = replaceNull(dataReader, "str_stitchdate");
                    modItem.GetSetpeopleid = replaceNull(dataReader, "peopleid");
                    modItem.GetSetremarks = replaceNull(dataReader, "remarks");
                    modItem.GetSetmeasurement = replaceNull(dataReader, "measurement");
                    modItem.GetSetbaju_bahu = replaceNull(dataReader, "baju_bahu");
                    modItem.GetSetbaju_labuh_lengan = replaceNull(dataReader, "baju_labuh_lengan");
                    modItem.GetSetbaju_labuh_baju = replaceNull(dataReader, "baju_labuh_baju");
                    modItem.GetSetbaju_dada = replaceNull(dataReader, "baju_dada");
                    modItem.GetSetbaju_pinggang = replaceNull(dataReader, "baju_pinggang");
                    modItem.GetSetbaju_punggung = replaceNull(dataReader, "baju_punggung");
                    modItem.GetSetbaju_labuh_kain = replaceNull(dataReader, "baju_labuh_kain");
                    modItem.GetSetbaju_leher = replaceNull(dataReader, "baju_leher");
                    modItem.GetSetbaju_span = replaceNull(dataReader, "baju_span");
                    modItem.GetSetbaju_bahu_dada = replaceNull(dataReader, "baju_bahu_dada");
                    modItem.GetSetbaju_bahu_pinggang = replaceNull(dataReader, "baju_bahu_pinggang");
                    modItem.GetSetseluar_pinggang = replaceNull(dataReader, "seluar_pinggang");
                    modItem.GetSetseluar_punggung = replaceNull(dataReader, "seluar_punggung");
                    modItem.GetSetseluar_cawat = replaceNull(dataReader, "seluar_cawat");
                    modItem.GetSetseluar_paha = replaceNull(dataReader, "seluar_paha");
                    modItem.GetSetseluar_lutut = replaceNull(dataReader, "seluar_lutut");
                    modItem.GetSetseluar_bukaan_kaki = replaceNull(dataReader, "seluar_bukaan_kaki");
                    modItem.GetSetseluar_labuh_seluar = replaceNull(dataReader, "seluar_labuh_seluar");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStitch: " + e.Message.ToString());
        }
        return modItem;
    }

    #endregion /*** END FOR STITCH ***/

    /*** BEGIN FOR ITEM ***/

    public ArrayList getOrderTypeList(String comp, String status, String ordertype)
    {
        ArrayList lsOrderTypeMod = new ArrayList();

        MainModel modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetordertype = "NORMAL";
        modItem.GetSetordertypedesc = "JUALAN NORMAL";
        lsOrderTypeMod.Add(modItem);

        modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetordertype = "PROMOTION";
        modItem.GetSetordertypedesc = "JUALAN PROMOSI";
        lsOrderTypeMod.Add(modItem);

        modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetordertype = "AGENT";
        modItem.GetSetordertypedesc = "JUALAN AGENT";
        lsOrderTypeMod.Add(modItem);

        modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetordertype = "STOCKIST";
        modItem.GetSetordertypedesc = "JUALAN STOCKIST";
        lsOrderTypeMod.Add(modItem);

        return lsOrderTypeMod;
    }

    public ArrayList getOrderCategoryList(String comp, String status, String ordercat)
    {
        ArrayList lsOrderCatMod = new ArrayList();

        MainModel modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetordercat = "SALES_ORDER";
        modItem.GetSetordercatdesc = "PESANAN JUALAN";
        lsOrderCatMod.Add(modItem);

        return lsOrderCatMod;
    }

    public ArrayList getPaymentTypeList(String comp, String status, String ordertype)
    {
        ArrayList lsPayCatMod = new ArrayList();

        MainModel modItem = new MainModel();
        modItem.GetSetrowno = 1;
        modItem.GetSetpaytype = "CASH";
        modItem.GetSetpaytypedesc = "TUNAI";
        lsPayCatMod.Add(modItem);

        return lsPayCatMod;
    }

    public ArrayList getItemList(String comp, String itemno, String itemdesc, String itemcat)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item.comp, item.itemno, item.itemdesc, item.itemcat, item.itemtype, item.purchaseprice, item.costprice,  ";
                query = query + "        item.salesprice, item.qtyorder, item.qtydemand, item.qtysoh, item.costsoh, item.qtysafetystock, item.itemstatus ";
                query = query + " from   item ";
                query = query + " WHERE  item.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item.itemno = '" + itemno + "' ";
                }
                if (itemdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(item.itemdesc) like '%" + itemdesc + "%' ";
                }
                if (itemcat.Trim().Length > 0)
                {
                    query = query + " and  item.itemcat = '" + itemcat + "' ";
                }
                query = query + " order by item.comp, item.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modItem.GetSetpurchaseprice = replaceDoubleZero(dataReader, "purchaseprice");
                    modItem.GetSetcostprice = replaceDoubleZero(dataReader, "costprice");
                    modItem.GetSetsalesprice = replaceDoubleZero(dataReader, "salesprice");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "qtyorder");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "qtydemand");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSetqtysafetystock = replaceZero(dataReader, "qtysafetystock");
                    modItem.GetSetitemstatus = replaceNull(dataReader, "itemstatus");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public ArrayList getItemDiscountList(String comp, String ordercat, String ordertype, String itemno)
    {
        ArrayList lsItemDiscMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select item.comp, item.itemno, item.itemdesc, item.itemcat, item.itemtype, item.purchaseprice, item.costprice, item.salesprice, item_discount.disccat, item_discount.discvalue, item_discount.ordercat, item_discount.ordertype, IFNULL(item_discount.status,'NOT_APPLICABLE') str_status,";
                query = query + "        case item_discount.disccat ";
                query = query + "        when 'AMOUNT' THEN item_discount.discvalue ";
                query = query + "        when 'PERCENTAGE' THEN CASE item_discount.ordercat ";
                query = query + "                               WHEN 'SALES_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                query = query + "                               WHEN 'ONLINE_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                query = query + "                               WHEN 'TRANSFER_ORDER' THEN round(item.costprice * item_discount.discvalue / 100, 2) ";
                query = query + "                               WHEN 'RECEIVE_ORDER' THEN round(item.purchaseprice * item_discount.discvalue / 100, 2) ";
                query = query + "                               WHEN 'GIVE_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                query = query + "                               WHEN 'PURCHASE_ORDER' THEN round(item.purchaseprice * item_discount.discvalue / 100, 2) ELSE 0 END ";
                query = query + "        else 0 end discamount, ";
                query = query + "        CASE item_discount.ordercat ";
                query = query + "        WHEN 'SALES_ORDER' THEN item.salestaxcode ";
                query = query + "        WHEN 'ONLINE_ORDER' THEN item.salestaxcode ";
                query = query + "        WHEN 'TRANSFER_ORDER' THEN item.costtaxcode ";
                query = query + "        WHEN 'RECEIVE_ORDER' THEN item.purchasetaxcode ";
                query = query + "        WHEN 'GIVE_ORDER' THEN item.salestaxcode ";
                query = query + "        WHEN 'PURCHASE_ORDER' THEN item.purchasetaxcode ";
                query = query + "        ELSE 'NA' END taxcode, ";
                query = query + "        CASE item_discount.ordercat ";
                query = query + "        WHEN 'SALES_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                query = query + "        WHEN 'ONLINE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                query = query + "        WHEN 'TRANSFER_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.costtaxcode) ";
                query = query + "        WHEN 'RECEIVE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.purchasetaxcode) ";
                query = query + "        WHEN 'GIVE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                query = query + "        WHEN 'PURCHASE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.purchasetaxcode) ";
                query = query + "        ELSE 0 END taxrate ";
                query = query + " from   item, item_discount ";
                query = query + " WHERE  item.comp = item_discount.comp ";
                query = query + " AND    item.itemno = item_discount.itemno";
                query = query + " and    item.comp = '" + comp + "' ";
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  item_discount.ordercat = '" + ordercat + "' ";
                }
                if (ordertype.Trim().Length > 0)
                {
                    query = query + " and  item_discount.ordertype = '" + ordertype + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item.itemno = '" + itemno + "' ";
                }
                query = query + " order by item.comp, item.itemno, item_discount.ordercat, item_discount.ordertype ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                int rowno = 0;
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    rowno = rowno + 1;
                    modItem.GetSetrowno = rowno;
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modItem.GetSetpurchaseprice = replaceDoubleZero(dataReader, "purchaseprice");
                    modItem.GetSetcostprice = replaceDoubleZero(dataReader, "costprice");
                    modItem.GetSetsalesprice = replaceDoubleZero(dataReader, "salesprice");
                    modItem.GetSetdisccat = replaceNull(dataReader, "disccat");
                    modItem.GetSetdiscvalue = replaceDoubleZero(dataReader, "discvalue");
                    modItem.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modItem.GetSetstatus = replaceNull(dataReader, "str_status");
                    modItem.GetSetdiscounttype = replaceNull(dataReader, "ordertype");
                    modItem.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modItem.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modItem.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    lsItemDiscMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemDiscountList: " + e.Message.ToString());
        }
        return lsItemDiscMod;
    }

    public ArrayList getItemDiscountList(String comp, String ordercat, String ordertype, String itemno, String pricetype)
    {
        ArrayList lsItemDiscMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (pricetype.Equals("AVERAGE_COST"))
                {
                    //get average cost for selected item
                    query = "";
                    query = query + " select item.comp, item.itemno, item.itemdesc, item.itemcat, item.purchaseprice, ";
                    query = query + "        (select sum(item_stock.costsoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) / (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) costprice, ";
                    query = query + "        item.salesprice, 'AMOUNT' disccat, 0 discvalue, '"+ ordercat + "' ordercat, '"+ ordertype + "' ordertype, 'NOT_APPLICABLE' str_status,";
                    query = query + "        0 discamount, ";
                    query = query + "        'NA' taxcode, ";
                    query = query + "        0 taxrate ";
                    query = query + " from   item ";
                    query = query + " WHERE  item.comp is not null ";
                    query = query + " and    item.comp = '" + comp + "' ";
                    query = query + " and    exists (select item_stock.itemno from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) ";
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by item.comp, item.itemno ";
                }
                else
                { 
                    query = "";
                    query = query + " select item.comp, item.itemno, item.itemdesc, item.itemcat, item.purchaseprice, item.costprice, item.salesprice, item_discount.disccat, item_discount.discvalue, item_discount.ordercat, item_discount.ordertype, IFNULL(item_discount.status,'NOT_APPLICABLE') str_status,";
                    query = query + "        case item_discount.disccat ";
                    query = query + "        when 'AMOUNT' THEN item_discount.discvalue ";
                    query = query + "        when 'PERCENTAGE' THEN CASE item_discount.ordercat ";
                    query = query + "                               WHEN 'SALES_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                    query = query + "                               WHEN 'ONLINE_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                    query = query + "                               WHEN 'TRANSFER_ORDER' THEN round(item.costprice * item_discount.discvalue / 100, 2) ";
                    query = query + "                               WHEN 'RECEIVE_ORDER' THEN round(item.purchaseprice * item_discount.discvalue / 100, 2) ";
                    query = query + "                               WHEN 'GIVE_ORDER' THEN round(item.salesprice * item_discount.discvalue / 100, 2) ";
                    query = query + "                               WHEN 'PURCHASE_ORDER' THEN round(item.purchaseprice * item_discount.discvalue / 100, 2) ELSE 0 END ";
                    query = query + "        else 0 end discamount, ";
                    query = query + "        CASE item_discount.ordercat ";
                    query = query + "        WHEN 'SALES_ORDER' THEN item.salestaxcode ";
                    query = query + "        WHEN 'ONLINE_ORDER' THEN item.salestaxcode ";
                    query = query + "        WHEN 'TRANSFER_ORDER' THEN item.costtaxcode ";
                    query = query + "        WHEN 'RECEIVE_ORDER' THEN item.purchasetaxcode ";
                    query = query + "        WHEN 'GIVE_ORDER' THEN item.salestaxcode ";
                    query = query + "        WHEN 'PURCHASE_ORDER' THEN item.purchasetaxcode ";
                    query = query + "        ELSE 'NA' END taxcode, ";
                    query = query + "        CASE item_discount.ordercat ";
                    query = query + "        WHEN 'SALES_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                    query = query + "        WHEN 'ONLINE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                    query = query + "        WHEN 'TRANSFER_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.costtaxcode) ";
                    query = query + "        WHEN 'RECEIVE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.purchasetaxcode) ";
                    query = query + "        WHEN 'GIVE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.salestaxcode) ";
                    query = query + "        WHEN 'PURCHASE_ORDER' THEN (select max(tax.taxrate) from tax where tax.comp = item.comp and tax.taxcode = item.purchasetaxcode) ";
                    query = query + "        ELSE 0 END taxrate ";
                    query = query + " from   item, item_discount ";
                    query = query + " WHERE  item.comp = item_discount.comp ";
                    query = query + " AND    item.itemno = item_discount.itemno";
                    query = query + " and    item.comp = '" + comp + "' ";
                    if (ordercat.Trim().Length > 0)
                    {
                        query = query + " and  item_discount.ordercat = '" + ordercat + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  item_discount.ordertype = '" + ordertype + "' ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by item.comp, item.itemno, item_discount.ordertype ";
                }
                //WriteToLogFile("MainController-getItemDiscountList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                int rowno = 0;
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    rowno = rowno + 1;
                    modItem.GetSetrowno = rowno;
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetpurchaseprice = replaceDoubleZero(dataReader, "purchaseprice");
                    modItem.GetSetcostprice = replaceDoubleZero(dataReader, "costprice");
                    modItem.GetSetsalesprice = replaceDoubleZero(dataReader, "salesprice");
                    modItem.GetSetdisccat = replaceNull(dataReader, "disccat");
                    modItem.GetSetdiscvalue = replaceDoubleZero(dataReader, "discvalue");
                    modItem.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modItem.GetSetstatus = replaceNull(dataReader, "str_status");
                    modItem.GetSetdiscounttype = replaceNull(dataReader, "ordertype");
                    modItem.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modItem.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modItem.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    lsItemDiscMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemDiscountList: " + e.Message.ToString());
        }
        return lsItemDiscMod;
    }

    public MainModel getItemDetails(String comp, String itemno)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item.comp, item.itemno, item.itemdesc, item.itemcat, item.itemtype, item.purchaseprice, item.costprice,  ";
                query = query + "        item.salesprice, item.qtyorder, item.qtydemand, item.qtysoh, item.costsoh, item.qtysafetystock, item.itemstatus ";
                query = query + " from   item ";
                query = query + " WHERE  item.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item.itemno = '" + itemno + "' ";
                }
                query = query + " order by item.comp, item.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modItem.GetSetpurchaseprice = replaceDoubleZero(dataReader, "purchaseprice");
                    modItem.GetSetcostprice = replaceDoubleZero(dataReader, "costprice");
                    modItem.GetSetsalesprice = replaceDoubleZero(dataReader, "salesprice");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "qtyorder");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "qtydemand");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSetqtysafetystock = replaceZero(dataReader, "qtysafetystock");
                    modItem.GetSetitemstatus = replaceNull(dataReader, "itemstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemDetails: " + e.Message.ToString());
        }
        return modItem;
    }

    public String insertItemMaster(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO item (comp, itemno, itemdesc, itemcat, itemtype, purchaseprice, costprice, salesprice, qtyorder, qtydemand, qtysoh, costsoh, qtysafetystock, itemstatus) ";
                query = query + " VALUES (?comp, ?itemno, ?itemdesc, ?itemcat, ?itemtype, ?purchaseprice, ?costprice, ?salesprice, ?qtyorder, ?qtydemand, ?qtysoh, ?costsoh, ?qtysafetystock, ?itemstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?itemcat", MySqlDbType.VarChar).Value = oModItem.GetSetitemcat;
                cmd.Parameters.Add("?itemtype", MySqlDbType.VarChar).Value = oModItem.GetSetitemtype;
                cmd.Parameters.Add("?purchaseprice", MySqlDbType.Double).Value = oModItem.GetSetpurchaseprice;
                cmd.Parameters.Add("?costprice", MySqlDbType.Double).Value = oModItem.GetSetcostprice;
                cmd.Parameters.Add("?salesprice", MySqlDbType.Double).Value = oModItem.GetSetsalesprice;
                cmd.Parameters.Add("?qtyorder", MySqlDbType.Int16).Value = oModItem.GetSetqtyorder;
                cmd.Parameters.Add("?qtydemand", MySqlDbType.Int16).Value = oModItem.GetSetqtydemand;
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModItem.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModItem.GetSetcostsoh;
                cmd.Parameters.Add("?qtysafetystock", MySqlDbType.Int16).Value = oModItem.GetSetqtysafetystock;
                cmd.Parameters.Add("?itemstatus", MySqlDbType.VarChar).Value = oModItem.GetSetitemstatus;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertItemMaster: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateItemMaster(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE item ";
                query = query + " SET    itemdesc = ?itemdesc, itemcat = ?itemcat, itemtype = ?itemtype, purchaseprice = ?purchaseprice, costprice = ?costprice, salesprice = ?salesprice, qtyorder = ?qtyorder, qtydemand = ?qtydemand, qtysoh = ?qtysoh, costsoh = ?costsoh, qtysafetystock = ?qtysafetystock, itemstatus = ?itemstatus ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?itemcat", MySqlDbType.VarChar).Value = oModItem.GetSetitemcat;
                cmd.Parameters.Add("?itemtype", MySqlDbType.VarChar).Value = oModItem.GetSetitemtype;
                cmd.Parameters.Add("?purchaseprice", MySqlDbType.Double).Value = oModItem.GetSetpurchaseprice;
                cmd.Parameters.Add("?costprice", MySqlDbType.Double).Value = oModItem.GetSetcostprice;
                cmd.Parameters.Add("?salesprice", MySqlDbType.Double).Value = oModItem.GetSetsalesprice;
                cmd.Parameters.Add("?qtyorder", MySqlDbType.Int16).Value = oModItem.GetSetqtyorder;
                cmd.Parameters.Add("?qtydemand", MySqlDbType.Int16).Value = oModItem.GetSetqtydemand;
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModItem.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModItem.GetSetcostsoh;
                cmd.Parameters.Add("?qtysafetystock", MySqlDbType.Int16).Value = oModItem.GetSetqtysafetystock;
                cmd.Parameters.Add("?itemstatus", MySqlDbType.VarChar).Value = oModItem.GetSetitemstatus;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateItemMaster: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertItemDiscount(MainModel modItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO item_discount (comp, ordercat, ordertype, itemno, disccat, discvalue, status) ";
                query = query + " VALUES (?comp, ?ordercat, ?ordertype, ?itemno, ?disccat, ?discvalue, ?status) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = modItem.GetSetcomp;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = modItem.GetSetordercat;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = modItem.GetSetdiscounttype;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = modItem.GetSetitemno;
                cmd.Parameters.Add("?disccat", MySqlDbType.VarChar).Value = modItem.GetSetdisccat;
                cmd.Parameters.Add("?discvalue", MySqlDbType.Double).Value = modItem.GetSetdiscvalue;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = modItem.GetSetstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertItemDiscount: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateItemDiscount(MainModel modItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE item_discount ";
                query = query + " SET    disccat = ?disccat, discvalue = ?discvalue, status = ?status ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno AND ordercat = ?ordercat AND ordertype = ?ordertype ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = modItem.GetSetcomp;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = modItem.GetSetordercat;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = modItem.GetSetdiscounttype;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = modItem.GetSetitemno;
                cmd.Parameters.Add("?disccat", MySqlDbType.VarChar).Value = modItem.GetSetdisccat;
                cmd.Parameters.Add("?discvalue", MySqlDbType.Double).Value = modItem.GetSetdiscvalue;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = modItem.GetSetstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateItemDiscount: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteItemDiscount(MainModel modItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM item_discount ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno AND ordercat = ?ordercat AND ordertype = ?ordertype ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = modItem.GetSetcomp;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = modItem.GetSetordercat;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = modItem.GetSetdiscounttype;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = modItem.GetSetitemno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteItemDiscount: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public MainModel getItemStockSummary(String comp, String itemno, String location, String datesoh)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock.comp, sum(item_stock.qtysoh) sum_qtysoh, sum(item_stock.costsoh) sum_costsoh, ";
                query = query + "        0 sum_qtysoo, 0 sum_qtysod ";
                query = query + " FROM   item_stock ";
                query = query + " WHERE  item_stock.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " group by item_stock.comp ";
                query = query + " order by item_stock.comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "sum_qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "sum_costsoh");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "sum_qtysoo");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "sum_qtysod");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockSummary: " + e.Message.ToString());
        }
        return modItem;
    }

    public ArrayList getItemStockListSummary(String comp, String itemno, String location, String datesoh)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock.comp, item_stock.itemno, item_stock.itemdesc, sum(item_stock.qtysoh) sum_qtysoh, sum(item_stock.costsoh) sum_costsoh, ";
                query = query + "        0 sum_qtysoo, 0 sum_qtysod "; 
                query = query + " FROM   item_stock ";
                query = query + " WHERE  item_stock.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " group by item_stock.comp, item_stock.itemno, item_stock.itemdesc ";
                query = query + " order by item_stock.comp, item_stock.itemno, item_stock.itemdesc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "sum_qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "sum_costsoh");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "sum_qtysoo");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "sum_qtysod");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockListSummary: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public ArrayList getItemStockListSummary2(String comp, String itemno)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item.comp, item.itemno, item.itemdesc, item.itemcat, (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_qtysoh, (select sum(item_stock.costsoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_costsoh, ";
                query = query + "        ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyallocated, ";
                query = query + "        (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyavailable, ";
                query = query + "        0 sum_qtysoo, 0 sum_qtysod ";
                query = query + " FROM   item ";
                query = query + " WHERE  item.comp is not NULL ";
                query = query + " AND    item.itemcat = 'INVENTORY' ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item.itemno = '" + itemno + "' ";
                }
                query = query + " group by item.comp, item.itemno, item.itemdesc ";
                query = query + " order by item.comp, item.itemno, item.itemdesc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "sum_qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "sum_costsoh");
                    modItem.GetSetqtyallocated = replaceZero(dataReader, "sum_qtyallocated");
                    modItem.GetSetqtyavailable = replaceZero(dataReader, "sum_qtyavailable");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "sum_qtysoo");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "sum_qtysod");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockListSummary2: " + e.Message.ToString());
        }
        return lsItemMod;
    }
    public ArrayList getItemStockListSummary3(String comp, String searchitem)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item.comp, item.itemno, item.itemdesc, item.itemcat, (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_qtysoh, (select sum(item_stock.costsoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_costsoh, ";
                query = query + "        ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyallocated, ";
                query = query + "        (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyavailable, ";
                query = query + "        0 sum_qtysoo, 0 sum_qtysod ";
                query = query + " FROM   item ";
                query = query + " WHERE  item.comp is not NULL ";
                query = query + " AND    item.itemcat = 'INVENTORY' ";
                query = query + " and  item.comp = '" + comp + "' ";
                if (searchitem.Trim().Length > 0)
                {
                    query = query + " and  (upper(item.itemno) like upper('%" + searchitem + "%') ";
                    query = query + " or  upper(item.itemdesc) like upper('%" + searchitem + "%')) ";
                }
                query = query + " group by item.comp, item.itemno, item.itemdesc ";
                query = query + " order by item.comp, item.itemno, item.itemdesc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "sum_qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "sum_costsoh");
                    modItem.GetSetqtyallocated = replaceZero(dataReader, "sum_qtyallocated");
                    modItem.GetSetqtyavailable = replaceZero(dataReader, "sum_qtyavailable");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "sum_qtysoo");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "sum_qtysod");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockListSummary2: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public MainModel getItemStockSummary2(String comp, String itemno)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item.comp, item.itemno, item.itemdesc, item.itemcat, (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_qtysoh, (select sum(item_stock.costsoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) sum_costsoh, ";
                query = query + "        ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyallocated, ";
                query = query + "        (select sum(item_stock.qtysoh) from item_stock where item_stock.comp = item.comp and item_stock.itemno = item.itemno) - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item.comp AND shipment_details.itemno = item.itemno and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) sum_qtyavailable, ";
                query = query + "        0 sum_qtysoo, 0 sum_qtysod ";
                query = query + " FROM   item ";
                query = query + " WHERE  item.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item.itemno = '" + itemno + "' ";
                }
                query = query + " group by item.comp, item.itemno, item.itemdesc, item.itemcat ";
                query = query + " order by item.comp, item.itemno, item.itemdesc, item.itemcat ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "sum_qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "sum_costsoh");
                    modItem.GetSetqtyallocated = replaceZero(dataReader, "sum_qtyallocated");
                    modItem.GetSetqtyavailable = replaceZero(dataReader, "sum_qtyavailable");
                    modItem.GetSetqtyorder = replaceZero(dataReader, "sum_qtysoo");
                    modItem.GetSetqtydemand = replaceZero(dataReader, "sum_qtysod");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockSummary2: " + e.Message.ToString());
        }
        return modItem;
    }

    public ArrayList getItemStockList(String comp, String itemno, String location, String datesoh, Boolean existonly)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock.comp, item_stock.itemno, item_stock.itemdesc, item.itemcat, item_stock.location, ";
                query = query + "        date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock.qtysoh, item_stock.costsoh, ";
                query = query + "        ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item_stock.comp AND shipment_details.itemno = item_stock.itemno AND shipment_details.location = item_stock.location AND shipment_details.datesoh = item_stock.datesoh and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) qtyallocated, ";
                query = query + "        item_stock.qtysoh - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item_stock.comp AND shipment_details.itemno = item_stock.itemno AND shipment_details.location = item_stock.location AND shipment_details.datesoh = item_stock.datesoh and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) qtyavailable ";
                query = query + " from   item_stock, item ";
                query = query + " WHERE  item_stock.comp is not NULL ";
                query = query + " AND    item_stock.comp = item.comp ";
                query = query + " AND    item_stock.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (existonly)
                {
                    query = query + " and item_stock.qtysoh - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item_stock.comp AND shipment_details.itemno = item_stock.itemno AND shipment_details.location = item_stock.location AND shipment_details.datesoh = item_stock.datesoh and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW')), 0) > 0 ";
                }
                query = query + " order by item_stock.comp, item_stock.itemno ";
                //WriteToLogFile("MainController-getItemStockList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetqtyallocated = replaceZero(dataReader, "qtyallocated");
                    modItem.GetSetqtyavailable = replaceZero(dataReader, "qtyavailable");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public MainModel getItemStockDetails(String comp, String itemno, String location, String datesoh)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock.comp, item_stock.itemno, item_stock.itemdesc, item.itemcat, item_stock.location, ";
                query = query + "        date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock.qtysoh, item_stock.costsoh, ";
                query = query + "        ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item_stock.comp AND shipment_details.itemno = item_stock.itemno AND shipment_details.location = item_stock.location AND shipment_details.datesoh = item_stock.datesoh and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) qtyallocated, ";
                query = query + "        item_stock.qtysoh - ifnull((SELECT sum(shipment_details.shipment_quantity) FROM shipment_details WHERE shipment_details.comp = item_stock.comp AND shipment_details.itemno = item_stock.itemno AND shipment_details.location = item_stock.location AND shipment_details.datesoh = item_stock.datesoh and shipment_details.shipmentno IN (SELECT shipment_header.shipmentno FROM shipment_header WHERE shipment_header.status = 'NEW' and shipment_header.comp = shipment_details.comp)), 0) qtyavailable ";
                query = query + " from   item_stock, item ";
                query = query + " WHERE  item_stock.comp is not NULL ";
                query = query + " AND    item_stock.comp = item.comp ";
                query = query + " AND    item_stock.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " order by item_stock.comp, item_stock.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetqtyallocated = replaceZero(dataReader, "qtyallocated");
                    modItem.GetSetqtyavailable = replaceZero(dataReader, "qtyavailable");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockDetails: " + e.Message.ToString());
        }
        return modItem;
    }

    public String insertItemStock(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO item_stock (comp, itemno, itemdesc, location, datesoh, qtysoh, costsoh) ";
                query = query + " VALUES (?comp, ?itemno, ?itemdesc, ?location, ?datesoh, ?qtysoh, ?costsoh) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModItem.GetSetlocation;
                if (oModItem.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModItem.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModItem.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModItem.GetSetcostsoh;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertItemStock: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateItemStock(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE item_stock ";
                query = query + " SET    itemdesc = ?itemdesc, qtysoh = ?qtysoh, costsoh = ?costsoh ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno AND location = ?location AND datesoh = ?datesoh ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModItem.GetSetlocation;
                if (oModItem.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModItem.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModItem.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModItem.GetSetcostsoh;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateItemStock: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteItemStock(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM item_stock ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno AND location = ?location AND datesoh = ?datesoh ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModItem.GetSetlocation;
                if (oModItem.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModItem.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteItemStock: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getItemStockTransactionsList(String comp, String itemno, String location, String datesoh)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.itemdesc, item_stock_transactions.location, ";
                query = query + "        date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock_transactions.qtysoh, item_stock_transactions.costsoh, ";
                query = query + "        date_format(item_stock_transactions.transdate,'%d-%m-%Y %H:%i:%s') str_transdate, item_stock_transactions.transtype, item_stock_transactions.transno, item_stock_transactions.trans_lineno, ";
                query = query + "        item_stock_transactions.orderno, item_stock_transactions.order_lineno, item_stock_transactions.transqty, item_stock_transactions.transprice ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " order by item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.location, item_stock_transactions.datesoh, item_stock_transactions.transdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modItem.GetSettranstype = replaceNull(dataReader, "transtype");
                    modItem.GetSettransno = replaceNull(dataReader, "transno");
                    modItem.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modItem.GetSetorderno = replaceNull(dataReader, "orderno");
                    modItem.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modItem.GetSettransqty = replaceZero(dataReader, "transqty");
                    modItem.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockTransactionsList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public ArrayList getItemStockTransactionsList(String comp, String itemno, String location, String datesoh, String openingdate, String closingdate, String transflow)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.itemdesc, item_stock_transactions.location, ";
                query = query + "        date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock_transactions.qtysoh, item_stock_transactions.costsoh, ";
                query = query + "        date_format(item_stock_transactions.transdate,'%d-%m-%Y %H:%i:%s') str_transdate, item_stock_transactions.transtype, item_stock_transactions.transno, item_stock_transactions.trans_lineno, ";
                query = query + "        item_stock_transactions.orderno, item_stock_transactions.order_lineno, item_stock_transactions.transqty, item_stock_transactions.transprice ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.transdate >= ?openingdate ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.transdate <= ?closingdate ";
                }
                if (transflow.Trim().Length > 0)
                {
                    if (transflow.Equals("BEGIN"))
                    {
                        query = query + " and  EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN"))
                    {
                        query = query + " and  item_stock_transactions.transqty > 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("OUT"))
                    {
                        query = query + " and  item_stock_transactions.transqty < 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN_OUT"))
                    {
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                }
                query = query + " order by item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.location, item_stock_transactions.datesoh, item_stock_transactions.transdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (openingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(openingdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (closingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modItem.GetSettranstype = replaceNull(dataReader, "transtype");
                    modItem.GetSettransno = replaceNull(dataReader, "transno");
                    modItem.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modItem.GetSetorderno = replaceNull(dataReader, "orderno");
                    modItem.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modItem.GetSettransqty = replaceZero(dataReader, "transqty");
                    if (modItem.GetSettransqty < 0)
                    {
                        modItem.GetSettransqty = modItem.GetSettransqty * -1;
                        modItem.GetSettransflow = "OUT";
                    }
                    else
                    {
                        modItem.GetSettransflow = "IN";
                    }
                    modItem.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockTransactionsList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public ArrayList getItemStockTransactionsList(String comp, String itemno, String location, String datesoh, String selyear, String selmonth, String selday, String transflow)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.itemdesc, item_stock_transactions.location, ";
                query = query + "        date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock_transactions.qtysoh, item_stock_transactions.costsoh, ";
                query = query + "        date_format(item_stock_transactions.transdate,'%d-%m-%Y %H:%i:%s') str_transdate, item_stock_transactions.transtype, item_stock_transactions.transno, item_stock_transactions.trans_lineno, ";
                query = query + "        item_stock_transactions.orderno, item_stock_transactions.order_lineno, item_stock_transactions.transqty, item_stock_transactions.transprice ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (selyear.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.transdate,'%Y') = '" + selyear + "'";
                }
                if (selmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.transdate,'%m') = '" + selmonth + "'";
                }
                if (selday.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.transdate,'%d') = '" + selday + "'";
                }
                if (transflow.Trim().Length > 0)
                {
                    if (transflow.Equals("BEGIN"))
                    {
                        query = query + " and  EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN"))
                    {
                        query = query + " and  item_stock_transactions.transqty > 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("OUT"))
                    {
                        query = query + " and  item_stock_transactions.transqty < 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN_OUT"))
                    {
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                }
                query = query + " order by item_stock_transactions.comp, item_stock_transactions.transdate, item_stock_transactions.transno, item_stock_transactions.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modItem.GetSettranstype = replaceNull(dataReader, "transtype");
                    modItem.GetSettransno = replaceNull(dataReader, "transno");
                    modItem.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modItem.GetSetorderno = replaceNull(dataReader, "orderno");
                    modItem.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modItem.GetSettransqty = replaceZero(dataReader, "transqty");
                    if (modItem.GetSettransqty < 0)
                    {
                        modItem.GetSettransflow = "OUT";
                    }
                    else
                    {
                        modItem.GetSettransflow = "IN";
                    }
                    modItem.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockTransactionsList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public List<MainModel> getItemStockTransactionsListing(String comp, String itemno, String location, String datesoh, String openingdate, String closingdate, String transflow)
    {
        List<MainModel> lsItemMod = new List<MainModel>();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.itemdesc, item_stock_transactions.location, ";
                query = query + "        date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock_transactions.qtysoh, item_stock_transactions.costsoh, ";
                query = query + "        date_format(item_stock_transactions.transdate,'%d-%m-%Y %H:%i:%s') str_transdate, item_stock_transactions.transtype, item_stock_transactions.transno, item_stock_transactions.trans_lineno, ";
                query = query + "        ifnull((select max(adjustmenttype) from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno),'') str_adjustmenttype, ";
                query = query + "        item_stock_transactions.orderno, item_stock_transactions.order_lineno, item_stock_transactions.transqty, item_stock_transactions.transprice ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.transdate >= ?openingdate ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.transdate <= ?closingdate ";
                }
                if (transflow.Trim().Length > 0)
                {
                    if (transflow.Equals("BEGIN"))
                    {
                        query = query + " and  EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN"))
                    {
                        query = query + " and  item_stock_transactions.transqty > 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("OUT"))
                    {
                        query = query + " and  item_stock_transactions.transqty < 0 ";
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                    else if (transflow.Equals("IN_OUT"))
                    {
                        query = query + " and  NOT EXISTS (select adjustment_header.adjustmentno from adjustment_header where adjustment_header.comp = item_stock_transactions.comp and adjustment_header.adjustmentno = item_stock_transactions.transno and adjustment_header.adjustmenttype = 'BEGINING_STOCK') ";
                    }
                }
                query = query + " order by item_stock_transactions.comp, item_stock_transactions.transdate, item_stock_transactions.transno, item_stock_transactions.trans_lineno, item_stock_transactions.orderno, item_stock_transactions.order_lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (openingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(openingdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (closingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modItem.GetSettranstype = replaceNull(dataReader, "transtype");
                    modItem.GetSettransno = replaceNull(dataReader, "transno");
                    modItem.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modItem.GetSetadjustmenttype = replaceNull(dataReader, "str_adjustmenttype");
                    modItem.GetSetorderno = replaceNull(dataReader, "orderno");
                    modItem.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modItem.GetSettransqty = replaceZero(dataReader, "transqty");
                    modItem.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockTransactionsListing: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public MainModel getItemStockTransactionsDetails(String comp, String itemno, String location, String datesoh, String transno, int trans_lineno)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.itemdesc, item_stock_transactions.location, ";
                query = query + "        date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, item_stock_transactions.qtysoh, item_stock_transactions.costsoh, ";
                query = query + "        date_format(item_stock_transactions.transdate,'%d-%m-%Y %H:%i:%s') str_transdate, item_stock_transactions.transtype, item_stock_transactions.transno, item_stock_transactions.trans_lineno, ";
                query = query + "        item_stock_transactions.orderno, item_stock_transactions.order_lineno, item_stock_transactions.transqty, item_stock_transactions.transprice ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(item_stock_transactions.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (transno.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.transno = '" + transno + "' ";
                }
                if (trans_lineno > 0)
                {
                    query = query + " and  item_stock_transactions.trans_lineno = " + trans_lineno + " ";
                }
                query = query + " order by item_stock_transactions.comp, item_stock_transactions.itemno, item_stock_transactions.location, item_stock_transactions.datesoh, item_stock_transactions.transdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modItem.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modItem.GetSettranstype = replaceNull(dataReader, "transtype");
                    modItem.GetSettransno = replaceNull(dataReader, "transno");
                    modItem.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modItem.GetSetorderno = replaceNull(dataReader, "orderno");
                    modItem.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modItem.GetSettransqty = replaceZero(dataReader, "transqty");
                    modItem.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getItemStockTransactionsDetails: " + e.Message.ToString());
        }
        return modItem;
    }

    public String insertItemStockTransactions(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO item_stock_transactions (comp, itemno, itemdesc, location, datesoh, transtype, transdate, transno, trans_lineno, orderno, order_lineno, transqty, transprice, qtysoh, costsoh) ";
                query = query + " VALUES (?comp, ?itemno, ?itemdesc, ?location, ?datesoh, ?transtype, ?transdate, ?transno, ?trans_lineno, ?orderno, ?order_lineno, ?transqty, ?transprice, ?qtysoh, ?costsoh) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModItem.GetSetlocation;
                if (oModItem.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModItem.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?transtype", MySqlDbType.VarChar).Value = oModItem.GetSettranstype;
                if (oModItem.GetSettransdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModItem.GetSettransdate);
                    cmd.Parameters.Add("?transdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?transdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?transno", MySqlDbType.VarChar).Value = oModItem.GetSettransno;
                cmd.Parameters.Add("?trans_lineno", MySqlDbType.Int16).Value = oModItem.GetSettrans_lineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModItem.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModItem.GetSetorder_lineno;
                cmd.Parameters.Add("?transqty", MySqlDbType.Int16).Value = oModItem.GetSettransqty;
                cmd.Parameters.Add("?transprice", MySqlDbType.Double).Value = oModItem.GetSettransprice;
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModItem.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModItem.GetSetcostsoh;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertItemStockTransactions: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    //get stock trans 
    public Double getReportStockTrans(String comp, String actualyear, String actualmonth, String type)
    {
        Double dStockTransAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(item_stock_transactions.transprice * item_stock_transactions.transqty) stocktrans ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(transdate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (type.Trim().Length > 0 && type.Equals("IN"))
                {
                    query = query + " and  item_stock_transactions.transqty > 0 ";
                }
                else if (type.Trim().Length > 0 && type.Equals("OUT"))
                {
                    query = query + " and  item_stock_transactions.transqty < 0 ";
                }
                //WriteToLogFile("MainController-getReportStockTrans [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dStockTransAmount = replaceDoubleZero(dataReader, "stocktrans");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportStockTrans: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dStockTransAmount;
    }

    //get stock trans 
    public int getReportStockTransQty(String comp, String actualyear, String actualmonth, String type)
    {
        int dStockTransQty = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(item_stock_transactions.transqty) stocktrans ";
                query = query + " from   item_stock_transactions ";
                query = query + " WHERE  item_stock_transactions.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  item_stock_transactions.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(transdate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                else if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(transdate,'%Y') = '" + actualyear + "' ";
                }
                if (type.Trim().Length > 0 && type.Equals("IN"))
                {
                    query = query + " and  item_stock_transactions.transqty > 0 ";
                }
                else if (type.Trim().Length > 0 && type.Equals("OUT"))
                {
                    query = query + " and  item_stock_transactions.transqty < 0 ";
                }
                //WriteToLogFile("MainController-getReportStockTrans [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dStockTransQty = replaceZero(dataReader, "stocktrans");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportStockTrans: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dStockTransQty;
    }

    public String storeBLOBFile(String comp, String itemno, String userid, String sFileNameAndPath, String sFileName, String imgwidth="0", String imgheight="0")
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        String sNewFileName = "";

        try
        {
            ArrayList lsFileName = tokenString(sFileName, "upload_" + userid + "_");
            if (lsFileName.Count > 1)
            {
                sNewFileName = lsFileName[1].ToString();
            }

            if (sFileNameAndPath.Length > 0 && sNewFileName.Length > 0)
            {
                FileStream fls = new FileStream(sFileNameAndPath, FileMode.Open, FileAccess.Read);
                byte[] blob = new byte[fls.Length];
                fls.Read(blob, 0, System.Convert.ToInt32(fls.Length));
                fls.Close();

                byte[] ImageData;
                FileStream fs = new FileStream(sFileNameAndPath, FileMode.Open, FileAccess.Read);
                BinaryReader br = new BinaryReader(fs);
                ImageData = br.ReadBytes((int)fs.Length);
                br.Close();
                fs.Close();

                if (dbConnect.OpenConnection() == true)
                {
                    query = "";
                    query = query + " INSERT INTO item_image (comp, itemno, filename, fileblob, imgwidth, imgheight, createdby, createddate) ";
                    query = query + " VALUES (?comp, ?itemno, ?filename, ?fileblob, ?imgwidth, ?imgheight, ?createdby, ?createddate) ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                    cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = itemno;
                    cmd.Parameters.Add("?filename", MySqlDbType.VarChar).Value = sNewFileName;
                    cmd.Parameters.Add("?fileblob", MySqlDbType.Blob).Value = ImageData;
                    cmd.Parameters.Add("?imgwidth", MySqlDbType.Int16).Value = imgwidth;
                    cmd.Parameters.Add("?imgheight", MySqlDbType.Int16).Value = imgheight;
                    cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = userid;
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    cmd.ExecuteNonQuery();
                }
                else
                {
                    result = "N";
                    WriteToLogFile("MainController-storeBLOBFile: Unable to store BLOB file due to unable to connect to database!");
                }
                dbConnect.CloseConnection();
            }
            else
            {
                result = "N";
                WriteToLogFile("MainController-storeBLOBFile: Unable to store BLOB file due to FileNameAndPath is empty!");
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-storeBLOBFile: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getBLOBFile(String comp, String itemno, String filefolder, String filename)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, itemno, filename, fileblob, imgwidth, imgheight, createdby, date_format(createddate,'%d-%m-%Y %H:%i:%s') str_createddate ";
                query = query + " from   item_image ";
                query = query + " WHERE  comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  itemno = '" + itemno + "' ";
                }
                if (filename.Trim().Length > 0)
                {
                    query = query + " and  upper(filename) like '%" + filename + "%' ";
                }
                query = query + " order by comp, itemno, createddate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetfilename = replaceNull(dataReader, "filename");
                    modItem.GetSetimgwidth = replaceZero(dataReader, "imgwidth");
                    modItem.GetSetimgheight = replaceZero(dataReader, "imgheight");
                    String sUrl = filefolder + modItem.GetSetfilename;
                    if (dataReader["fileblob"] != DBNull.Value)
                    {
                        File.WriteAllBytes(sUrl, (byte[])dataReader["fileblob"]);
                        /*
                        FileStream fs = new FileStream(sUrl, FileMode.Create);
                        //Use buffer to transfer data
                        byte[] b = new byte[myLob.Length];
                        //Read data from database
                        myLob.Read(b, 0, (int)myLob.Length);
                        //Write data to file
                        fs.Write(b, 0, (int)myLob.Length);
                        fs.Close();
                        */
                    }
                    modItem.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modItem.GetSetcreateddate = replaceNull(dataReader, "str_createddate");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBLOBFile: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsItemMod;
    }

    public String deleteBLOBFile(String comp, String itemno, String userid, String sFileName)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
                if (dbConnect.OpenConnection() == true)
                {
                    query = "";
                    query = query + " DELETE FROM item_image ";
                    query = query + " WHERE comp = ?comp and itemno = ?itemno and filename = ?filename ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                    cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = itemno;
                    cmd.Parameters.Add("?filename", MySqlDbType.VarChar).Value = sFileName;
                    cmd.ExecuteNonQuery();
                }
                dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteBLOBFile: " + e.Message.ToString());
        }
        return result;
    }

    /*** END FOR ITEM ***/

    /*** BEGIN FOR BP ***/

    public ArrayList getBPList(String comp, String bpid, String bpdesc, String bpcat)
    {
        ArrayList lsBPMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT businesspartner.comp, businesspartner.bpid, businesspartner.bpdesc, businesspartner.bpaddress, businesspartner.bpcontact, businesspartner.bpreference, ";
                query = query + "        businesspartner.bpcat, businesspartner.discounttype, businesspartner.bankguarantee, businesspartner.cashguarantee, businesspartner.creditlimit, businesspartner.bpstatus ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  businesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpid = '" + bpid + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(businesspartner.bpdesc) like '%" + bpdesc + "%' ";
                }
                if (bpcat.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpcat = '" + bpcat + "' ";
                }
                query = query + " order by businesspartner.comp, businesspartner.bpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modBP = new MainModel();
                    modBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modBP.GetSetbpid = replaceNull(dataReader, "bpid");
                    modBP.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modBP.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modBP.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modBP.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    modBP.GetSetbpcat = replaceNull(dataReader, "bpcat");
                    modBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    modBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    modBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    modBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    modBP.GetSetbpstatus = replaceNull(dataReader, "bpstatus");
                    lsBPMod.Add(modBP);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBPList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsBPMod;
    }

    public ArrayList getBPListIncludeSub(String comp)
    {
        ArrayList lsBPMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "SELECT comp, bpid, bpdesc, bpaddress, bpcontact, bpreference ";
                query = query + " FROM ( ";
                query = query + " SELECT businesspartner.comp comp, businesspartner.bpid bpid, businesspartner.bpdesc bpdesc, businesspartner.bpaddress bpaddress, businesspartner.bpcontact bpcontact, businesspartner.bpreference bpreference ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  businesspartner.comp is not NULL ";
                query = query + " and  businesspartner.comp = '" + comp + "' ";
                query = query + " UNION ";
                query = query + " SELECT comp_details.comp comp, comp_details.comp bpid, comp_details.comp_name bpdesc, comp_details.comp_address bpaddress, comp_details.comp_contact bpcontact, comp_details.comp_contactno bpreference ";
                query = query + " from   comp_details ";
                query = query + " WHERE  comp_details.createdby IN (select createdby from comp_details where comp='" + comp + "') and comp_details.comp <> '" + comp + "' ";
                query = query + " ) as listing ";
                query = query + " order by comp, bpid ";
                //WriteToLogFile("MainController-getBPListIncludeSub [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modBP = new MainModel();
                    modBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modBP.GetSetbpid = replaceNull(dataReader, "bpid");
                    modBP.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modBP.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modBP.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modBP.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    lsBPMod.Add(modBP);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBPListIncludeSub: " + e.Message.ToString());
        }
        return lsBPMod;
    }

    public ArrayList getBPList(String comp, String bpid, String bpdesc, String bpcat, String solidbp)
    {
        ArrayList lsBPMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT businesspartner.comp, businesspartner.bpid, businesspartner.bpdesc, businesspartner.bpaddress, businesspartner.bpcontact, businesspartner.bpreference, ";
                query = query + "        businesspartner.bpcat, businesspartner.discounttype, businesspartner.bankguarantee, businesspartner.cashguarantee, businesspartner.creditlimit, businesspartner.bpstatus ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  businesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpid = '" + bpid + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(businesspartner.bpdesc) like '%" + bpdesc + "%' ";
                }
                if (bpcat.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpcat = '" + bpcat + "' ";
                }
                if (solidbp.Trim().Length > 0)
                {
                    query = query + " and  (businesspartner.bpcat <> 'SYSTEM' or businesspartner.bpcat <> 'INTERNAL') ";
                }
                query = query + " order by businesspartner.comp, businesspartner.bpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                int rowno = 0;
                while (dataReader.Read())
                {
                    MainModel modBP = new MainModel();
                    rowno = rowno + 1;
                    modBP.GetSetrowno = rowno;
                    modBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modBP.GetSetbpid = replaceNull(dataReader, "bpid");
                    modBP.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modBP.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modBP.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modBP.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    modBP.GetSetbpcat = replaceNull(dataReader, "bpcat");
                    modBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    modBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    modBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    modBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    modBP.GetSetbpstatus = replaceNull(dataReader, "bpstatus");
                    lsBPMod.Add(modBP);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBPList: " + e.Message.ToString());
        }
        return lsBPMod;
    }

    public MainModel getBPDetails(String comp, String bpid)
    {
        MainModel modBP = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT businesspartner.comp, businesspartner.bpid, businesspartner.bpdesc, businesspartner.bpaddress, businesspartner.bpcontact, businesspartner.bpreference, ";
                query = query + "        businesspartner.bpcat, businesspartner.discounttype, businesspartner.bankguarantee, businesspartner.cashguarantee, businesspartner.creditlimit, businesspartner.bpstatus ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  businesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpid = '" + bpid + "' ";
                }
                query = query + " order by businesspartner.comp, businesspartner.bpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modBP.GetSetbpid = replaceNull(dataReader, "bpid");
                    modBP.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modBP.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modBP.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modBP.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    modBP.GetSetbpcat = replaceNull(dataReader, "bpcat");
                    modBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    modBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    modBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    modBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    modBP.GetSetbpstatus = replaceNull(dataReader, "bpstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBPDetails: " + e.Message.ToString());
        }
        return modBP;
    }

    public MainModel getBPDetails(String comp, String bpid, String bpdesc)
    {
        MainModel modBP = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT businesspartner.comp, businesspartner.bpid, businesspartner.bpdesc, businesspartner.bpaddress, businesspartner.bpcontact, businesspartner.bpreference, ";
                query = query + "        businesspartner.bpcat, businesspartner.discounttype, businesspartner.bankguarantee, businesspartner.cashguarantee, businesspartner.creditlimit, businesspartner.bpstatus ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  businesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpid = '" + bpid + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  businesspartner.bpdesc = '" + bpdesc + "' ";
                }
                query = query + " order by businesspartner.comp, businesspartner.bpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modBP.GetSetbpid = replaceNull(dataReader, "bpid");
                    modBP.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modBP.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modBP.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modBP.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    modBP.GetSetbpcat = replaceNull(dataReader, "bpcat");
                    modBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    modBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    modBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    modBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    modBP.GetSetbpstatus = replaceNull(dataReader, "bpstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBPDetails: " + e.Message.ToString());
        }
        return modBP;
    }

    public String insertBusinessPartner(MainModel oModBP)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO businesspartner (comp, bpid, bpdesc, bpaddress, bpcontact, bpreference, bpcat, discounttype, cashguarantee, bankguarantee, creditlimit, bpstatus) ";
                query = query + " VALUES (?comp, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?bpreference, ?bpcat, ?discounttype, ?cashguarantee, ?bankguarantee, ?creditlimit, ?bpstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModBP.GetSetcomp;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModBP.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModBP.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModBP.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModBP.GetSetbpcontact;
                cmd.Parameters.Add("?bpreference", MySqlDbType.VarChar).Value = oModBP.GetSetbpreference;
                cmd.Parameters.Add("?bpcat", MySqlDbType.VarChar).Value = oModBP.GetSetbpcat;
                cmd.Parameters.Add("?discounttype", MySqlDbType.VarChar).Value = oModBP.GetSetdiscounttype;
                cmd.Parameters.Add("?cashguarantee", MySqlDbType.Double).Value = oModBP.GetSetcashguarantee;
                cmd.Parameters.Add("?bankguarantee", MySqlDbType.Double).Value = oModBP.GetSetbankguarantee;
                cmd.Parameters.Add("?creditlimit", MySqlDbType.Double).Value = oModBP.GetSetcreditlimit;
                cmd.Parameters.Add("?bpstatus", MySqlDbType.VarChar).Value = oModBP.GetSetbpstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertBusinessPartner: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateBusinessPartner(MainModel oModBP)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE businesspartner ";
                query = query + " SET    bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, bpreference = ?bpreference, bpcat = ?bpcat, discounttype = ?discounttype, cashguarantee = ?cashguarantee, bankguarantee = ?bankguarantee, creditlimit = ?creditlimit, bpstatus = ?bpstatus ";
                query = query + " WHERE  comp = ?comp AND bpid = ?bpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModBP.GetSetcomp;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModBP.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModBP.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModBP.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModBP.GetSetbpcontact;
                cmd.Parameters.Add("?bpreference", MySqlDbType.VarChar).Value = oModBP.GetSetbpreference;
                cmd.Parameters.Add("?bpcat", MySqlDbType.VarChar).Value = oModBP.GetSetbpcat;
                cmd.Parameters.Add("?discounttype", MySqlDbType.VarChar).Value = oModBP.GetSetdiscounttype;
                cmd.Parameters.Add("?cashguarantee", MySqlDbType.Double).Value = oModBP.GetSetcashguarantee;
                cmd.Parameters.Add("?bankguarantee", MySqlDbType.Double).Value = oModBP.GetSetbankguarantee;
                cmd.Parameters.Add("?creditlimit", MySqlDbType.Double).Value = oModBP.GetSetcreditlimit;
                cmd.Parameters.Add("?bpstatus", MySqlDbType.VarChar).Value = oModBP.GetSetbpstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateBusinessPartner: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR BP ***/

    #region FOR ASSET
    /*** BEGIN FOR ASSET ***/

    public ArrayList getAssetList(String comp, String assetno, String assetdesc, String assetcat, String assettype, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.assetno, a.assetdesc, a.assettyp, a.assetcat, a.assetowner, a.assetrefno, ";
                query = query + "        date_format(a.datemfg,'%d-%m-%Y') str_datemfg, a.warranty, date_format(a.datewarend,'%d-%m-%Y') str_datewarend, ";
                query = query + "        date_format(a.datereg,'%d-%m-%Y') str_datereg, ";
                query = query + "        (select sum(y.tranqty) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) qtyreg, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) costreg, ";
                query = query + "        a.deprtyp, a.deprrate, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'DEPCOST' and y.assetno = a.assetno) depraccum, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  a.assetno like '%" + assetno + "%' ";
                }
                if (assetdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(a.assetdesc) like '%" + assetdesc + "%' ";
                }
                if (assetcat.Trim().Length > 0)
                {
                    query = query + " and  a.assetcat = '" + assetcat + "' ";
                }
                if (assettype.Trim().Length > 0)
                {
                    query = query + " and  a.assettype = '" + assettype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.assetdesc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSetassettyp = replaceNull(dataReader, "assettyp");
                    modAsset.GetSetassetcat = replaceNull(dataReader, "assetcat");
                    modAsset.GetSetassetowner = replaceNull(dataReader, "assetowner");
                    modAsset.GetSetassetrefno = replaceNull(dataReader, "assetrefno");
                    modAsset.GetSetdatemfg = replaceNull(dataReader, "str_datemfg");
                    modAsset.GetSetwarranty = replaceNull(dataReader, "warranty");
                    modAsset.GetSetdatewarend = replaceNull(dataReader, "str_datewarend");
                    modAsset.GetSetdatereg = replaceNull(dataReader, "str_datereg");
                    modAsset.GetSetcostreg = replaceDoubleZero(dataReader, "costreg");
                    modAsset.GetSetdeprtyp = replaceNull(dataReader, "deprtyp");
                    modAsset.GetSetdeprrate = replaceDoubleZero(dataReader, "deprrate");
                    modAsset.GetSetdepraccum = replaceDoubleZero(dataReader, "depraccum");
                    //modAsset.GetSetassetnbv = replaceDoubleZero(dataReader, "assetnbv");
                    modAsset.GetSetassetnbv = modAsset.GetSetcostreg - modAsset.GetSetdepraccum;
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetList(String comp, String assetno, String assetdesc, String assetcat, String assettype, String status, String currpage)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.assetno, a.assetdesc, a.assettyp, a.assetcat, a.assetowner, a.assetrefno, ";
                query = query + "        date_format(a.datemfg,'%d-%m-%Y') str_datemfg, a.warranty, date_format(a.datewarend,'%d-%m-%Y') str_datewarend, ";
                query = query + "        date_format(a.datereg,'%d-%m-%Y') str_datereg, ";
                query = query + "        (select sum(y.tranqty) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) qtyreg, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) costreg, ";
                query = query + "        a.deprtyp, a.deprrate, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'DEPCOST' and y.assetno = a.assetno) depraccum, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  a.assetno like '%" + assetno + "%' ";
                }
                if (assetdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(a.assetdesc) like '%" + assetdesc + "%' ";
                }
                if (assetcat.Trim().Length > 0)
                {
                    query = query + " and  a.assetcat = '" + assetcat + "' ";
                }
                if (assettype.Trim().Length > 0)
                {
                    query = query + " and  a.assettype = '" + assettype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.assetdesc ";
                if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSetassettyp = replaceNull(dataReader, "assettyp");
                    modAsset.GetSetassetcat = replaceNull(dataReader, "assetcat");
                    modAsset.GetSetassetowner = replaceNull(dataReader, "assetowner");
                    modAsset.GetSetassetrefno = replaceNull(dataReader, "assetrefno");
                    modAsset.GetSetdatemfg = replaceNull(dataReader, "str_datemfg");
                    modAsset.GetSetwarranty = replaceNull(dataReader, "warranty");
                    modAsset.GetSetdatewarend = replaceNull(dataReader, "str_datewarend");
                    modAsset.GetSetdatereg = replaceNull(dataReader, "str_datereg");
                    modAsset.GetSetqtyreg = replaceZero(dataReader, "qtyreg");
                    modAsset.GetSetcostreg = replaceDoubleZero(dataReader, "costreg");
                    modAsset.GetSetdeprtyp = replaceNull(dataReader, "deprtyp");
                    modAsset.GetSetdeprrate = replaceDoubleZero(dataReader, "deprrate");
                    modAsset.GetSetdepraccum = replaceDoubleZero(dataReader, "depraccum");
                    //modAsset.GetSetassetnbv = replaceDoubleZero(dataReader, "assetnbv");
                    modAsset.GetSetassetnbv = modAsset.GetSetcostreg - modAsset.GetSetdepraccum;
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetListPlacement(String comp, String assetno, String assetdesc, String assetcat, String assettype, String trandate, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.id, a.comp, a.assetno, a.assetdesc, a.assettyp, a.assetcat, a.assetowner, a.assetrefno, ";
                query = query + "        b.country, (select paramdesc from parameters where comp = '000' and paramtype = 'COUNTRY' and paramstatus = 'ACTIVE' and paramid = b.country) str_country, ";
                query = query + "        b.state, (select paramdesc from parameters where comp = '000' and paramtype = 'STATE' and paramstatus = 'ACTIVE' and paramid = b.state) str_state, ";
                query = query + "        b.district, (select paramdesc from parameters where comp = '000' and paramtype = 'DISTRICT' and paramstatus = 'ACTIVE' and paramid = b.district) str_district, ";
                query = query + "        b.location, date_format(b.trandate,'%d-%m-%Y') str_trandate, b.tranqty, ";
                query = query + "        b.purpose, b.officerid, b.officername, b.contactno, ";
                query = query + "        b.remarks, b.status, b.createdby, b.createddate, b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate ";
                query = query + " from   asset a left join asset_placement b on a.comp = b.comp and a.assetno = b.assetno ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  a.assetno like '%" + assetno + "%' ";
                }
                if (assetdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(a.assetdesc) like '%" + assetdesc + "%' ";
                }
                if (assetcat.Trim().Length > 0)
                {
                    query = query + " and  a.assetcat = '" + assetcat + "' ";
                }
                if (assettype.Trim().Length > 0)
                {
                    query = query + " and  a.assettype = '" + assettype + "' ";
                }
                if (trandate.Trim().Length > 0)
                {
                    query = query + " and  b.trandate = ?trandate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.status = '" + status + "' ";
                }
                query = query + " order by a.comp, b.trandate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (trandate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(trandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSetassettyp = replaceNull(dataReader, "assettyp");
                    modAsset.GetSetassetcat = replaceNull(dataReader, "assetcat");
                    modAsset.GetSetassetowner = replaceNull(dataReader, "assetowner");
                    modAsset.GetSetassetrefno = replaceNull(dataReader, "assetrefno");

                    modAsset.GetSetcountry = replaceNull(dataReader, "country");
                    modAsset.GetSetcountry_desc = replaceNull(dataReader, "str_country");
                    modAsset.GetSetstate = replaceNull(dataReader, "state");
                    modAsset.GetSetstate_desc = replaceNull(dataReader, "str_state");
                    modAsset.GetSetdistrict = replaceNull(dataReader, "district");
                    modAsset.GetSetdistrict_desc = replaceNull(dataReader, "str_district");
                    modAsset.GetSetlocation = replaceNull(dataReader, "location");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");

                    modAsset.GetSetpurpose = replaceNull(dataReader, "purpose");
                    modAsset.GetSetofficerid = replaceNull(dataReader, "officerid");
                    modAsset.GetSetofficername = replaceNull(dataReader, "officername");
                    modAsset.GetSetcontactno = replaceNull(dataReader, "contactno");

                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetListPlacement: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetListPlacement(String comp, String assetno, String assetdesc, String assetcat, String assettype, String trandate, String status, String currpage)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.id, a.comp, a.assetno, a.assetdesc, a.assettyp, a.assetcat, a.assetowner, a.assetrefno, ";
                query = query + "        b.country, (select paramdesc from parameters where comp = '000' and paramtype = 'COUNTRY' and paramstatus = 'ACTIVE' and paramid = b.country) str_country, ";
                query = query + "        b.state, (select paramdesc from parameters where comp = '000' and paramtype = 'STATE' and paramstatus = 'ACTIVE' and paramid = b.state) str_state, ";
                query = query + "        b.district, (select paramdesc from parameters where comp = '000' and paramtype = 'DISTRICT' and paramstatus = 'ACTIVE' and paramid = b.district) str_district, ";
                query = query + "        b.location, date_format(b.trandate,'%d-%m-%Y') str_trandate, b.tranqty, ";
                query = query + "        b.purpose, b.officerid, b.officername, b.contactno, ";
                query = query + "        b.remarks, b.status, b.createdby, b.createddate, b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate ";
                query = query + " from   asset a left join asset_placement b on a.comp = b.comp and a.assetno = b.assetno ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  a.assetno like '%" + assetno + "%' ";
                }
                if (assetdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(a.assetdesc) like '%" + assetdesc + "%' ";
                }
                if (assetcat.Trim().Length > 0)
                {
                    query = query + " and  a.assetcat = '" + assetcat + "' ";
                }
                if (assettype.Trim().Length > 0)
                {
                    query = query + " and  a.assettype = '" + assettype + "' ";
                }
                if (trandate.Trim().Length > 0)
                {
                    query = query + " and  b.trandate = ?trandate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, b.trandate ";
                if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (trandate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(trandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSetassettyp = replaceNull(dataReader, "assettyp");
                    modAsset.GetSetassetcat = replaceNull(dataReader, "assetcat");
                    modAsset.GetSetassetowner = replaceNull(dataReader, "assetowner");
                    modAsset.GetSetassetrefno = replaceNull(dataReader, "assetrefno");

                    modAsset.GetSetcountry = replaceNull(dataReader, "country");
                    modAsset.GetSetcountry_desc = replaceNull(dataReader, "str_country");
                    modAsset.GetSetstate = replaceNull(dataReader, "state");
                    modAsset.GetSetstate_desc = replaceNull(dataReader, "str_state");
                    modAsset.GetSetdistrict = replaceNull(dataReader, "district");
                    modAsset.GetSetdistrict_desc = replaceNull(dataReader, "str_district");
                    modAsset.GetSetlocation = replaceNull(dataReader, "location");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");

                    modAsset.GetSetpurpose = replaceNull(dataReader, "purpose");
                    modAsset.GetSetofficerid = replaceNull(dataReader, "officerid");
                    modAsset.GetSetofficername = replaceNull(dataReader, "officername");
                    modAsset.GetSetcontactno = replaceNull(dataReader, "contactno");

                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetListPlacement: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getListPlacement(String comp, String assetno, String trandate, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.id, b.comp, b.assetno, ";
                query = query + "        b.country, (select paramdesc from parameters where comp = '000' and paramtype = 'COUNTRY' and paramstatus = 'ACTIVE' and paramid = b.country) str_country, ";
                query = query + "        b.state, (select paramdesc from parameters where comp = '000' and paramtype = 'STATE' and paramstatus = 'ACTIVE' and paramid = b.state) str_state, ";
                query = query + "        b.district, (select paramdesc from parameters where comp = '000' and paramtype = 'DISTRICT' and paramstatus = 'ACTIVE' and paramid = b.district) str_district, ";
                query = query + "        b.location, date_format(b.trandate,'%d-%m-%Y') str_trandate, b.tranqty, ";
                query = query + "        b.purpose, b.officerid, b.officername, b.contactno, ";
                query = query + "        b.remarks, b.status, b.createdby, b.createddate, b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate ";
                query = query + " from   asset_placement b ";
                query = query + " WHERE  b.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  b.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (trandate.Trim().Length > 0)
                {
                    query = query + " and  b.trandate = ?trandate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.status = '" + status + "' ";
                }
                query = query + " order by b.comp, b.trandate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (trandate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(trandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");

                    modAsset.GetSetcountry = replaceNull(dataReader, "country");
                    modAsset.GetSetcountry_desc = replaceNull(dataReader, "str_country");
                    modAsset.GetSetstate = replaceNull(dataReader, "state");
                    modAsset.GetSetstate_desc = replaceNull(dataReader, "str_state");
                    modAsset.GetSetdistrict = replaceNull(dataReader, "district");
                    modAsset.GetSetdistrict_desc = replaceNull(dataReader, "str_district");
                    modAsset.GetSetlocation = replaceNull(dataReader, "location");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");

                    modAsset.GetSetpurpose = replaceNull(dataReader, "purpose");
                    modAsset.GetSetofficerid = replaceNull(dataReader, "officerid");
                    modAsset.GetSetofficername = replaceNull(dataReader, "officername");
                    modAsset.GetSetcontactno = replaceNull(dataReader, "contactno");

                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getListPlacement: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public MainModel getPlacementDetails(Int64 id, String comp, String assetno, String trandate, String status)
    {
        MainModel modAsset = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.id, b.comp, b.assetno, b.country, b.state, b.district, b.location, date_format(b.trandate,'%d-%m-%Y') str_trandate, b.tranqty, ";
                query = query + "        b.purpose, b.officerid, b.officername, b.contactno, ";
                query = query + "        b.remarks, b.status, b.createdby, b.createddate, b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate ";
                query = query + " from   asset_placement b ";
                query = query + " WHERE  b.comp is not NULL ";
                if (id > 0)
                {
                    query = query + " and  b.id = " + id + " ";
                }
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  b.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (trandate.Trim().Length > 0)
                {
                    query = query + " and  b.trandate = ?trandate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.status = '" + status + "' ";
                }
                query = query + " order by b.comp, b.trandate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (trandate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(trandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");

                    modAsset.GetSetcountry = replaceNull(dataReader, "country");
                    modAsset.GetSetstate = replaceNull(dataReader, "state");
                    modAsset.GetSetdistrict = replaceNull(dataReader, "district");
                    modAsset.GetSetlocation = replaceNull(dataReader, "location");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");

                    modAsset.GetSetpurpose = replaceNull(dataReader, "purpose");
                    modAsset.GetSetofficerid = replaceNull(dataReader, "officerid");
                    modAsset.GetSetofficername = replaceNull(dataReader, "officername");
                    modAsset.GetSetcontactno = replaceNull(dataReader, "contactno");

                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPlacementDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modAsset;
    }

    public String insertPlacementDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO asset_placement (comp, assetno, country, state, district, location, trandate, tranqty, purpose, officerid, officername, contactno, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?assetno, ?country, ?state, ?district, ?location, ?trandate, ?tranqty, ?purpose, ?officerid, ?officername, ?contactno, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?country", MySqlDbType.VarChar).Value = oModAsset.GetSetcountry;
                cmd.Parameters.Add("?state", MySqlDbType.VarChar).Value = oModAsset.GetSetstate;
                cmd.Parameters.Add("?district", MySqlDbType.VarChar).Value = oModAsset.GetSetdistrict;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModAsset.GetSetlocation;
                if (oModAsset.GetSettrandate.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSettrandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?tranqty", MySqlDbType.Int16).Value = oModAsset.GetSettranqty;
                cmd.Parameters.Add("?purpose", MySqlDbType.VarChar).Value = oModAsset.GetSetpurpose;
                cmd.Parameters.Add("?officerid", MySqlDbType.VarChar).Value = oModAsset.GetSetofficerid;
                cmd.Parameters.Add("?officername", MySqlDbType.VarChar).Value = oModAsset.GetSetofficername;
                cmd.Parameters.Add("?contactno", MySqlDbType.VarChar).Value = oModAsset.GetSetcontactno;

                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPlacementDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePlacementDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE asset_placement ";
                query = query + " SET country = ?country, state = ?state, district = ?district, location = ?location, trandate = ?trandate, tranqty = ?tranqty, purpose = ?purpose, officerid = ?officerid, officername = ?officername, contactno = ?contactno, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE id = ?id and comp = ?comp and assetno = ?assetno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?id", MySqlDbType.Int64).Value = oModAsset.GetSetlineno;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?country", MySqlDbType.VarChar).Value = oModAsset.GetSetcountry;
                cmd.Parameters.Add("?state", MySqlDbType.VarChar).Value = oModAsset.GetSetstate;
                cmd.Parameters.Add("?district", MySqlDbType.VarChar).Value = oModAsset.GetSetdistrict;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModAsset.GetSetlocation;
                if (oModAsset.GetSettrandate.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSettrandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?tranqty", MySqlDbType.Int16).Value = oModAsset.GetSettranqty;
                cmd.Parameters.Add("?purpose", MySqlDbType.VarChar).Value = oModAsset.GetSetpurpose;
                cmd.Parameters.Add("?officerid", MySqlDbType.VarChar).Value = oModAsset.GetSetofficerid;
                cmd.Parameters.Add("?officername", MySqlDbType.VarChar).Value = oModAsset.GetSetofficername;
                cmd.Parameters.Add("?contactno", MySqlDbType.VarChar).Value = oModAsset.GetSetcontactno;

                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePlacementDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deletePlacementDetails(Int64 lineno)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM asset_placement ";
                query = query + " WHERE id = ?id ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?id", MySqlDbType.Int64).Value = lineno;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deletePlacementDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public MainModel getAssetDetails(String comp, String assetno)
    {
        MainModel modAsset = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.assetno, a.assetdesc, a.assettyp, a.assetcat, a.assetowner, a.assetrefno, ";
                query = query + "        date_format(a.datemfg,'%d-%m-%Y') str_datemfg, a.warranty, date_format(a.datewarend,'%d-%m-%Y') str_datewarend, ";
                query = query + "        date_format(a.datereg,'%d-%m-%Y') str_datereg, ";
                query = query + "        (select sum(y.tranqty) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) qtyreg, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = a.assetno) costreg, ";
                query = query + "        a.deprtyp, a.deprrate, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = a.comp and x.tranno = y.tranno and x.status in ('NEW','CONFIRMED') and x.trancode = y.trancode and y.trancode = 'DEPCOST' and y.assetno = a.assetno) depraccum, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  a.assetno = '" + assetno + "' ";
                }
                query = query + " order by a.comp, a.assetdesc ";
                WriteToLogFile("MainController-getAssetDetails: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSetassettyp = replaceNull(dataReader, "assettyp");
                    modAsset.GetSetassetcat = replaceNull(dataReader, "assetcat");
                    modAsset.GetSetassetowner = replaceNull(dataReader, "assetowner");
                    modAsset.GetSetassetrefno = replaceNull(dataReader, "assetrefno");
                    modAsset.GetSetdatemfg = replaceNull(dataReader, "str_datemfg");
                    modAsset.GetSetwarranty = replaceNull(dataReader, "warranty");
                    modAsset.GetSetdatewarend = replaceNull(dataReader, "str_datewarend");
                    modAsset.GetSetdatereg = replaceNull(dataReader, "str_datereg");
                    modAsset.GetSetqtyreg = replaceZero(dataReader, "qtyreg");
                    modAsset.GetSetcostreg = replaceDoubleZero(dataReader, "costreg");
                    modAsset.GetSetdeprtyp = replaceNull(dataReader, "deprtyp");
                    modAsset.GetSetdeprrate = replaceDoubleZero(dataReader, "deprrate");
                    modAsset.GetSetdepraccum = replaceDoubleZero(dataReader, "depraccum");
                    modAsset.GetSetassetnbv = modAsset.GetSetcostreg - modAsset.GetSetdepraccum;
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modAsset;
    }

    public String insertAssetDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO asset (comp, assetno, assetdesc, assetcat, assettyp, assetowner, assetrefno, datemfg, warranty, datewarend, datereg, deprtyp, deprrate, remarks, status, createdby, createddate, modifiedby, modifieddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?assetno, ?assetdesc, ?assetcat, ?assettyp, ?assetowner, ?assetrefno, ?datemfg, ?warranty, ?datewarend, ?datereg, ?deprtyp, ?deprrate, ?remarks, ?status, ?createdby, ?createddate, ?modifiedby, ?modifieddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?assetdesc", MySqlDbType.VarChar).Value = oModAsset.GetSetassetdesc;
                cmd.Parameters.Add("?assetcat", MySqlDbType.VarChar).Value = oModAsset.GetSetassetcat;
                cmd.Parameters.Add("?assettyp", MySqlDbType.VarChar).Value = oModAsset.GetSetassettyp;

                cmd.Parameters.Add("?assetowner", MySqlDbType.VarChar).Value = oModAsset.GetSetassetowner;
                cmd.Parameters.Add("?assetrefno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetrefno;
                if (oModAsset.GetSetdatemfg.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatemfg, ukDtfi);
                    cmd.Parameters.Add("?datemfg", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datemfg", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?warranty", MySqlDbType.VarChar).Value = oModAsset.GetSetwarranty;
                if (oModAsset.GetSetdatewarend.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatewarend, ukDtfi);
                    cmd.Parameters.Add("?datewarend", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datewarend", MySqlDbType.DateTime).Value = null;
                }

                if (oModAsset.GetSetdatereg.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatereg, ukDtfi);
                    cmd.Parameters.Add("?datereg", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datereg", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?deprtyp", MySqlDbType.VarChar).Value = oModAsset.GetSetdeprtyp;
                cmd.Parameters.Add("?deprrate", MySqlDbType.Double).Value = oModAsset.GetSetdeprrate;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;

                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModAsset.GetSetmodifiedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertAssetDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateAssetDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE asset ";
                query = query + " SET    assetdesc = ?assetdesc, assetcat = ?assetcat, assettyp = ?assettyp, assetowner = ?assetowner, assetrefno = ?assetrefno, ";
                query = query + "        datemfg = ?datemfg, warranty = ?warranty, datewarend = ?datewarend, datereg = ?datereg, ";
                query = query + "        deprtyp = ?deprtyp, deprrate = ?deprrate, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, ";
                query = query + "        modifiedby = ?modifiedby, modifieddate = ?modifieddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND assetno = ?assetno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?assetdesc", MySqlDbType.VarChar).Value = oModAsset.GetSetassetdesc;
                cmd.Parameters.Add("?assetcat", MySqlDbType.VarChar).Value = oModAsset.GetSetassetcat;
                cmd.Parameters.Add("?assettyp", MySqlDbType.VarChar).Value = oModAsset.GetSetassettyp;

                cmd.Parameters.Add("?assetowner", MySqlDbType.VarChar).Value = oModAsset.GetSetassetowner;
                cmd.Parameters.Add("?assetrefno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetrefno;
                if (oModAsset.GetSetdatemfg.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatemfg, ukDtfi);
                    cmd.Parameters.Add("?datemfg", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datemfg", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?warranty", MySqlDbType.VarChar).Value = oModAsset.GetSetwarranty;
                if (oModAsset.GetSetdatewarend.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatewarend, ukDtfi);
                    cmd.Parameters.Add("?datewarend", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datewarend", MySqlDbType.DateTime).Value = null;
                }

                if (oModAsset.GetSetdatereg.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSetdatereg, ukDtfi);
                    cmd.Parameters.Add("?datereg", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datereg", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?deprtyp", MySqlDbType.VarChar).Value = oModAsset.GetSetdeprtyp;
                cmd.Parameters.Add("?deprrate", MySqlDbType.Double).Value = oModAsset.GetSetdeprrate;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;

                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModAsset.GetSetmodifiedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateAssetDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getAssetTranHeaderList(String comp, String tranno, String trancode, String trancat, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetTranHeaderList(String comp, String tranno, String trancode, String trancat, String status, String currpage)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a  ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate ";
                if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public MainModel getAssetTranHeaderDetails(String comp, String tranno, String trancode, String trancat, String status)
    {
        MainModel modAsset = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modAsset;
    }

    public ArrayList getAssetTranListBefore(String comp, String tranno, String trancode, String trancat, String assetno, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        b.id, b.assetno, c.assetdesc, b.tranvalue, b.tranqty, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = b.comp and x.tranno = y.tranno and x.status = 'CONFIRMED' and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = b.assetno) costreg, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = b.comp and x.tranno = y.tranno and x.status = 'CONFIRMED' and x.trancode = y.trancode and y.trancode = 'DEPCOST' and y.assetno = b.assetno and x.trandate < a.trandate) depraccum, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a left join asset_tran_details b on a.comp = b.comp and a.tranno = b.tranno and a.trancode = b.trancode ";
                query = query + " left join asset c on b.comp = c.comp and  b.assetno = c.assetno ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate, b.assetno ";
                //WriteToLogFile("MainController-getAssetTranList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");
                    modAsset.GetSetcostreg = replaceDoubleZero(dataReader, "costreg");
                    modAsset.GetSetdepraccum = replaceDoubleZero(dataReader, "depraccum");
                    modAsset.GetSetassetnbv = modAsset.GetSetcostreg - modAsset.GetSetdepraccum;
                    modAsset.GetSettranvalue = replaceDoubleZero(dataReader, "tranvalue");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetTranList(String comp, String tranno, String trancode, String trancat, String assetno, String status)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        b.id, b.assetno, c.assetdesc, b.tranvalue, b.tranqty, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = b.comp and x.tranno = y.tranno and x.status = 'CONFIRMED' and x.trancode = y.trancode and y.trancode = 'REGCOST' and y.assetno = b.assetno) costreg, ";
                query = query + "        (select sum(y.tranvalue) from asset_tran_header x, asset_tran_details y where x.comp = y.comp and y.comp = b.comp and x.tranno = y.tranno and x.status = 'CONFIRMED' and x.trancode = y.trancode and y.trancode = 'DEPCOST' and y.assetno = b.assetno) depraccum, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a left join asset_tran_details b on a.comp = b.comp and a.tranno = b.tranno and a.trancode = b.trancode ";
                query = query + " left join asset c on b.comp = c.comp and  b.assetno = c.assetno ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate, b.assetno ";
                //WriteToLogFile("MainController-getAssetTranList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSetassetdesc = replaceNull(dataReader, "assetdesc");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");
                    modAsset.GetSetcostreg = replaceDoubleZero(dataReader, "costreg");
                    modAsset.GetSetdepraccum = replaceDoubleZero(dataReader, "depraccum");
                    modAsset.GetSetassetnbv = modAsset.GetSetcostreg - modAsset.GetSetdepraccum; 
                    modAsset.GetSettranvalue = replaceDoubleZero(dataReader, "tranvalue");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public ArrayList getAssetTranList(String comp, String tranno, String trancode, String trancat, String assetno, String status, String currpage)
    {
        ArrayList lsAssetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        b.id, b.assetno, b.tranvalue, b.tranqty, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a left join asset_tran_details b on a.comp = b.comp and a.tranno = b.tranno and a.trancode = b.trancode ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate, b.assetno ";
                if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modAsset = new MainModel();
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetlineno = replaceZero(dataReader, "id");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");
                    modAsset.GetSettranvalue = replaceDoubleZero(dataReader, "tranvalue");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAssetMod.Add(modAsset);
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAssetMod;
    }

    public MainModel getAssetTranDetails(String comp, String tranno, String trancode, String trancat, String assetno, String status)
    {
        MainModel modAsset = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.tranno, a.trancode, a.trancat, date_format(a.trandate,'%d-%m-%Y') str_trandate, ";
                query = query + "        b.assetno, b.tranvalue, b.tranqty, ";
                query = query + "        a.remarks, a.status, a.createdby, a.createddate, a.modifiedby, a.modifieddate, a.confirmedby, a.confirmeddate, a.cancelledby, a.cancelleddate ";
                query = query + " from   asset_tran_header a left join asset_tran_details b on a.comp = b.comp and a.tranno = b.tranno and a.trancode = b.trancode ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  b.assetno = '" + assetno + "' ";
                }
                if (tranno.Trim().Length > 0)
                {
                    query = query + " and  a.tranno = '" + tranno + "' ";
                }
                if (trancode.Trim().Length > 0)
                {
                    query = query + " and  a.trancode = '" + trancode + "' ";
                }
                if (trancat.Trim().Length > 0)
                {
                    query = query + " and  a.trancat = '" + trancat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + status + "' ";
                }
                query = query + " order by a.comp, a.trandate, b.assetno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modAsset.GetSetcomp = replaceNull(dataReader, "comp");
                    modAsset.GetSettranno = replaceNull(dataReader, "tranno");
                    modAsset.GetSettrancode = replaceNull(dataReader, "trancode");
                    modAsset.GetSettrancat = replaceNull(dataReader, "trancat");
                    modAsset.GetSettrandate = replaceNull(dataReader, "str_trandate");
                    modAsset.GetSetassetno = replaceNull(dataReader, "assetno");
                    modAsset.GetSettranqty = replaceZero(dataReader, "tranqty");
                    modAsset.GetSettranvalue = replaceDoubleZero(dataReader, "tranvalue");
                    modAsset.GetSetremarks = replaceNull(dataReader, "remarks");
                    modAsset.GetSetstatus = replaceNull(dataReader, "status");
                    modAsset.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modAsset.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modAsset.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modAsset.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    modAsset.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modAsset.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modAsset.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modAsset.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAssetTranDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modAsset;
    }

    public String insertAssetTranHeader(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO asset_tran_header (comp, tranno, trancode, trandate, remarks, status, createdby, createddate, modifiedby, modifieddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?tranno, ?trancode, ?trandate, ?remarks, ?status, ?createdby, ?createddate, ?modifiedby, ?modifieddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                if (oModAsset.GetSettrandate.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSettrandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModAsset.GetSetmodifiedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertAssetTranHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateAssetTranHeader(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE asset_tran_header ";
                query = query + " SET    trandate = ?trandate, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, modifiedby = ?modifiedby, modifieddate = ?modifieddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE comp = ?comp AND tranno = ?tranno AND trancode = ?trancode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                if (oModAsset.GetSettrandate.Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAsset.GetSettrandate, ukDtfi);
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?trandate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAsset.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAsset.GetSetcreatedby;
                if (oModAsset.GetSetcreatedby.Length > 0)
                {
                    if (oModAsset.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?modifiedby", MySqlDbType.VarChar).Value = oModAsset.GetSetmodifiedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetmodifieddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetmodifieddate);
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?modifieddate", MySqlDbType.DateTime).Value = null;
                }

                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAsset.GetSetconfirmedby;
                if (oModAsset.GetSetconfirmedby.Length > 0)
                {
                    if (oModAsset.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAsset.GetSetcancelledby;
                if (oModAsset.GetSetcancelledby.Length > 0)
                {
                    if (oModAsset.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAsset.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateAssetTranHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteAssetTranHeader(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM asset_tran_header ";
                query = query + " WHERE comp = ?comp AND tranno = ?tranno AND trancode = ?trancode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteAssetTranHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertListAssetTranDetails(MainModel oModDep)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO asset_tran_details (comp, tranno, trancode, assetno, tranqty, tranvalue) ";
                query = query + " SELECT '" + oModDep.GetSetcomp + "', '" + oModDep.GetSettranno + "', '" + oModDep.GetSettrancode + "', d.assetno, d.tranqty, 0 FROM asset_tran_details d, asset_tran_header h ";
                query = query + " WHERE  d.comp = ?comp AND d.trancode = 'REGCOST' ";
                query = query + " AND    d.comp = h.comp AND d.tranno = h.tranno AND d.trancode = h.trancode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDep.GetSetcomp;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertListAssetTranDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertAssetTranDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO asset_tran_details (comp, tranno, trancode, assetno, tranqty, tranvalue, remarks) ";
                query = query + " VALUES (?comp, ?tranno, ?trancode, ?assetno, ?tranqty, ?tranvalue, ?remarks) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?tranqty", MySqlDbType.Int16).Value = oModAsset.GetSettranqty;
                cmd.Parameters.Add("?tranvalue", MySqlDbType.Double).Value = oModAsset.GetSettranvalue;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertAssetTranDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateAssetTranDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE asset_tran_details ";
                query = query + " SET tranqty = ?tranqty, tranvalue = ?tranvalue, remarks = ?remarks ";
                query = query + " WHERE comp = ?comp AND tranno = ?tranno AND trancode = ?trancode AND assetno = ?assetno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.Parameters.Add("?tranqty", MySqlDbType.Int16).Value = oModAsset.GetSettranqty;
                cmd.Parameters.Add("?tranvalue", MySqlDbType.Double).Value = oModAsset.GetSettranvalue;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAsset.GetSetremarks;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateAssetTranDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }
    
    public String deleteAssetTranDetails(MainModel oModAsset)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM asset_tran_details ";
                query = query + " WHERE comp = ?comp AND tranno = ?tranno AND trancode = ?trancode AND assetno = ?assetno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAsset.GetSetcomp;
                cmd.Parameters.Add("?tranno", MySqlDbType.VarChar).Value = oModAsset.GetSettranno;
                cmd.Parameters.Add("?trancode", MySqlDbType.VarChar).Value = oModAsset.GetSettrancode;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = oModAsset.GetSetassetno;
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteAssetTranDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getOfficerList(String comp, String officerid, String officername)
    {
        ArrayList lsOfficer = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = " SELECT DISTINCT comp, officerid, officername FROM ( ";
                query = query + " SELECT comp, bpid officerid, bpdesc officername ";
                query = query + " from   businesspartner ";
                query = query + " WHERE  comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + comp + "' ";
                }
                if (officerid.Trim().Length > 0)
                {
                    query = query + " and  bpid = '" + officerid + "' ";
                }
                if (officername.Trim().Length > 0)
                {
                    query = query + " and  upper(bpdesc) like 'upper(%" + officername + "%') ";
                }
                query = query + " UNION ";
                query = query + " SELECT comp, officerid, officername ";
                query = query + " from   asset_placement ";
                query = query + " WHERE  comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + comp + "' ";
                }
                if (officerid.Trim().Length > 0)
                {
                    query = query + " and  officerid = '" + officerid + "' ";
                }
                if (officername.Trim().Length > 0)
                {
                    query = query + " and  upper(officername) like 'upper(%" + officername + "%') ";
                }
                query = query + " ) as listing ";
                query = query + " WHERE  comp is not NULL ";
                query = query + " ORDER BY comp, officerid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    object objOfficer = new { comp = replaceNull(dataReader, "comp"), officerid = replaceNull(dataReader, "officerid"), officername = replaceNull(dataReader, "officername") };
                    lsOfficer.Add(objOfficer);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOfficerList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOfficer;
    }

    public String storeBLOBFileAsset(String comp, String assetno, String userid, String sFileNameAndPath, String sFileName, String imgwidth = "0", String imgheight = "0")
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        String sNewFileName = "";

        try
        {
            ArrayList lsFileName = tokenString(sFileName, "upload_" + userid + "_");
            if (lsFileName.Count > 1)
            {
                sNewFileName = lsFileName[1].ToString();
            }

            if (sFileNameAndPath.Length > 0 && sNewFileName.Length > 0)
            {
                FileStream fls = new FileStream(sFileNameAndPath, FileMode.Open, FileAccess.Read);
                byte[] blob = new byte[fls.Length];
                fls.Read(blob, 0, System.Convert.ToInt32(fls.Length));
                fls.Close();

                byte[] ImageData;
                FileStream fs = new FileStream(sFileNameAndPath, FileMode.Open, FileAccess.Read);
                BinaryReader br = new BinaryReader(fs);
                ImageData = br.ReadBytes((int)fs.Length);
                br.Close();
                fs.Close();

                if (dbConnect.OpenConnection() == true)
                {
                    query = "";
                    query = query + " INSERT INTO asset_image (comp, assetno, filename, fileblob, imgwidth, imgheight, createdby, createddate) ";
                    query = query + " VALUES (?comp, ?assetno, ?filename, ?fileblob, ?imgwidth, ?imgheight, ?createdby, ?createddate) ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                    cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = assetno;
                    cmd.Parameters.Add("?filename", MySqlDbType.VarChar).Value = sNewFileName;
                    cmd.Parameters.Add("?fileblob", MySqlDbType.Blob).Value = ImageData;
                    cmd.Parameters.Add("?imgwidth", MySqlDbType.Int16).Value = imgwidth;
                    cmd.Parameters.Add("?imgheight", MySqlDbType.Int16).Value = imgheight;
                    cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = userid;
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    cmd.ExecuteNonQuery();
                }
                else
                {
                    result = "N";
                    WriteToLogFile("MainController-storeBLOBFileAsset: Unable to store BLOB file due to unable to connect to database!");
                }
                dbConnect.CloseConnection();
            }
            else
            {
                result = "N";
                WriteToLogFile("MainController-storeBLOBFileAsset: Unable to store BLOB file due to FileNameAndPath is empty!");
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-storeBLOBFileAsset: " + e.Message.ToString());
        }
        return result;
    }

    public ArrayList getBLOBFileAsset(String comp, String assetno, String filefolder, String filename)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, assetno, filename, fileblob, imgwidth, imgheight, createdby, date_format(createddate,'%d-%m-%Y %H:%i:%s') str_createddate ";
                query = query + " from   asset_image ";
                query = query + " WHERE  comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + comp + "' ";
                }
                if (assetno.Trim().Length > 0)
                {
                    query = query + " and  assetno = '" + assetno + "' ";
                }
                if (filename.Trim().Length > 0)
                {
                    query = query + " and  upper(filename) like '%" + filename + "%' ";
                }
                query = query + " order by comp, assetno, createddate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetassetno = replaceNull(dataReader, "assetno");
                    modItem.GetSetfilename = replaceNull(dataReader, "filename");
                    modItem.GetSetimgwidth = replaceZero(dataReader, "imgwidth");
                    modItem.GetSetimgheight = replaceZero(dataReader, "imgheight");
                    String sUrl = filefolder + modItem.GetSetfilename;
                    if (dataReader["fileblob"] != DBNull.Value)
                    {
                        File.WriteAllBytes(sUrl, (byte[])dataReader["fileblob"]);
                        /*
                        FileStream fs = new FileStream(sUrl, FileMode.Create);
                        //Use buffer to transfer data
                        byte[] b = new byte[myLob.Length];
                        //Read data from database
                        myLob.Read(b, 0, (int)myLob.Length);
                        //Write data to file
                        fs.Write(b, 0, (int)myLob.Length);
                        fs.Close();
                        */
                    }
                    modItem.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modItem.GetSetcreateddate = replaceNull(dataReader, "str_createddate");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getBLOBFileAsset: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public String deleteBLOBFileAsset(String comp, String assetno, String userid, String sFileName)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM asset_image ";
                query = query + " WHERE comp = ?comp and assetno = ?assetno and filename = ?filename ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?assetno", MySqlDbType.VarChar).Value = assetno;
                cmd.Parameters.Add("?filename", MySqlDbType.VarChar).Value = sFileName;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteBLOBFileAsset: " + e.Message.ToString());
        }
        return result;
    }

    /*** END FOR ASSET ***/
    #endregion FOR ASSET

    /*** BEGIN FOR OTHER BP ***/

    public ArrayList getOtherBPList(String comp, String obpid, String obpdesc, String obpcat)
    {
        ArrayList lsOthBPMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT otherbusinesspartner.comp, otherbusinesspartner.obpid, otherbusinesspartner.obpdesc, otherbusinesspartner.obpaddress, otherbusinesspartner.obpcontact, otherbusinesspartner.obpreference, ";
                query = query + "        otherbusinesspartner.obpcat, otherbusinesspartner.discounttype, otherbusinesspartner.bankguarantee, otherbusinesspartner.cashguarantee, otherbusinesspartner.creditlimit, otherbusinesspartner.obpstatus ";
                query = query + " from   otherbusinesspartner ";
                query = query + " WHERE  otherbusinesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  otherbusinesspartner.comp = '" + comp + "' ";
                }
                if (obpid.Trim().Length > 0)
                {
                    query = query + " and  otherbusinesspartner.obpid = '" + obpid + "' ";
                }
                if (obpdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(otherbusinesspartner.obpdesc) like '%" + obpdesc.ToUpper() + "%' ";
                }
                if (obpcat.Trim().Length > 0)
                {
                    query = query + " and  otherbusinesspartner.obpcat = '" + obpcat + "' ";
                }
                query = query + " order by otherbusinesspartner.comp, otherbusinesspartner.obpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOthBP = new MainModel();
                    modOthBP.GetSetcomp = replaceNull(dataReader, "comp");
                    modOthBP.GetSetobpid = replaceNull(dataReader, "obpid");
                    modOthBP.GetSetobpdesc = replaceNull(dataReader, "obpdesc");
                    modOthBP.GetSetobpaddress = replaceNull(dataReader, "obpaddress");
                    modOthBP.GetSetobpcontact = replaceNull(dataReader, "obpcontact");
                    modOthBP.GetSetobpreference = replaceNull(dataReader, "obpreference");
                    modOthBP.GetSetobpcat = replaceNull(dataReader, "obpcat");
                    modOthBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    modOthBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    modOthBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    modOthBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    modOthBP.GetSetobpstatus = replaceNull(dataReader, "obpstatus");
                    lsOthBPMod.Add(modOthBP);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOtherBPList: " + e.Message.ToString());
        }
        return lsOthBPMod;
    }

    public MainModel getOtherBPDetails(String comp, String obpid)
    {
        MainModel oModOthBP = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT otherbusinesspartner.comp, otherbusinesspartner.obpid, otherbusinesspartner.obpdesc, otherbusinesspartner.obpaddress, otherbusinesspartner.obpcontact, otherbusinesspartner.obpreference, ";
                query = query + "        otherbusinesspartner.obpcat, otherbusinesspartner.discounttype, otherbusinesspartner.bankguarantee, otherbusinesspartner.cashguarantee, otherbusinesspartner.creditlimit, otherbusinesspartner.obpstatus ";
                query = query + " from   otherbusinesspartner ";
                query = query + " WHERE  otherbusinesspartner.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  otherbusinesspartner.comp = '" + comp + "' ";
                }
                if (obpid.Trim().Length > 0)
                {
                    query = query + " and  otherbusinesspartner.obpid = '" + obpid + "' ";
                }
                query = query + " order by otherbusinesspartner.comp, otherbusinesspartner.obpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModOthBP.GetSetcomp = replaceNull(dataReader, "comp");
                    oModOthBP.GetSetobpid = replaceNull(dataReader, "obpid");
                    oModOthBP.GetSetobpdesc = replaceNull(dataReader, "obpdesc");
                    oModOthBP.GetSetobpaddress = replaceNull(dataReader, "obpaddress");
                    oModOthBP.GetSetobpcontact = replaceNull(dataReader, "obpcontact");
                    oModOthBP.GetSetobpreference = replaceNull(dataReader, "obpreference");
                    oModOthBP.GetSetobpcat = replaceNull(dataReader, "obpcat");
                    oModOthBP.GetSetdiscounttype = replaceNull(dataReader, "discounttype");
                    oModOthBP.GetSetcashguarantee = replaceDoubleZero(dataReader, "cashguarantee");
                    oModOthBP.GetSetbankguarantee = replaceDoubleZero(dataReader, "bankguarantee");
                    oModOthBP.GetSetcreditlimit = replaceDoubleZero(dataReader, "creditlimit");
                    oModOthBP.GetSetobpstatus = replaceNull(dataReader, "obpstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOtherBPDetails: " + e.Message.ToString());
        }
        return oModOthBP;
    }

    public void updateListOtherBP(String comp, String bpid, String obpdesc, String obpaddress, String obpcontact)
    {
        String result = "Y";

        MainModel modBP = getBPDetails(comp, bpid);
        if (modBP.GetSetbpdesc.Equals("OTHER"))
        {
            ArrayList lsOthBP = getOtherBPList(comp, "", obpdesc, "");
            if (lsOthBP.Count > 0)
            {
                result = "Y";
            }
            else
            {
                //insert new other bp
                MainModel modOthBP = new MainModel();
                modOthBP.GetSetobpid = getNextRunningNo(comp, "OTHER_BUSINESS_PARTNER", "ACTIVE");
                modOthBP.GetSetcomp = comp;
                modOthBP.GetSetobpdesc = obpdesc;
                modOthBP.GetSetobpaddress = obpaddress;
                modOthBP.GetSetobpcontact = obpcontact;
                modOthBP.GetSetobpcat = modBP.GetSetbpcat;
                modOthBP.GetSetdiscounttype = modBP.GetSetdiscounttype;
                modOthBP.GetSetobpstatus = modBP.GetSetbpstatus;
                result = insertOtherBusinessPartner(modOthBP);
                if (result.Equals("Y"))
                {
                    updateNextRunningNo(comp, "OTHER_BUSINESS_PARTNER", "ACTIVE");
                }
            }
        }
        //return result;
    }

    public String insertOtherBusinessPartner(MainModel oModOthBP)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO otherbusinesspartner (comp, obpid, obpdesc, obpaddress, obpcontact, obpreference, obpcat, discounttype, cashguarantee, bankguarantee, creditlimit, obpstatus) ";
                query = query + " VALUES (?comp, ?obpid, ?obpdesc, ?obpaddress, ?obpcontact, ?obpreference, ?obpcat, ?discounttype, ?cashguarantee, ?bankguarantee, ?creditlimit, ?obpstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOthBP.GetSetcomp;
                cmd.Parameters.Add("?obpid", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpid;
                cmd.Parameters.Add("?obpdesc", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpdesc;
                cmd.Parameters.Add("?obpaddress", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpaddress;
                cmd.Parameters.Add("?obpcontact", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpcontact;
                cmd.Parameters.Add("?obpreference", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpreference;
                cmd.Parameters.Add("?obpcat", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpcat;
                cmd.Parameters.Add("?discounttype", MySqlDbType.VarChar).Value = oModOthBP.GetSetdiscounttype;
                cmd.Parameters.Add("?cashguarantee", MySqlDbType.Double).Value = oModOthBP.GetSetcashguarantee;
                cmd.Parameters.Add("?bankguarantee", MySqlDbType.Double).Value = oModOthBP.GetSetbankguarantee;
                cmd.Parameters.Add("?creditlimit", MySqlDbType.Double).Value = oModOthBP.GetSetcreditlimit;
                cmd.Parameters.Add("?obpstatus", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertOtherBusinessPartner: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateOtherBusinessPartner(MainModel oModOthBP)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE otherbusinesspartner ";
                query = query + " SET    obpdesc = ?obpdesc, obpaddress = ?obpaddress, obpcontact = ?obpcontact, obpreference = ?obpreference, obpcat = ?obpcat, discounttype = ?discounttype, cashguarantee = ?cashguarantee, bankguarantee = ?bankguarantee, creditlimit = ?creditlimit, obpstatus = ?obpstatus ";
                query = query + " WHERE  comp = ?comp AND obpid = ?obpid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOthBP.GetSetcomp;
                cmd.Parameters.Add("?obpid", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpid;
                cmd.Parameters.Add("?obpdesc", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpdesc;
                cmd.Parameters.Add("?obpaddress", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpaddress;
                cmd.Parameters.Add("?obpcontact", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpcontact;
                cmd.Parameters.Add("?obpreference", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpreference;
                cmd.Parameters.Add("?obpcat", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpcat;
                cmd.Parameters.Add("?discounttype", MySqlDbType.VarChar).Value = oModOthBP.GetSetdiscounttype;
                cmd.Parameters.Add("?cashguarantee", MySqlDbType.Double).Value = oModOthBP.GetSetcashguarantee;
                cmd.Parameters.Add("?bankguarantee", MySqlDbType.Double).Value = oModOthBP.GetSetbankguarantee;
                cmd.Parameters.Add("?creditlimit", MySqlDbType.Double).Value = oModOthBP.GetSetcreditlimit;
                cmd.Parameters.Add("?obpstatus", MySqlDbType.VarChar).Value = oModOthBP.GetSetobpstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateOtherBusinessPartner: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR OTHER BP ***/

    /*** BEGIN FOR QUOTATION ***/

    public ArrayList getQuotationHeaderList(String comp, String orderno, String ordercat, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, date_format(a.orderdate,'%d-%m-%Y') str_orderdate, a.ordercat, a.orderactivity, a.ordertype, a.bpid, ";
                query = query + "        a.bpdesc, a.bpaddress, a.bpcontact, date_format(a.expirydate,'%d-%m-%Y') str_expirydate, a.paytype, a.salesamount, ";
                query = query + "        a.discamount, a.orderamount, a.taxamount, a.totalamount, ";
                query = query + "        a.orderremarks, a.orderstatus, a.ordercreated, a.ordercreateddate, a.orderapproved, a.orderapproveddate, a.ordercancelled, a.ordercancelleddate ";
                query = query + " from   quotation_header a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(a.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  a.ordercat = '" + ordercat + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  a.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.orderstatus = '" + status + "' ";
                }
                query = query + " order by a.comp, a.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetexpirydate = replaceNull(dataReader, "str_expirydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationHeaderList: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public ArrayList getQuotationHeaderListSearching(String comp, String searchitem, String ordercat, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, date_format(a.orderdate,'%d-%m-%Y') str_orderdate, a.ordercat, a.orderactivity, a.ordertype, a.bpid, ";
                query = query + "        a.bpdesc, a.bpaddress, a.bpcontact, date_format(a.expirydate,'%d-%m-%Y') str_expirydate, a.paytype, a.salesamount, ";
                query = query + "        a.discamount, a.orderamount, a.taxamount, a.totalamount, ";
                query = query + "        a.orderremarks, a.orderstatus, a.ordercreated, a.ordercreateddate, a.orderapproved, a.orderapproveddate, a.ordercancelled, a.ordercancelleddate ";
                query = query + " from   quotation_header a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (searchitem.Trim().Length > 0)
                {
                    query = query + " and  (upper(a.orderno) like '%" + searchitem.ToUpper() + "%' or upper(a.bpid) like '%" + searchitem.ToUpper() + "%' or upper(a.bpdesc) like '%" + searchitem.ToUpper() + "%')";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  a.ordercat = '" + ordercat + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  a.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  a.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  a.orderstatus = '" + status + "' ";
                }
                query = query + " order by a.comp, a.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetexpirydate = replaceNull(dataReader, "str_expirydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationHeaderListSearching: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public ArrayList getQuotationHeaderDetailList(String comp, String orderno, String bpid, String startdate, String enddate, String itemno, String status, String orderstatus)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, date_format(a.orderdate,'%d-%m-%Y') str_orderdate, a.ordercat, a.orderactivity, a.ordertype, a.bpid, ";
                query = query + "        a.bpdesc, a.bpaddress, a.bpcontact, date_format(a.expirydate,'%d-%m-%Y') str_expirydate, a.paytype, a.salesamount, ";
                query = query + "        a.discamount, a.orderamount, a.taxamount, a.totalamount, ";
                query = query + "        a.orderremarks, a.orderstatus, a.ordercreated, a.ordercreateddate, a.orderapproved, a.orderapproveddate, a.ordercancelled, a.ordercancelleddate, ";
                query = query + "        b.lineno, ";
                query = query + " 	     b.itemno, b.itemdesc, item.itemcat, b.remarks, b.unitprice, ";
                query = query + "        b.discamount, b.quantity, b.orderprice, ";
                query = query + "        b.taxcode, b.taxrate, b.taxamount, ";
                query = query + "        b.totalprice, b.salesorderno, b.saleslineno ";
                query = query + " from   quotation_header a, quotation_details b, item ";
                query = query + " WHERE  a.comp is not NULL ";
                query = query + " AND    a.comp = b.comp ";
                query = query + " AND    a.orderno = b.orderno ";
                query = query + " AND    b.comp = item.comp ";
                query = query + " AND    b.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  s.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(s.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  s.bpid = '" + bpid + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  s.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  s.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  s.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  s.orderstatus = '" + status + "' ";
                }
                if (orderstatus.Equals("DONE"))
                {
                    query = query + " and  (b.salesorderno is not null and b.salesorderno != '') ";
                }
                else if (orderstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  (b.salesorderno is null or b.salesorderno == '') ";
                }
                query = query + " order by a.comp, a.orderno desc ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdrDet = new MainModel();
                    bool addinarray = true;
                    modOrdHdrDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdrDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdrDet.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdrDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdrDet.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdrDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdrDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdrDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdrDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdrDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdrDet.GetSetexpirydate = replaceNull(dataReader, "str_expirydate");
                    modOrdHdrDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdrDet.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdrDet.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdrDet.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdrDet.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdrDet.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdrDet.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdrDet.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdrDet.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdrDet.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    modOrdHdrDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdHdrDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdHdrDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdHdrDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdHdrDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdHdrDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdHdrDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdHdrDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdHdrDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdHdrDet.GetSetsalesorderno = replaceNull(dataReader, "salesorderno");
                    modOrdHdrDet.GetSetsaleslineno = replaceZero(dataReader, "saleslineno");
                    if (addinarray)
                    {
                        lsOrdHdrMod.Add(modOrdHdrDet);
                    }
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationHeaderDetailList: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public MainModel getQuotationHeaderDetails(String comp, String orderno)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, date_format(a.orderdate,'%d-%m-%Y') str_orderdate, a.ordercat, a.orderactivity, a.ordertype, a.bpid, ";
                query = query + "        a.bpdesc, a.bpaddress, a.bpcontact, date_format(a.expirydate,'%d-%m-%Y') str_expirydate, a.paytype, a.salesamount, ";
                query = query + "        a.discamount, a.orderamount, a.taxamount, a.totalamount, ";
                query = query + "        a.orderremarks, a.orderstatus, a.ordercreated, a.ordercreateddate, a.orderapproved, ifnull((select max(username) from userprofile where userid = a.ordercreated),'') str_ordercreated, a.orderapproveddate, a.ordercancelled, a.ordercancelleddate ";
                query = query + " from   quotation_header a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + orderno + "' ";
                }
                query = query + " order by a.comp, a.orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetexpirydate = replaceNull(dataReader, "str_expirydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetusername = replaceNull(dataReader, "str_ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationHeaderDetails: " + e.Message.ToString());
        }
        return modOrdHdr;
    }

    public ArrayList getQuotationDetailsList(String comp, String orderno, int lineno, String itemno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, a.lineno, ";
                query = query + " 	     a.itemno, a.itemdesc, item.itemcat, item.itemtype, a.remarks, a.unitprice, ";
                query = query + "        a.discamount, a.quantity, a.orderprice, ";
                query = query + "        a.taxcode, a.taxrate, a.taxamount, ";
                query = query + "        a.totalprice, a.salesorderno, a.saleslineno ";
                query = query + " from   quotation_details a, item ";
                query = query + " WHERE  a.comp is not NULL ";
                query = query + " AND  a.comp = item.comp ";
                query = query + " AND  a.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  a.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  a.itemno = '" + itemno + "' ";
                }
                query = query + " order by a.comp, a.orderno, a.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetsalesorderno = replaceNull(dataReader, "salesorderno");
                    modOrdDet.GetSetsaleslineno = replaceZero(dataReader, "saleslineno");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationDetailsList: " + e.Message.ToString());
        }
        return lsOrdDetMod;
    }

    public MainModel getQuotationDetailsDetails(String comp, String orderno, int lineno, String itemno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.orderno, a.lineno, ";
                query = query + " 	     a.itemno, a.itemdesc, item.itemcat, item.itemtype, a.remarks, a.unitprice, ";
                query = query + "        a.discamount, a.quantity, a.orderprice, ";
                query = query + "        a.taxcode, a.taxrate, a.taxamount, ";
                query = query + "        a.totalprice, a.salesorderno, a.saleslineno ";
                query = query + " from   quotation_details a, item ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  a.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  a.itemno = '" + itemno + "' ";
                }
                query = query + " order by a.comp, a.orderno, a.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetsalesorderno = replaceNull(dataReader, "salesorderno");
                    modOrdDet.GetSetsaleslineno = replaceZero(dataReader, "saleslineno");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationDetailsDetails: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getQuotationDetailsDetailsByItem(String comp, String orderno, int lineno, String itemno, String fyr, String month, String status)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.itemno, a.itemdesc, SUM(a.totalprice) order_amount, a.salesorderno ";
                query = query + " from   quotation_details a, quotation_header b ";
                query = query + " WHERE  a.comp is not NULL ";
                query = query + " AND    a.orderno = b.orderno ";
                query = query + " AND    a.comp = b.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  a.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  a.itemno = '" + itemno + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(b.orderapproveddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM comp = '" + comp + "' and fiscalperiod WHERE financeyear = '" + fyr + "') ";
                }
                if (month.Trim().Length > 0)
                {
                    query = query + " and  date_format(b.orderapproveddate,'%m') = (SELECT actualmonth FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "' and financemonth = '" + month + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.orderstatus = '" + status + "' ";
                }
                query = query + " group by a.comp, a.itemno, a.itemdesc, a.salesorderno ";
                query = query + " order by a.comp, a.itemno, a.itemdesc, a.salesorderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "order_amount");
                    modOrdDet.GetSetsalesorderno = replaceNull(dataReader, "salesorderno");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationDetailsDetailsByItem: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getQuotationDetailsDetailsByAllItem(String comp, String fyr, String month, String orderno, String ordercat, String status)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, SUM(a.totalprice) order_amount, a.salesorderno ";
                query = query + " from   quotation_details a, quotation_header b ";
                query = query + " WHERE  a.comp is not NULL ";
                query = query + " AND    a.orderno = b.orderno ";
                query = query + " AND    a.comp = order_headber.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(b.orderapproveddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "') ";
                }
                if (month.Trim().Length > 0)
                {
                    query = query + " and  date_format(b.orderapproveddate,'%m') = (SELECT actualmonth FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "' and financemonth = '" + month + "') ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  b.orderno = '" + orderno + "' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  b.ordercat = '" + ordercat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.orderstatus = '" + status + "' ";
                }
                query = query + " group by a.comp, a.salesorderno ";
                query = query + " order by a.comp, a.salesorderno ";
                //WriteToLogFile("MainController-getQuotationDetailsDetailsByAllItem [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "order_amount");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "order_qty");
                    modOrdDet.GetSetsalesorderno = replaceNull(dataReader, "salesorderno");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getQuotationDetailsDetailsByAllItem: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public String insertQuotationHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO quotation_header (comp, orderno, orderdate, ordercat, orderactivity, ordertype, bpid, bpdesc, bpaddress, bpcontact, paytype, salesamount, discamount, orderamount, taxamount, totalamount, expirydate, orderremarks, orderstatus, ordercreated, ordercreateddate, orderapproved, orderapproveddate, ordercancelled, ordercancelleddate) ";
                query = query + " VALUES (?comp, ?orderno, ?orderdate, ?ordercat, ?orderactivity, ?ordertype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?paytype, ?salesamount, ?discamount, ?orderamount, ?taxamount, ?totalamount, ?expirydate, ?orderremarks, ?orderstatus, ?ordercreated, ?ordercreateddate, ?orderapproved, ?orderapproveddate, ?ordercancelled, ?ordercancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                if (oModOrder.GetSetorderdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderdate, ukDtfi);
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModOrder.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetexpirydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetexpirydate, ukDtfi);
                    cmd.Parameters.Add("?expirydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expirydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertQuotationHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateQuotationHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE quotation_header ";
                query = query + " SET    ordercat = ?ordercat, orderactivity = ?orderactivity, ordertype = ?ordertype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, paytype = ?paytype, salesamount = ?salesamount, discamount = ?discamount, ";
                query = query + "        orderamount = ?orderamount, taxamount = ?taxamount, totalamount = ?totalamount, expirydate = ?expirydate, orderremarks = ?orderremarks, orderstatus = ?orderstatus, ordercreated = ?ordercreated, ordercreateddate = ?ordercreateddate, orderapproved = ?orderapproved, orderapproveddate = ?orderapproveddate, ordercancelled = ?ordercancelled, ordercancelleddate = ?ordercancelleddate ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModOrder.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetexpirydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetexpirydate, ukDtfi);
                    cmd.Parameters.Add("?expirydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expirydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    //WriteToLogFile("MainController-updateOrderHeader: oModOrder.GetSetordercreated - " + oModOrder.GetSetordercreateddate);
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                        //WriteToLogFile("MainController-updateOrderHeader: datetime - " + datetime);
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateQuotationHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateQuotationHeaderInfo(String sComp, String sOrderNo)
    {
        String result = "Y";

        MainModel oModOrdHdr = new MainModel();
        ArrayList lsOrderLineItem = new ArrayList();

        try
        {
            oModOrdHdr = getQuotationHeaderDetails(sComp, sOrderNo);
            if (oModOrdHdr.GetSetorderno.Length > 0)
            {
                double salesamount = 0, discamount = 0, orderamount = 0, taxamount = 0, totalamount = 0;
                lsOrderLineItem = getQuotationDetailsList(sComp, sOrderNo, 0, "");
                for (int i = 0; i < lsOrderLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsOrderLineItem[i];
                    salesamount = salesamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity);
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    orderamount = orderamount + oModLineItem.GetSetorderprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalprice;
                }
                oModOrdHdr.GetSetsalesamount = salesamount;
                oModOrdHdr.GetSetdiscamount = discamount;
                oModOrdHdr.GetSetorderamount = orderamount;
                oModOrdHdr.GetSettaxamount = taxamount;
                oModOrdHdr.GetSettotalamount = totalamount;
                //update order header
                result = updateQuotationHeader(oModOrdHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateQuotationHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertQuotationDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO quotation_details (comp, orderno, lineno, itemno, itemdesc, remarks, unitprice, discamount, quantity, orderprice, taxcode, taxrate, taxamount, totalprice, salesorderno, saleslineno) ";
                query = query + " VALUES (?comp, ?orderno, ?lineno, ?itemno, ?itemdesc, ?remarks, ?unitprice, ?discamount, ?quantity, ?orderprice, ?taxcode, ?taxrate, ?taxamount, ?totalprice, ?salesorderno, ?saleslineno) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?salesorderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetsalesorderno;
                cmd.Parameters.Add("?saleslineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetsaleslineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertQuotationDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateQuotationDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE quotation_details ";
                query = query + " SET    itemno = ?itemno, itemdesc = ?itemdesc, remarks = ?remarks, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, orderprice = ?orderprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalprice = ?totalprice, salesorderno = ?salesorderno, saleslineno = ?saleslineno ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?salesorderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetsalesorderno;
                cmd.Parameters.Add("?saleslineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetsaleslineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateQuotationDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteQuotationDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM quotation_details ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteQuotationDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR QUOTATION ***/

    /*** BEGIN FOR ORDER ***/

    public ArrayList getOrderHeaderList(String comp, String orderno, String ordercat, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_header.comp, order_header.orderno, date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordercat, order_header.orderactivity, order_header.ordertype, order_header.bpid, ";
                query = query + "        order_header.bpdesc, order_header.bpaddress, order_header.bpcontact, date_format(order_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, order_header.paytype, order_header.salesamount, ";
                query = query + "        order_header.discamount, order_header.orderamount, order_header.taxamount, order_header.totalamount, ";
                query = query + "        order_header.orderremarks, order_header.orderstatus, order_header.ordercreated, order_header.ordercreateddate, order_header.orderapproved, order_header.orderapproveddate, order_header.ordercancelled, order_header.ordercancelleddate ";
                query = query + " from   order_header ";
                query = query + " WHERE  order_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(order_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  order_header.ordercat = '" + ordercat + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  order_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                query = query + " order by order_header.comp, order_header.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderHeaderList: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public ArrayList getOrderHeaderListSearching(String comp, String searchitem, String ordercat, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_header.comp, order_header.orderno, date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordercat, order_header.orderactivity, order_header.ordertype, order_header.bpid, ";
                query = query + "        order_header.bpdesc, order_header.bpaddress, order_header.bpcontact, date_format(order_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, order_header.paytype, order_header.salesamount, ";
                query = query + "        order_header.discamount, order_header.orderamount, order_header.taxamount, order_header.totalamount, ";
                query = query + "        order_header.orderremarks, order_header.orderstatus, order_header.ordercreated, order_header.ordercreateddate, order_header.orderapproved, order_header.orderapproveddate, order_header.ordercancelled, order_header.ordercancelleddate ";
                query = query + " from   order_header ";
                query = query + " WHERE  order_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (searchitem.Trim().Length > 0)
                {
                    query = query + " and  (upper(order_header.orderno) like '%" + searchitem.ToUpper() + "%' or upper(order_header.bpid) like '%" + searchitem.ToUpper() + "%' or upper(order_header.bpdesc) like '%" + searchitem.ToUpper() + "%')";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  order_header.ordercat = '" + ordercat + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                query = query + " order by order_header.comp, order_header.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderHeaderList: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public ArrayList getOrderHeaderDetailList(String comp, String orderno, String bpid, String startdate, String enddate, String itemno,  String status, String shipmentstatus, String invoicestatus)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_header.comp, order_header.orderno, date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordercat, order_header.orderactivity, order_header.ordertype, order_header.bpid, ";
                query = query + "        order_header.bpdesc, order_header.bpaddress, order_header.bpcontact, date_format(order_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, order_header.paytype, order_header.salesamount, ";
                query = query + "        order_header.discamount, order_header.orderamount, order_header.taxamount, order_header.totalamount, ";
                query = query + "        order_header.orderremarks, order_header.orderstatus, order_header.ordercreated, order_header.ordercreateddate, order_header.orderapproved, order_header.orderapproveddate, order_header.ordercancelled, order_header.ordercancelleddate, ";
                query = query + "        order_details.lineno, ";
                query = query + " 	     order_details.itemno, order_details.itemdesc, item.itemcat, order_details.remarks, order_details.unitprice, ";
                query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                query = query + " from   order_header, order_details, item ";
                query = query + " WHERE  order_header.comp is not NULL ";
                query = query + " AND    order_header.comp = order_details.comp ";
                query = query + " AND    order_header.orderno = order_details.orderno ";
                query = query + " AND    order_details.comp = item.comp ";
                query = query + " AND    order_details.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(order_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  order_header.bpid = '" + bpid + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  order_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                if (shipmentstatus.Equals("DONE"))
                {
                    query = query + " and  order_details.quantity - order_details.deliverqty = 0 ";
                }
                else if (shipmentstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  order_details.quantity - order_details.deliverqty > 0 ";
                }
                if (invoicestatus.Equals("DONE"))
                {
                    query = query + " and  order_details.totalprice - order_details.invoiceamount = 0 ";
                }
                else if (invoicestatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  order_details.totalprice - order_details.invoiceamount > 0 ";
                }
                query = query + " order by order_header.comp, order_header.orderno desc ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdrDet = new MainModel();
                    bool addinarray = true;
                    modOrdHdrDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdrDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdrDet.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdrDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdrDet.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdrDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdrDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdrDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdrDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdrDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdrDet.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdrDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdrDet.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdrDet.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdrDet.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdrDet.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdrDet.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdrDet.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdrDet.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdrDet.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdrDet.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    modOrdHdrDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdHdrDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdHdrDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdHdrDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdHdrDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdHdrDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdHdrDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdHdrDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdHdrDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdHdrDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdHdrDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    if (addinarray)
                    {
                        lsOrdHdrMod.Add(modOrdHdrDet);
                    }
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderHeaderDetailList: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public MainModel getOrderHeaderDetails(String comp, String orderno)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_header.comp, order_header.orderno, date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordercat, order_header.orderactivity, order_header.ordertype, order_header.bpid, ";
                query = query + "        order_header.bpdesc, order_header.bpaddress, order_header.bpcontact, date_format(order_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, order_header.paytype, order_header.salesamount, ";
                query = query + "        order_header.discamount, order_header.orderamount, order_header.taxamount, order_header.totalamount, ";
                query = query + "        order_header.orderremarks, order_header.orderstatus, order_header.ordercreated, order_header.ordercreateddate, order_header.orderapproved, ifnull((select max(username) from userprofile where userid = order_header.ordercreated),'') str_ordercreated, order_header.orderapproveddate, order_header.ordercancelled, order_header.ordercancelleddate ";
                query = query + " from   order_header ";
                query = query + " WHERE  order_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderno = '" + orderno + "' ";
                }
                query = query + " order by order_header.comp, order_header.orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetusername = replaceNull(dataReader, "str_ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderHeaderDetails: " + e.Message.ToString());
        }
        return modOrdHdr;
    }

    public MainModel getOrderHeaderDetails(String comp, String orderno, String ordercat)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_header.compfrom comp, transfer_header.orderno, date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordercat, transfer_header.ordertype, transfer_header.orderactivity, ";
                    //query = query + "        transfer_header.compfrom bpid, comp1.comp_name bpdesc, comp1.comp_address bpaddress, comp1.comp_contact bpcontact, ";
                    query = query + "        transfer_header.compto bpid, comp2.comp_name bpdesc, comp2.comp_address bpaddress, comp2.comp_contact bpcontact, ";
                    query = query + "        date_format(transfer_header.shipmentdate,'%d-%m-%Y') str_plandeliverydate, ";
                    //query = query + "        date_format(transfer_header.receiptdate,'%d-%m-%Y') str_plandeliverydate, ";
                    query = query + "        'NOT_APPLICABLE' paytype, transfer_header.transferamount salesamount, ";
                    query = query + "        transfer_header.discamount, transfer_header.orderamount, transfer_header.taxamount, transfer_header.totalamount, ";
                    query = query + "        transfer_header.orderremarks, transfer_header.orderstatus, transfer_header.ordercreated, transfer_header.ordercreateddate, transfer_header.orderapproved, ifnull((select max(username) from userprofile where userid = transfer_header.ordercreated),'') str_ordercreated, transfer_header.orderapproveddate, transfer_header.ordercancelled, transfer_header.ordercancelleddate ";
                    query = query + " from   transfer_header, comp_details comp1, comp_details comp2 ";
                    query = query + " WHERE  transfer_header.comp is not NULL ";
                    query = query + " and    transfer_header.compfrom = comp1.comp ";
                    query = query + " and    transfer_header.compto = comp2.comp ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and    transfer_header.compfrom = '" + comp + "' ";
                        //query = query + " and    transfer_header.compto = '" + comp + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    query = query + " order by transfer_header.compfrom, transfer_header.orderno ";
                    //query = query + " order by transfer_header.compto, transfer_header.orderno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT order_header.comp, order_header.orderno, date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordercat, order_header.orderactivity, order_header.ordertype, order_header.bpid, ";
                    query = query + "        order_header.bpdesc, order_header.bpaddress, order_header.bpcontact, date_format(order_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, order_header.paytype, order_header.salesamount, ";
                    query = query + "        order_header.discamount, order_header.orderamount, order_header.taxamount, order_header.totalamount, ";
                    query = query + "        order_header.orderremarks, order_header.orderstatus, order_header.ordercreated, order_header.ordercreateddate, order_header.orderapproved, ifnull((select max(username) from userprofile where userid = order_header.ordercreated),'') str_ordercreated, order_header.orderapproveddate, order_header.ordercancelled, order_header.ordercancelleddate ";
                    query = query + " from   order_header ";
                    query = query + " WHERE  order_header.comp is not NULL ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  order_header.comp = '" + comp + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  order_header.orderno = '" + orderno + "' ";
                    }
                    query = query + " order by order_header.comp, order_header.orderno ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetusername = replaceNull(dataReader, "str_ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderHeaderDetails: " + e.Message.ToString());
        }
        return modOrdHdr;
    }

    public ArrayList getOrderDetailsList(String comp, String orderno, int lineno, String itemno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                query = query + " 	     order_details.itemno, order_details.itemdesc, item.itemcat, item.itemtype, order_details.remarks, order_details.unitprice, ";
                query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                query = query + " from   order_details, item ";
                query = query + " WHERE  order_details.comp is not NULL ";
                query = query + " AND  order_details.comp = item.comp ";
                query = query + " AND  order_details.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  order_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  order_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderDetailsList: " + e.Message.ToString());
        }
        return lsOrdDetMod;
    }

    public MainModel getOrderDetailsDetails(String comp, String orderno, int lineno, String itemno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                query = query + " 	     order_details.itemno, order_details.itemdesc, order_details.remarks, order_details.unitprice, ";
                query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                query = query + " from   order_details ";
                query = query + " WHERE  order_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  order_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  order_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderDetailsDetails: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getOrderDetailsDetails(String comp, String orderno, int lineno, String itemno, String ordercat, String shipmentno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_header.compfrom comp, transfer_details.orderno, transfer_details.lineno, ";
                    query = query + " 	     transfer_details.itemno, transfer_details.itemdesc, transfer_details.remarks, transfer_details.unitprice, ";
                    query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                    query = query + "        transfer_details.quantity - transfer_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = transfer_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = transfer_details.itemno and shipment_details.orderno = transfer_details.orderno and shipment_details.order_lineno = transfer_details.lineno),0) order_quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                    query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount ";
                    query = query + " from   transfer_details, transfer_header ";
                    query = query + " WHERE  transfer_details.comp is not NULL ";
                    query = query + " AND  transfer_details.comp = transfer_header.comp ";
                    query = query + " AND  transfer_details.orderno = transfer_header.orderno ";
                    query = query + " and  transfer_header.comp is not null ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.compfrom = '" + comp + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_details.orderno = '" + orderno + "' ";
                    }
                    if (lineno > 0)
                    {
                        query = query + " and  transfer_details.lineno = " + lineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_details.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by transfer_header.compfrom, transfer_details.orderno, transfer_details.lineno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                    query = query + " 	     order_details.itemno, order_details.itemdesc, order_details.remarks, order_details.unitprice, ";
                    query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                    query = query + "        order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) order_quantity, ";
                    query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                    query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                    query = query + " from   order_details ";
                    query = query + " WHERE  order_details.comp is not NULL ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  order_details.comp = '" + comp + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  order_details.orderno = '" + orderno + "' ";
                    }
                    if (lineno > 0)
                    {
                        query = query + " and  order_details.lineno = " + lineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  order_details.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderDetailsDetails: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getOrderDetailsDetailsByItem(String comp, String orderno, int lineno, String itemno, String fyr, String month, String status)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, order_details.itemno, order_details.itemdesc, SUM(order_details.totalprice) order_amount, SUM(order_details.deliverqty) order_qty, SUM(order_details.invoiceamount) invoice_amount ";
                query = query + " from   order_details, order_header ";
                query = query + " WHERE  order_details.comp is not NULL ";
                query = query + " AND    order_details.orderno = order_header.orderno ";
                query = query + " AND    order_details.comp = order_header.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  order_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  order_details.itemno = '" + itemno + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(order_header.orderapproveddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM comp = '" + comp + "' and fiscalperiod WHERE financeyear = '" + fyr + "') ";
                }
                if (month.Trim().Length > 0)
                {
                    query = query + " and  date_format(order_header.orderapproveddate,'%m') = (SELECT actualmonth FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "' and financemonth = '" + month + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                query = query + " group by order_details.comp, order_details.itemno, order_details.itemdesc ";
                query = query + " order by order_details.comp, order_details.itemno, order_details.itemdesc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "order_amount");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "order_qty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoice_amount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderDetailsDetailsByItem: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getOrderDetailsDetailsByAllItem(String comp, String fyr, String month, String orderno, String ordercat, String status)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, SUM(order_details.totalprice) order_amount, SUM(order_details.deliverqty) order_qty, SUM(order_details.invoiceamount) invoice_amount ";
                query = query + " from   order_details, order_header ";
                query = query + " WHERE  order_details.comp is not NULL ";
                query = query + " AND    order_details.orderno = order_header.orderno ";
                query = query + " AND    order_details.comp = order_header.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(order_header.orderapproveddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "') ";
                }
                if (month.Trim().Length > 0)
                {
                    query = query + " and  date_format(order_header.orderapproveddate,'%m') = (SELECT actualmonth FROM fiscalperiod WHERE comp = '" + comp + "' and financeyear = '" + fyr + "' and financemonth = '" + month + "') ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderno = '" + orderno + "' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  order_header.ordercat = '" + ordercat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                query = query + " group by order_details.comp ";
                query = query + " order by order_details.comp ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "order_amount");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "order_qty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoice_amount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderDetailsDetailsByAllItem: " + e.Message.ToString());
        }
        return modOrdDet;
    }
    
    public String insertOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO order_header (comp, orderno, orderdate, ordercat, orderactivity, ordertype, bpid, bpdesc, bpaddress, bpcontact, paytype, salesamount, discamount, orderamount, taxamount, totalamount, plandeliverydate, orderremarks, orderstatus, ordercreated, ordercreateddate, orderapproved, orderapproveddate, ordercancelled, ordercancelleddate) ";
                query = query + " VALUES (?comp, ?orderno, ?orderdate, ?ordercat, ?orderactivity, ?ordertype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?paytype, ?salesamount, ?discamount, ?orderamount, ?taxamount, ?totalamount, ?plandeliverydate, ?orderremarks, ?orderstatus, ?ordercreated, ?ordercreateddate, ?orderapproved, ?orderapproveddate, ?ordercancelled, ?ordercancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                if (oModOrder.GetSetorderdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderdate,ukDtfi);
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = datetime;
                }
                else {
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModOrder.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetplandeliverydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetplandeliverydate,ukDtfi);
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE order_header ";
                query = query + " SET    ordercat = ?ordercat, orderactivity = ?orderactivity, ordertype = ?ordertype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, paytype = ?paytype, salesamount = ?salesamount, discamount = ?discamount, ";
                query = query + "        orderamount = ?orderamount, taxamount = ?taxamount, totalamount = ?totalamount, plandeliverydate = ?plandeliverydate, orderremarks = ?orderremarks, orderstatus = ?orderstatus, ordercreated = ?ordercreated, ordercreateddate = ?ordercreateddate, orderapproved = ?orderapproved, orderapproveddate = ?orderapproveddate, ordercancelled = ?ordercancelled, ordercancelleddate = ?ordercancelleddate ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModOrder.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetplandeliverydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetplandeliverydate, ukDtfi);
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    //WriteToLogFile("MainController-updateOrderHeader: oModOrder.GetSetordercreated - " + oModOrder.GetSetordercreateddate);
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                        //WriteToLogFile("MainController-updateOrderHeader: datetime - " + datetime);
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateOrderHeaderInfo(String sComp, String sOrderNo)
    {
        String result = "Y";

        MainModel oModOrdHdr = new MainModel();
        ArrayList lsOrderLineItem = new ArrayList();

        try
        {
            oModOrdHdr = getOrderHeaderDetails(sComp, sOrderNo);
            if (oModOrdHdr.GetSetorderno.Length > 0)
            {
                double salesamount = 0, discamount = 0, orderamount = 0, taxamount = 0, totalamount = 0;
                lsOrderLineItem = getOrderDetailsList(sComp, sOrderNo, 0, "");
                for (int i = 0; i < lsOrderLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsOrderLineItem[i];
                    salesamount = salesamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity);
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    orderamount = orderamount + oModLineItem.GetSetorderprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalprice;
                }
                oModOrdHdr.GetSetsalesamount = salesamount;
                oModOrdHdr.GetSetdiscamount = discamount;
                oModOrdHdr.GetSetorderamount = orderamount;
                oModOrdHdr.GetSettaxamount = taxamount;
                oModOrdHdr.GetSettotalamount = totalamount;
                //update order header
                result = updateOrderHeader(oModOrdHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateOrderHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO order_details (comp, orderno, lineno, itemno, itemdesc, remarks, unitprice, discamount, quantity, orderprice, taxcode, taxrate, taxamount, totalprice, deliverqty, invoiceamount) ";
                query = query + " VALUES (?comp, ?orderno, ?lineno, ?itemno, ?itemdesc, ?remarks, ?unitprice, ?discamount, ?quantity, ?orderprice, ?taxcode, ?taxrate, ?taxamount, ?totalprice, ?deliverqty, ?invoiceamount) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?deliverqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetdeliverqty;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModOrderDet.GetSetinvoiceamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE order_details ";
                query = query + " SET    itemno = ?itemno, itemdesc = ?itemdesc, remarks = ?remarks, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, orderprice = ?orderprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalprice = ?totalprice, deliverqty = ?deliverqty, invoiceamount = ?invoiceamount ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?deliverqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetdeliverqty;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModOrderDet.GetSetinvoiceamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM order_details ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String cancelSalesOrderDetails(MainModel oModCounterTransDet)
    {
        String result = "Y";

        try
        {
            if (oModCounterTransDet.GetSetorderno.Length > 0)
            {
                MainModel modOrderHdr = getOrderHeaderDetails(oModCounterTransDet.GetSetcomp, oModCounterTransDet.GetSetorderno);
                if (modOrderHdr.GetSetorderno.Length > 0)
                {
                    modOrderHdr.GetSetorderstatus = "CANCELLED";
                    updateOrderHeader(modOrderHdr);
                    oModCounterTransDet.GetSetorderstatus = "CANCELLED";
                    updateCounterTransDetails(oModCounterTransDet);
                }
            }

            if (oModCounterTransDet.GetSetshipmentno.Length > 0)
            {
                MainModel modShipmentHdr = getShipmentHeaderDetails(oModCounterTransDet.GetSetcomp, oModCounterTransDet.GetSetshipmentno);
                if (modShipmentHdr.GetSetshipmentno.Length > 0)
                {
                    modShipmentHdr.GetSetstatus = "CANCELLED";
                    updateShipmentHeader(modShipmentHdr);
                    oModCounterTransDet.GetSetshipmentstatus = "CANCELLED";
                    updateCounterTransDetails(oModCounterTransDet);
                }
            }

            if (oModCounterTransDet.GetSetinvoiceno.Length > 0)
            {
                MainModel modInvoicetHdr = getInvoiceHeaderDetails(oModCounterTransDet.GetSetcomp, oModCounterTransDet.GetSetinvoiceno);
                if (modInvoicetHdr.GetSetinvoiceno.Length > 0)
                {
                    modInvoicetHdr.GetSetstatus = "CANCELLED";
                    updateInvoiceHeader(modInvoicetHdr);
                    oModCounterTransDet.GetSetinvoicestatus = "CANCELLED";
                    updateCounterTransDetails(oModCounterTransDet);
                }
            }

            if (oModCounterTransDet.GetSetpayrcptno.Length > 0)
            {
                MainModel modPayRcptHdr = getPaymentReceiptHeaderDetails(oModCounterTransDet.GetSetcomp, oModCounterTransDet.GetSetpayrcptno);
                if (modPayRcptHdr.GetSetpayrcptno.Length > 0)
                {
                    modPayRcptHdr.GetSetstatus = "CANCELLED";
                    updatePaymentReceiptHeader(modPayRcptHdr);
                    oModCounterTransDet.GetSetpayrcptstatus = "CANCELLED";
                    updateCounterTransDetails(oModCounterTransDet);
                }
            }

        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-cancelSalesOrderDetails: " + e.Message.ToString());
        }
        return result;
    }

    /*** END FOR ORDER ***/

    /*** BEGIN FOR SHIPMENT ***/

    public ArrayList getShipmentHeaderList(String comp, String shipmentno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_header.comp, shipment_header.shipmentno, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_header.shipmentcat, ";
                query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, ";
                query = query + "        shipment_header.remarks, shipment_header.status, shipment_header.createdby, shipment_header.createddate, ";
                query = query + "        shipment_header.confirmedby, shipment_header.confirmeddate, shipment_header.cancelledby, shipment_header.cancelleddate  ";
                query = query + " from   shipment_header ";
                query = query + " WHERE  shipment_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  upper(shipment_header.shipmentno) like '%" + shipmentno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.status = '" + status + "' ";
                }
                query = query + " order by shipment_header.comp, shipment_header.shipmentno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modHdr = new MainModel();
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modHdr.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modHdr.GetSetshipmentcat = replaceNull(dataReader, "shipmentcat");
                    modHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsHdrMod.Add(modHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public MainModel getShipmentHeaderDetails(String comp, String shipmentno)
    {
        MainModel modHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_header.comp, shipment_header.shipmentno, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_header.shipmentcat, ";
                query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, ";
                query = query + "        shipment_header.remarks, shipment_header.status, shipment_header.createdby, shipment_header.createddate, ";
                query = query + "        shipment_header.confirmedby, shipment_header.confirmeddate, shipment_header.cancelledby, shipment_header.cancelleddate  ";
                query = query + " from   shipment_header ";
                query = query + " WHERE  shipment_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  upper(shipment_header.shipmentno) like '%" + shipmentno.ToUpper() + "%' ";
                }
                query = query + " order by shipment_header.comp, shipment_header.shipmentno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modHdr.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modHdr.GetSetshipmentcat = replaceNull(dataReader, "shipmentcat");
                    modHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modHdr;
    }

    public ArrayList getShipmentDetailsList(String comp, String shipmentno, int lineno, String itemno)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno, ";
                query = query + " 	     shipment_details.itemno, shipment_details.itemdesc, shipment_details.order_quantity, shipment_details.shipment_quantity, ";
                query = query + "        shipment_details.location, date_format(shipment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        shipment_details.remarks, shipment_details.hasinvoice  ";
                query = query + " from   shipment_details ";
                query = query + " WHERE  shipment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno = '" + shipmentno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  shipment_details.lineno = " + lineno + " ";
                }
                /*
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  shipment_details.order_lineno = " + order_lineno + " ";
                }
                */
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modShipmentDet = new MainModel();
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetshipment_quantity = replaceZero(dataReader, "shipment_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasinvoice = replaceNull(dataReader, "hasinvoice");
                    lsHdrMod.Add(modShipmentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public ArrayList getShipmentDetailsList(String comp, String shipmentno, String bpid, String startdate, String enddate, String orderno, String itemno, String status, String invoicestatus)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_header.comp, shipment_header.shipmentno, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_header.shipmentcat, ";
                query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, ";
                query = query + "        shipment_header.remarks, shipment_header.status, shipment_header.createdby, shipment_header.createddate, ";
                query = query + "        shipment_header.confirmedby, shipment_header.confirmeddate, shipment_header.cancelledby, shipment_header.cancelleddate, ";
                query = query + "        shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno, ";
                query = query + " 	     shipment_details.itemno, shipment_details.itemdesc, shipment_details.order_quantity, shipment_details.shipment_quantity, ";
                query = query + "        shipment_details.location, date_format(shipment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        shipment_details.remarks, shipment_details.hasinvoice  ";
                query = query + " from   shipment_details,  shipment_header ";
                query = query + " WHERE  shipment_details.comp is not NULL ";
                query = query + " AND    shipment_details.comp = shipment_header.comp ";
                query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno = '" + shipmentno + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.shipmentdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.shipmentdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  shipment_header.status = '" + status + "' ";
                }
                if (invoicestatus.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.hasinvoice = '" + invoicestatus + "' ";
                }
                query = query + " order by shipment_details.comp, shipment_details.shipmentno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modShipmentDet = new MainModel();
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modShipmentDet.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modShipmentDet.GetSetshipmentcat = replaceNull(dataReader, "shipmentcat");
                    modShipmentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modShipmentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modShipmentDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modShipmentDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSetstatus = replaceNull(dataReader, "status");
                    modShipmentDet.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modShipmentDet.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modShipmentDet.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modShipmentDet.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modShipmentDet.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modShipmentDet.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetshipment_quantity = replaceZero(dataReader, "shipment_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasinvoice = replaceNull(dataReader, "hasinvoice");
                    lsHdrMod.Add(modShipmentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public ArrayList getShipmentDetailsList(String comp, String shipmentno, int lineno, String orderno, int order_lineno, String itemno)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno, ";
                query = query + " 	     shipment_details.itemno, shipment_details.itemdesc, shipment_details.order_quantity, shipment_details.shipment_quantity, ";
                query = query + "        shipment_details.location, date_format(shipment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        shipment_details.remarks, shipment_details.hasinvoice  ";
                query = query + " from   shipment_details ";
                query = query + " WHERE  shipment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno = '" + shipmentno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  shipment_details.lineno = " + lineno + " ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  shipment_details.order_lineno = " + order_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modShipmentDet = new MainModel();
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetshipment_quantity = replaceZero(dataReader, "shipment_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasinvoice = replaceNull(dataReader, "hasinvoice");
                    lsHdrMod.Add(modShipmentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentDetailsList: " + e.Message.ToString());
        }
        return lsHdrMod;
    }

    public MainModel getShipmentDetailsOther(String comp, String shipmentno, String orderno, int order_lineno, String itemno, String status)
    {
        MainModel modShipmentDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno, ";
                query = query + " 	     shipment_details.itemno, shipment_details.itemdesc, shipment_details.order_quantity, shipment_details.shipment_quantity, ";
                query = query + "        shipment_details.location, date_format(shipment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        shipment_details.remarks, shipment_details.hasinvoice  ";
                query = query + " from   shipment_details ";
                query = query + " WHERE  shipment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno <> '" + shipmentno + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  shipment_details.order_lineno = " + order_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno IN (SELECT shipmentno FROM shipment_header WHERE status = '" + status + "' and comp = shipment_details.comp) ";
                }
                query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetshipment_quantity = replaceZero(dataReader, "shipment_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasinvoice = replaceNull(dataReader, "hasinvoice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentDetailsOther: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modShipmentDet;
    }

    public MainModel getShipmentDetailsDetails(String comp, String shipmentno, int lineno, String itemno)
    {
        MainModel modShipmentDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno, ";
                query = query + " 	     shipment_details.itemno, shipment_details.itemdesc, shipment_details.order_quantity, shipment_details.shipment_quantity, ";
                query = query + "        shipment_details.location, date_format(shipment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        shipment_details.remarks, shipment_details.hasinvoice  ";
                query = query + " from   shipment_details ";
                query = query + " WHERE  shipment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.comp = '" + comp + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.shipmentno = '" + shipmentno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  shipment_details.lineno = " + lineno + " ";
                }
                /*
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  shipment_details.order_lineno = " + order_lineno + " ";
                }
                */
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  shipment_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetshipment_quantity = replaceZero(dataReader, "shipment_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasinvoice = replaceNull(dataReader, "hasinvoice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getShipmentDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modShipmentDet;
    }

    public ArrayList getOrderPendingShipment(String comp, String bpid, String shipmentno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct order_header.comp, order_header.bpid, businesspartner.bpdesc, businesspartner.bpaddress, ";
                query = query + "        businesspartner.bpcontact, businesspartner.bpreference ";
                query = query + " from   order_details, order_header, businesspartner ";
                query = query + " WHERE  order_header.comp is not NULL ";
                query = query + " AND    order_header.comp = order_details.comp ";
                query = query + " AND    order_header.orderno = order_details.orderno ";
                query = query + " AND    order_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) > 0 ";
                query = query + " AND    order_header.comp = businesspartner.comp ";
                query = query + " AND    order_header.bpid = businesspartner.bpid ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  order_header.bpid = '" + bpid + "' ";
                }
                query = query + " order by order_header.comp, order_header.bpid ";
                //WriteToLogFile("MainController-getOrderPendingShipment [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdDet.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderPendingShipment: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getLineItemPendingShipment(String comp, String bpid, String shipmentno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                query = query + "        order_details.itemno, order_details.itemdesc, item.itemcat, order_details.remarks, order_details.unitprice, ";
                query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                query = query + "        order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) order_quantity, ";
                query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                query = query + " from   order_details, order_header, item ";
                query = query + " WHERE  order_header.comp is not NULL ";
                query = query + " AND    order_header.comp = order_details.comp ";
                query = query + " AND    order_header.orderno = order_details.orderno ";
                query = query + " AND    order_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) > 0 ";
                query = query + " AND    order_details.comp = item.comp ";
                query = query + " AND    order_details.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  order_header.bpid = '" + bpid + "' ";
                }
                query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingShipment: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getLineItemPendingShipment(String comp, String bpid, String shipmentno, String orderno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                query = query + "        order_details.itemno, order_details.itemdesc, item.itemcat, order_details.remarks, order_details.unitprice, ";
                query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                query = query + "        order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) order_quantity, ";
                query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                query = query + " from   order_details, order_header, item ";
                query = query + " WHERE  order_header.comp is not NULL ";
                query = query + " AND    order_header.comp = order_details.comp ";
                query = query + " AND    order_header.orderno = order_details.orderno ";
                query = query + " AND    order_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) > 0 ";
                query = query + " AND    order_details.comp = item.comp ";
                query = query + " AND    order_details.itemno = item.itemno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_details.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  order_header.bpid = '" + bpid + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderno = '" + orderno + "' ";
                }
                query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingShipment: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getLineItemPendingShipment(String comp, String bpid, String shipmentno, String orderno, String ordercat)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_details.comp, transfer_details.orderno, transfer_details.lineno, ";
                    query = query + "        transfer_details.itemno, transfer_details.itemdesc, item.itemcat, transfer_details.remarks, transfer_details.unitprice, ";
                    query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                    query = query + "        transfer_details.quantity - transfer_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = transfer_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = transfer_details.itemno and shipment_details.orderno = transfer_details.orderno and shipment_details.order_lineno = transfer_details.lineno),0) order_quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                    query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount ";
                    query = query + " from   transfer_details, transfer_header, item ";
                    query = query + " WHERE  transfer_header.comp is not NULL ";
                    query = query + " AND    transfer_header.comp = transfer_details.comp ";
                    query = query + " AND    transfer_header.orderno = transfer_details.orderno ";
                    query = query + " AND    transfer_header.orderstatus = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.quantity - transfer_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = transfer_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = transfer_details.itemno and shipment_details.orderno = transfer_details.orderno and shipment_details.order_lineno = transfer_details.lineno),0) > 0 ";
                    query = query + " AND    transfer_details.comp = item.comp ";
                    query = query + " AND    transfer_details.itemno = item.itemno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  transfer_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.compto = '" + bpid + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    if (ordercat.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordercat = '" + ordercat + "' ";
                    }
                    query = query + " order by transfer_details.comp, transfer_details.orderno, transfer_details.lineno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT order_details.comp, order_details.orderno, order_details.lineno, ";
                    query = query + "        order_details.itemno, order_details.itemdesc, item.itemcat, order_details.remarks, order_details.unitprice, ";
                    query = query + "        order_details.discamount, order_details.quantity, order_details.orderprice, ";
                    query = query + "        order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) order_quantity, ";
                    query = query + "        order_details.taxcode, order_details.taxrate, order_details.taxamount, ";
                    query = query + "        order_details.totalprice, order_details.deliverqty, order_details.invoiceamount ";
                    query = query + " from   order_details, order_header, item ";
                    query = query + " WHERE  order_header.comp is not NULL ";
                    query = query + " AND    order_header.comp = order_details.comp ";
                    query = query + " AND    order_header.orderno = order_details.orderno ";
                    query = query + " AND    order_header.orderstatus = 'CONFIRMED' ";
                    query = query + " AND    order_details.quantity - order_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = order_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = order_details.itemno and shipment_details.orderno = order_details.orderno and shipment_details.order_lineno = order_details.lineno),0) > 0 ";
                    query = query + " AND    order_details.comp = item.comp ";
                    query = query + " AND    order_details.itemno = item.itemno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  order_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  order_header.bpid = '" + bpid + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  order_header.orderno = '" + orderno + "' ";
                    }
                    if (ordercat.Trim().Length > 0)
                    {
                        query = query + " and  order_header.ordercat = '" + ordercat + "' ";
                    }
                    query = query + " order by order_details.comp, order_details.orderno, order_details.lineno ";
                }
                //WriteToLogFile("MainController-getLineItemPendingShipment [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingShipment: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public String insertShipmentHeader(MainModel oModShipment)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO shipment_header (comp, shipmentno, shipmentdate, shipmentcat, bpid, bpdesc, bpaddress, bpcontact, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?shipmentno, ?shipmentdate, ?shipmentcat, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModShipment.GetSetcomp;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModShipment.GetSetshipmentno;
                if (oModShipment.GetSetshipmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModShipment.GetSetshipmentdate,ukDtfi);
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?shipmentcat", MySqlDbType.VarChar).Value = oModShipment.GetSetshipmentcat;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModShipment.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModShipment.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModShipment.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModShipment.GetSetbpcontact;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModShipment.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModShipment.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModShipment.GetSetcreatedby;
                if (oModShipment.GetSetcreatedby.Length > 0)
                {
                    if (oModShipment.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModShipment.GetSetconfirmedby;
                if (oModShipment.GetSetconfirmedby.Length > 0)
                {
                    if (oModShipment.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModShipment.GetSetcancelledby;
                if (oModShipment.GetSetcancelledby.Length > 0)
                {
                    if (oModShipment.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else 
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertShipmentHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateShipmentHeader(MainModel oModShipment)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE shipment_header ";
                query = query + " SET    shipmentdate = ?shipmentdate, shipmentcat = ?shipmentcat, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND shipmentno = ?shipmentno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModShipment.GetSetcomp;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModShipment.GetSetshipmentno;
                if (oModShipment.GetSetshipmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModShipment.GetSetshipmentdate,ukDtfi);
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?shipmentcat", MySqlDbType.VarChar).Value = oModShipment.GetSetshipmentcat;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModShipment.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModShipment.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModShipment.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModShipment.GetSetbpcontact;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModShipment.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModShipment.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModShipment.GetSetcreatedby;
                if (oModShipment.GetSetcreatedby.Length > 0)
                {
                    if (oModShipment.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModShipment.GetSetconfirmedby;
                if (oModShipment.GetSetconfirmedby.Length > 0)
                {
                    if (oModShipment.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModShipment.GetSetcancelledby;
                if (oModShipment.GetSetcancelledby.Length > 0)
                {
                    if (oModShipment.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModShipment.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateShipmentHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertShipmentDetails(MainModel oModShipmentDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO shipment_details (comp, shipmentno, lineno, orderno, order_lineno, itemno, itemdesc, order_quantity, shipment_quantity, location, datesoh, remarks, hasinvoice) ";
                query = query + " VALUES (?comp, ?shipmentno, ?lineno, ?orderno, ?order_lineno, ?itemno, ?itemdesc, ?order_quantity, ?shipment_quantity, ?location, ?datesoh, ?remarks, ?hasinvoice) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetcomp;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetshipmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModShipmentDet.GetSetlineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModShipmentDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetitemdesc;
                cmd.Parameters.Add("?order_quantity", MySqlDbType.Int16).Value = oModShipmentDet.GetSetorder_quantity;
                cmd.Parameters.Add("?shipment_quantity", MySqlDbType.Int16).Value = oModShipmentDet.GetSetshipment_quantity;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetlocation;
                if (oModShipmentDet.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModShipmentDet.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetremarks;
                cmd.Parameters.Add("?hasinvoice", MySqlDbType.VarChar).Value = oModShipmentDet.GetSethasinvoice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertShipmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateShipmentDetails(MainModel oModShipmentDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE shipment_details ";
                query = query + " SET    orderno = ?orderno, order_lineno = ?order_lineno, itemno = ?itemno, itemdesc = ?itemdesc, order_quantity = ?order_quantity, shipment_quantity = ?shipment_quantity, remarks = ?remarks, hasinvoice = ?hasinvoice ";
                query = query + " WHERE  comp = ?comp AND shipmentno = ?shipmentno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetcomp;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetshipmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModShipmentDet.GetSetlineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModShipmentDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetitemdesc;
                cmd.Parameters.Add("?order_quantity", MySqlDbType.Int16).Value = oModShipmentDet.GetSetorder_quantity;
                cmd.Parameters.Add("?shipment_quantity", MySqlDbType.Int16).Value = oModShipmentDet.GetSetshipment_quantity;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModShipmentDet.GetSetremarks;
                cmd.Parameters.Add("?hasinvoice", MySqlDbType.VarChar).Value = oModShipmentDet.GetSethasinvoice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateShipmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteShipmentDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM shipment_details ";
                query = query + " WHERE  comp = ?comp AND shipmentno = ?shipmentno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModDet.GetSetshipmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteShipmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR SHIPMENT ***/

    /*** BEGIN FOR INVOICE ***/
    public ArrayList getParametertype(String paramtcategory)
    {
        ArrayList lsparametertype = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                query = "";
                query = query + " SELECT paramttype,paramtdesc, paramtcategory, paramstatus,paramtcode";
                query = query + " FROM   tbl_parametertype";
                query = query + " WHERE paramtcategory =  '" + paramtcategory + "' ";
                //query = query + " AND  paramtcode IS NOT NULL";


                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modParam = new MainModel();
                    modParam.GetSetparamttype = replaceNull(dataReader, "paramttype");
                    modParam.GetSetparamtcategory = replaceNull(dataReader, "paramtcategory");
                    modParam.GetSetparamstatus = replaceNull(dataReader, "paramstatus");
                    modParam.GetSetparamtcode = replaceNull(dataReader, "paramtcode");
                    modParam.GetSetparamtdesc = replaceNull(dataReader, "paramtdesc");
                    //WriteToLogFile("MainController-getParametertype: " + replaceNull(dataReader, "paramtdesc"));
                    lsparametertype.Add(modParam);
                }
                dataReader.Close();

                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getParametertype: " + e.Message.ToString());
        }
        return lsparametertype;
    }

    public ArrayList getParametertype(String inparamtcategory, String paramstatus)
    {
        ArrayList lsparametertype = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                query = "";
                query = query + " SELECT paramttype, paramtdesc, paramtcategory, paramstatus,paramtcode";
                query = query + " FROM   tbl_parametertype";
                query = query + " WHERE paramttype is not null ";
                if (inparamtcategory.Trim().Length > 0)
                {
                    query = query + " AND paramtcategory IN (" + inparamtcategory + ") ";
                }
                if (paramstatus.Trim().Length > 0)
                {
                    query = query + " AND paramstatus = '"+ paramstatus + "' ";
                }
                query = query + " ORDER BY paramttype ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modParam = new MainModel();
                    modParam.GetSetparamttype = replaceNull(dataReader, "paramttype");
                    modParam.GetSetparamtcategory = replaceNull(dataReader, "paramtcategory");
                    modParam.GetSetparamstatus = replaceNull(dataReader, "paramstatus");
                    modParam.GetSetparamtcode = replaceNull(dataReader, "paramtcode");
                    modParam.GetSetparamtdesc = replaceNull(dataReader, "paramtdesc");
                    //WriteToLogFile("MainController-getParametertype: " + replaceNull(dataReader, "paramtdesc"));
                    lsparametertype.Add(modParam);
                }
                dataReader.Close();

                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getParametertype: " + e.Message.ToString());
        }
        return lsparametertype;
    }

    public ArrayList getLineItemPendingInvoice(String comp, String bpid, String ordertype, String invoicecat, String invoicetype, String shipmentno)
    {
        ArrayList lsPendInvMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (invoicecat.Equals("SALES_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, item.itemtype, ";
                    query = query + "        order_details.unitprice, order_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, order_details.taxcode, order_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, order_header, order_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = order_details.comp ";
                    query = query + " AND    shipment_details.orderno = order_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = order_details.lineno ";
                    query = query + " AND    shipment_details.itemno = order_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    order_details.comp = order_header.comp ";
                    query = query + " AND    order_details.orderno = order_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  order_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");
                        modPendInv.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                else if (invoicecat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, transfer_details.taxcode, transfer_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, transfer_header, transfer_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = transfer_details.comp ";
                    query = query + " AND    shipment_details.orderno = transfer_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    shipment_details.itemno = transfer_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    //WriteToLogFile("MainController-getLineItemPendingInvoice [SQL]: " + query);
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                else
                {
                    query = "";
                    query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                    query = query + "        parameters.createdby, parameters.createddate ";
                    query = query + " FROM   parameters ";
                    query = query + " WHERE  parameters.comp = '000' ";
                    if (invoicetype.Trim().Length > 0)
                    {
                        query = query + " AND    parameters.paramtype = '" + invoicetype + "' ";
                    }
                    query = query + " ORDER  BY parameters.paramcode ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetparamid = replaceNull(dataReader, "paramid");
                        modPendInv.GetSetparamtype = replaceNull(dataReader, "paramtype");
                        modPendInv.GetSetparamcode = replaceNull(dataReader, "paramcode");
                        modPendInv.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                        modPendInv.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingInvoice: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendInvMod;
    }

    public ArrayList getLineItemPendingInvoice(String comp, String bpid, String ordertype, String invoicecat, String shipmentno, String orderno, String itemno)
    {
        ArrayList lsPendInvMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (invoicecat.Equals("SALES_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, item.itemtype, ";
                    query = query + "        order_details.unitprice, order_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, order_details.taxcode, order_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, order_header, order_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = order_details.comp ";
                    query = query + " AND    shipment_details.orderno = order_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = order_details.lineno ";
                    query = query + " AND    shipment_details.itemno = order_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    order_details.comp = order_header.comp ";
                    query = query + " AND    order_details.orderno = order_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  order_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");
                        modPendInv.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                else if (invoicecat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, transfer_details.taxcode, transfer_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, transfer_header, transfer_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = transfer_details.comp ";
                    query = query + " AND    shipment_details.orderno = transfer_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    shipment_details.itemno = transfer_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.orderno = '" + orderno + "' ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    //WriteToLogFile("MainController-getLineItemPendingInvoice [SQL]: " + query);
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingInvoice: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendInvMod;
    }

    public ArrayList getLineItemPendingInvoice(String comp, String bpid, String ordertype, String invoicecat, String shipmentno, int shipmentlineno, String orderno, int orderlineno, String itemno)
    {
        ArrayList lsPendInvMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (invoicecat.Equals("SALES_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, item.itemtype, ";
                    query = query + "        order_details.unitprice, order_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, order_details.taxcode, order_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, order_header, order_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = order_details.comp ";
                    query = query + " AND    shipment_details.orderno = order_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = order_details.lineno ";
                    query = query + " AND    shipment_details.itemno = order_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    order_details.comp = order_header.comp ";
                    query = query + " AND    order_details.orderno = order_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  order_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    if (shipmentlineno > 0)
                    {
                        query = query + " and  shipment_details.lineno = " + shipmentlineno + " ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  order_header.orderno = '" + orderno + "' ";
                    }
                    if (orderlineno > 0)
                    {
                        query = query + " and  order_details.lineno = " + orderlineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");
                        modPendInv.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                else if (invoicecat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, transfer_details.taxcode, transfer_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, transfer_header, transfer_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = transfer_details.comp ";
                    query = query + " AND    shipment_details.orderno = transfer_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    shipment_details.itemno = transfer_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    if (shipmentlineno > 0)
                    {
                        query = query + " and  shipment_details.lineno = " + shipmentlineno + " ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    if (orderlineno > 0)
                    {
                        query = query + " and  transfer_details.lineno = " + orderlineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    //WriteToLogFile("MainController-getLineItemPendingInvoice [SQL]: " + query);
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingInvoice: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendInvMod;
    }

    /*
    public ArrayList getLineItemPendingInvoice(String comp, String bpid, String ordertype, String invoicecat, String invoicetype, String shipmentno)
    {
        ArrayList lsPendInvMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (invoicecat.Equals("SALES_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT shipment_header.comp, date_format(shipment_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, shipment_details.shipmentno, shipment_details.lineno, ";
                    query = query + "        shipment_header.bpid, shipment_header.bpdesc, shipment_header.bpaddress, shipment_header.bpcontact, shipment_header.remarks, ";
                    query = query + "        date_format(order_header.orderdate,'%d-%m-%Y') str_orderdate, order_header.ordertype, shipment_details.orderno, shipment_details.order_lineno, shipment_details.itemno, shipment_details.itemdesc, item.itemcat, ";
                    query = query + "        order_details.unitprice, order_details.discamount, shipment_details.shipment_quantity quantity, ";
                    query = query + "        shipment_details.location, shipment_details.datesoh, order_details.taxcode, order_details.taxrate ";
                    //query = query + "        ((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) invoiceprice, order_details.taxcode, order_details.taxrate,  ";
                    //query = query + "        (((order_details.unitprice - order_details.discamount) * shipment_details.shipment_quantity) * (1+order_details.taxrate)) taxamount  ";
                    query = query + " FROM   shipment_header, shipment_details, order_header, order_details, item ";
                    query = query + " WHERE  shipment_details.comp is not NULL ";
                    query = query + " AND    shipment_details.comp = item.comp ";
                    query = query + " AND    shipment_details.itemno = item.itemno ";
                    query = query + " AND    shipment_details.comp = order_details.comp ";
                    query = query + " AND    shipment_details.orderno = order_details.orderno ";
                    query = query + " AND    shipment_details.order_lineno = order_details.lineno ";
                    query = query + " AND    shipment_details.itemno = order_details.itemno ";
                    query = query + " AND    shipment_details.hasinvoice = 'N' ";
                    query = query + " AND    shipment_details.comp = shipment_header.comp";
                    query = query + " AND    shipment_details.shipmentno = shipment_header.shipmentno ";
                    query = query + " AND    shipment_header.status = 'CONFIRMED' ";
                    query = query + " AND    order_details.comp = order_header.comp ";
                    query = query + " AND    order_details.orderno = order_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  shipment_details.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  order_header.ordertype = '" + ordertype + "' ";
                    }
                    if (shipmentno.Trim().Length > 0)
                    {
                        query = query + " and  shipment_header.shipmentno = '" + shipmentno + "' ";
                    }
                    query = query + " order by shipment_details.comp, shipment_details.shipmentno, shipment_details.lineno, shipment_details.orderno, shipment_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                        modPendInv.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendInv.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendInv.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendInv.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendInv.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendInv.GetSetitemcat = replaceNull(dataReader, "itemcat");

                        modPendInv.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendInv.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendInv.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendInv.GetSetinvoiceprice = Math.Round((modPendInv.GetSetunitprice - modPendInv.GetSetdiscamount) * modPendInv.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendInv.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendInv.GetSettaxamount = Math.Round(modPendInv.GetSetinvoiceprice * modPendInv.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendInv.GetSettotalinvoice = Math.Round(modPendInv.GetSetinvoiceprice + modPendInv.GetSettaxamount, 2, MidpointRounding.AwayFromZero);

                        modPendInv.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendInv.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendInv.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendInv.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        //get cogs for stock sales
                        if (modPendInv.GetSetitemcat.Equals("INVENTORY"))
                        {
                            MainModel modStockTransDetails = getItemStockTransactionsDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno, modPendInv.GetSetlocation, modPendInv.GetSetdatesoh, modPendInv.GetSettransno, modPendInv.GetSettrans_lineno);
                            modPendInv.GetSetunitcost = modStockTransDetails.GetSettransprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }
                        else
                        {
                            MainModel modItemMasterDetails = getItemDetails(modPendInv.GetSetcomp, modPendInv.GetSetitemno);
                            modPendInv.GetSetunitcost = modItemMasterDetails.GetSetcostprice;
                            modPendInv.GetSetcostprice = modPendInv.GetSetunitcost * modPendInv.GetSetquantity;
                        }

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                else
                {
                    query = "";
                    query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                    query = query + "        parameters.createdby, parameters.createddate ";
                    query = query + " FROM   parameters ";
                    query = query + " WHERE  parameters.comp = '000' ";
                    if (invoicetype.Trim().Length > 0)
                    {
                        query = query + " AND    parameters.paramtype = '" + invoicetype + "' ";
                    }
                    query = query + " ORDER  BY parameters.paramcode ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendInv = new MainModel();
                        modPendInv.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendInv.GetSetparamid = replaceNull(dataReader, "paramid");
                        modPendInv.GetSetparamtype = replaceNull(dataReader, "paramtype");
                        modPendInv.GetSetparamcode = replaceNull(dataReader, "paramcode");
                        modPendInv.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                        modPendInv.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                        lsPendInvMod.Add(modPendInv);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingInvoice: " + e.Message.ToString());
        }
        return lsPendInvMod;
    }
    */

    public ArrayList getInvoiceHeaderListSearching(String comp, String searchtype, String searchitem, String startdate, String enddate, String invoicecat, String invoicetype, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (searchtype.Equals("INVOICENO") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + searchitem.ToUpper() + "%' ";
                }
                if (searchtype.Equals("BPID") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + searchitem + "' ";
                }
                if (searchtype.Equals("BPDESC") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.bpdesc) like '%" + searchitem.ToUpper() + "%' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (invoicecat.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicecat = '" + invoicecat + "' ";
                }
                if (invoicetype.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicetype = '" + invoicetype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getInvoiceHeaderList(String comp, String invoiceno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getInvoiceHeaderList(String comp, String invoiceno, String bpid, String startdate, String enddate, ArrayList invoicecat, ArrayList invoicetype, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (invoicecat.Count > 0)
                {
                    String invcat = "";
                    for (int i = 0; i < invoicecat.Count; i++)
                    {
                        String str = (String)invoicecat[i];
                        if (i.Equals(0))
                        {
                            invcat = "'" + str + "'";
                        }
                        else
                        {
                            invcat = invcat + ",'" + str + "'";
                        }
                    }
                    query = query + " and  invoice_header.invoicecat in (" + invcat + ") ";
                }
                if (invoicetype.Count > 0)
                {
                    String invtyp = "";
                    for (int i = 0; i < invoicetype.Count; i++)
                    {
                        String str = (String)invoicetype[i];
                        if (i.Equals(0))
                        {
                            invtyp = "'"+str+"'";
                        }
                        else
                        {
                            invtyp = invtyp + ",'" + str + "'";
                        }
                    }
                    query = query + " and  invoice_header.invoicetype in (" + invtyp + ") ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate <= ?enddate ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getInvoiceHeaderList(String comp, String invoiceno, String bpid, String startdate, String enddate, String additionalquery, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate <= ?enddate ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getInvoiceHeaderListSum(String comp, String invoiceno, String bpid, String startdate, String enddate, String additionalquery, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, date_format(invoice_header.confirmeddate,'%m-%Y') str_confirmeddate, invoice_header.invoicecat, invoice_header.invoicetype, ";
                query = query + "        sum(invoice_header.salesamount) sum_salesamount, sum(invoice_header.discamount) sum_discamount, sum(invoice_header.invoiceamount) sum_invoiceamount, ";
                query = query + "        sum(invoice_header.taxamount) sum_taxamount, sum(invoice_header.totalamount) sum_totalamount, sum(invoice_header.payrcptamount) sum_payrcptamount ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.confirmeddate <= ?enddate ";
                }
                query = query + " group by invoice_header.comp, date_format(invoice_header.invoicedate,'%m-%Y'), invoice_header.invoicecat, invoice_header.invoicetype ";
                query = query + " order by invoice_header.comp, date_format(invoice_header.invoicedate,'%m-%Y') ";
                //WriteToLogFile("MainController-getInvoiceHeaderListSum: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "str_confirmeddate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "sum_salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "sum_discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "sum_invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "sum_taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "sum_totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "sum_payrcptamount");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderListSum: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public MainModel getInvoiceHeaderDetails(String comp, String invoiceno)
    {
        MainModel modInvHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, ifnull((select max(username) from userprofile where userid = invoice_header.createdby),'') str_createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoiceno = '" + invoiceno + "' ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetusername = replaceNull(dataReader, "str_createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modInvHdr;
    }

    public ArrayList getInvoiceDetailsList(String comp, String invoiceno, int lineno, String itemno)
    {
        ArrayList lsInvDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno, invoice_details.shipmentno, invoice_details.shipment_lineno, invoice_details.orderno, invoice_details.order_lineno, ";
                query = query + " 	     invoice_details.itemno, invoice_details.itemdesc, ifnull(item.itemcat,'') itemcat, ifnull(item.itemtype,'') itemtype, invoice_details.unitprice, invoice_details.discamount, invoice_details.quantity, invoice_details.invoiceprice, invoice_details.taxcode, ";
                query = query + "        invoice_details.taxrate, invoice_details.taxamount, invoice_details.totalinvoice  ";
                query = query + " from   invoice_details left join item on invoice_details.comp = item.comp AND  invoice_details.itemno = item.itemno ";
                query = query + " WHERE  invoice_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.invoiceno = '" + invoiceno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  invoice_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvDet = new MainModel();
                    modInvDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modInvDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modInvDet.GetSetshipment_lineno = replaceZero(dataReader, "shipment_lineno");
                    modInvDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modInvDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modInvDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modInvDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modInvDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modInvDet.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modInvDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modInvDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modInvDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modInvDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modInvDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvDet.GetSettotalinvoice = replaceDoubleZero(dataReader, "totalinvoice");
                    lsInvDetMod.Add(modInvDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsInvDetMod;
    }

    public ArrayList getInvoiceDetailsList(String comp, String invoiceno, int lineno, String shipmentno, int shipment_lineno, String orderno, int order_lineno, String itemno)
    {
        ArrayList lsInvDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno, invoice_details.shipmentno, invoice_details.shipment_lineno, invoice_details.orderno, invoice_details.order_lineno, ";
                query = query + " 	     invoice_details.itemno, invoice_details.itemdesc, invoice_details.unitprice, invoice_details.discamount, invoice_details.quantity, invoice_details.invoiceprice, invoice_details.taxcode, ";
                query = query + "        invoice_details.taxrate, invoice_details.taxamount, invoice_details.totalinvoice  ";
                query = query + " from   invoice_details ";
                query = query + " WHERE  invoice_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.invoiceno = '" + invoiceno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  invoice_details.lineno = " + lineno + " ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.shipmentno = '" + shipmentno + "' ";
                }
                if (shipment_lineno > 0)
                {
                    query = query + " and  invoice_details.shipment_lineno = " + shipment_lineno + " ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  invoice_details.order_lineno = " + order_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvDet = new MainModel();
                    modInvDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modInvDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modInvDet.GetSetshipment_lineno = replaceZero(dataReader, "shipment_lineno");
                    modInvDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modInvDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modInvDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modInvDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modInvDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modInvDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modInvDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modInvDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modInvDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvDet.GetSettotalinvoice = replaceDoubleZero(dataReader, "totalinvoice");
                    lsInvDetMod.Add(modInvDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsInvDetMod;
    }

    public ArrayList getInvoiceHeaderDetailsList(String comp, String invoiceno, String bpid, String startdate, String enddate, String shipmentno, String orderno, String itemno, String status, String paymentstatus)
    {
        ArrayList lsInvHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate ";
                query = query + " from   invoice_header, invoice_details ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " AND    invoice_header.comp = invoice_details.comp ";
                query = query + " AND    invoice_header.invoiceno = invoice_details.invoiceno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.shipmentno = '" + shipmentno + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.orderno = '" + orderno + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.itemno = '" + itemno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                if (paymentstatus.Trim().Length > 0)
                {
                    if (paymentstatus.Trim().Equals("Y"))
                    {
                        query = query + " and  invoice_header.totalamount - (case when invoice_header.invoicecat = 'JOURNAL_VOUCHER' then invoice_header.totalamount else invoice_header.payrcptamount end) = 0 ";
                    }
                    else if (paymentstatus.Trim().Equals("N"))
                    {
                        query = query + " and  invoice_header.totalamount - (case when invoice_header.invoicecat = 'JOURNAL_VOUCHER' then invoice_header.totalamount else invoice_header.payrcptamount end) > 0 ";
                    }
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno desc ";
                //WriteToLogFile("MainController-getInvoiceHeaderList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modInvHdr.GetSetInvoiceDetails = getInvoiceDetailsList(modInvHdr.GetSetcomp, modInvHdr.GetSetinvoiceno, 0, "");
                    modInvHdr.GetSetPaymentDetails = getPaymentReceiptDetailsList(modInvHdr.GetSetcomp, "", 0, modInvHdr.GetSetinvoiceno);
                    lsInvHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsInvHdrMod;
    }

    public ArrayList getInvoiceHeaderDetailsList(String comp, String fyr, String invoiceno, String bpid, String startdate, String enddate, String itemno, String status, String postingstatus)
    {
        ArrayList lsInvHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicecat, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate, ";
                query = query + "        invoice_details.itemno, invoice_details.itemdesc, invoice_details.invoiceprice, invoice_details.totalinvoice, fis_posting.tranno, fis_posting.trancode ";
                query = query + " from   invoice_header, invoice_details left join fis_posting on invoice_details.comp = fis_posting.comp and invoice_details.invoiceno = fis_posting.refno and invoice_details.lineno = fis_posting.lineno ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " AND    invoice_header.comp = invoice_details.comp ";
                query = query + " AND    invoice_header.invoiceno = invoice_details.invoiceno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  upper(invoice_header.invoiceno) like '%" + invoiceno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.itemno = '" + itemno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoicedate <= ?enddate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno ";
                //WriteToLogFile("MainController-getInvoiceHeaderList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Length > 0)
                {
                    if (startdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(startdate);
                        cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = null;
                }

                if (enddate.Length > 0)
                {
                    if (enddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(enddate);
                        cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = null;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetfyr = fyr;
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modInvHdr.GetSetitemno = replaceNull(dataReader, "itemno");
                    modInvHdr.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modInvHdr.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modInvHdr.GetSettotalinvoice = replaceDoubleZero(dataReader, "totalinvoice");
                    modInvHdr.GetSettranno = replaceNull(dataReader, "tranno");
                    modInvHdr.GetSettrancode = replaceNull(dataReader, "trancode");
                    lsInvHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsInvHdrMod;
    }

    public MainModel getInvoiceDetailsDetails(String comp, String invoiceno, int lineno, String shipmentno, int shipment_lineno, String itemno, String status)
    {
        MainModel modInvDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno, invoice_details.shipmentno, invoice_details.shipment_lineno, invoice_details.orderno, invoice_details.order_lineno, ";
                query = query + " 	     invoice_details.itemno, invoice_details.itemdesc, invoice_details.unitprice, invoice_details.discamount, invoice_details.quantity, invoice_details.invoiceprice, invoice_details.taxcode, ";
                query = query + "        invoice_details.taxrate, invoice_details.taxamount, invoice_details.totalinvoice  ";
                query = query + " from   invoice_details ";
                query = query + " WHERE  invoice_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.invoiceno = '" + invoiceno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  invoice_details.lineno = " + lineno + " ";
                }
                if (shipmentno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.shipmentno = '" + shipmentno + "' ";
                }
                if (shipment_lineno > 0)
                {
                    query = query + " and  invoice_details.shipment_lineno = " + shipment_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_details.invoiceno IN (SELECT invoiceno FROM invoice_header WHERE status = '" + status + "' and comp = invoice_details.comp) ";
                }
                query = query + " order by invoice_details.comp, invoice_details.invoiceno, invoice_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modInvDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modInvDet.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    modInvDet.GetSetshipment_lineno = replaceZero(dataReader, "shipment_lineno");
                    modInvDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modInvDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modInvDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modInvDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modInvDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modInvDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modInvDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modInvDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modInvDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvDet.GetSettotalinvoice = replaceDoubleZero(dataReader, "totalinvoice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoiceDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modInvDet;
    }

    public String insertInvoiceHeader(MainModel oModInvoice)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO invoice_header (comp, invoiceno, invoicedate, invoicecat, invoicetype, invoiceterm, bpid, bpdesc, bpaddress, bpcontact, salesamount, discamount, invoiceamount, taxamount, totalamount, payrcptamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?invoiceno, ?invoicedate, ?invoicecat, ?invoicetype, ?invoiceterm, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?salesamount, ?discamount, ?invoiceamount, ?taxamount, ?totalamount, ?payrcptamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoice.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceno;
                if (oModInvoice.GetSetinvoicedate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetinvoicedate,ukDtfi);
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?invoicecat", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicecat;
                cmd.Parameters.Add("?invoicetype", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicetype;
                cmd.Parameters.Add("?invoiceterm", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceterm;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpcontact;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModInvoice.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModInvoice.GetSetdiscamount;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModInvoice.GetSetinvoiceamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModInvoice.GetSetpayrcptamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModInvoice.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModInvoice.GetSettotalamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModInvoice.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModInvoice.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcreatedby;
                if (oModInvoice.GetSetcreatedby.Length > 0)
                {
                    if (oModInvoice.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModInvoice.GetSetconfirmedby;
                if (oModInvoice.GetSetconfirmedby.Length > 0)
                {
                    if (oModInvoice.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcancelledby;
                if (oModInvoice.GetSetcancelledby.Length > 0)
                {
                    if (oModInvoice.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertInvoiceHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertInvoiceHeader2(MainModel oModInvoice)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO invoice_header (comp, invoiceno, invoicedate, invoicecat, invoicetype, invoiceterm, bpid, bpdesc, bpaddress, bpcontact, salesamount, discamount, invoiceamount, taxamount, totalamount, payrcptamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?invoiceno, ?invoicedate, ?invoicecat, ?invoicetype, ?invoiceterm, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?salesamount, ?discamount, ?invoiceamount, ?taxamount, ?totalamount, ?payrcptamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoice.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceno;
                if (oModInvoice.GetSetinvoicedate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetinvoicedate, ukDtfi);
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?invoicecat", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicecat;
                cmd.Parameters.Add("?invoicetype", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicetype;
                cmd.Parameters.Add("?invoiceterm", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceterm;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpcontact;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModInvoice.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModInvoice.GetSetdiscamount;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModInvoice.GetSetinvoiceamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModInvoice.GetSetpayrcptamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModInvoice.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModInvoice.GetSettotalamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModInvoice.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModInvoice.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcreatedby;
                if (oModInvoice.GetSetcreatedby.Length > 0)
                {
                    if (oModInvoice.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcreateddate, ukDtfi);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModInvoice.GetSetconfirmedby;
                if (oModInvoice.GetSetconfirmedby.Length > 0)
                {
                    if (oModInvoice.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetconfirmeddate, ukDtfi);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcancelledby;
                if (oModInvoice.GetSetcancelledby.Length > 0)
                {
                    if (oModInvoice.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcancelleddate, ukDtfi);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertInvoiceHeader2: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateInvoiceHeader(MainModel oModInvoice)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE invoice_header ";
                query = query + " SET    invoicedate = ?invoicedate, invoicecat = ?invoicecat, invoicetype = ?invoicetype, invoiceterm = ?invoiceterm, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, salesamount = ?salesamount, discamount = ?discamount, invoiceamount = ?invoiceamount, taxamount = ?taxamount, totalamount = ?totalamount, payrcptamount = ?payrcptamount, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND invoiceno = ?invoiceno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoice.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceno;
                if (oModInvoice.GetSetinvoicedate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetinvoicedate,ukDtfi);
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?invoicecat", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicecat;
                cmd.Parameters.Add("?invoicetype", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoicetype;
                cmd.Parameters.Add("?invoiceterm", MySqlDbType.VarChar).Value = oModInvoice.GetSetinvoiceterm;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModInvoice.GetSetbpcontact;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModInvoice.GetSetsalesamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModInvoice.GetSetdiscamount;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModInvoice.GetSetinvoiceamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModInvoice.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModInvoice.GetSettotalamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModInvoice.GetSetpayrcptamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModInvoice.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModInvoice.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcreatedby;
                if (oModInvoice.GetSetcreatedby.Length > 0)
                {
                    if (oModInvoice.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModInvoice.GetSetconfirmedby;
                if (oModInvoice.GetSetconfirmedby.Length > 0)
                {
                    if (oModInvoice.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModInvoice.GetSetcancelledby;
                if (oModInvoice.GetSetcancelledby.Length > 0)
                {
                    if (oModInvoice.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModInvoice.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateInvoiceHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateInvoiceHeaderInfo(String sComp, String sInvoiceNo)
    {
        String result = "Y";

        MainModel oModInvHdr = new MainModel();
        ArrayList lsInvoiceLineItem = new ArrayList();

        try
        {
            oModInvHdr = getInvoiceHeaderDetails(sComp, sInvoiceNo);
            if (oModInvHdr.GetSetinvoiceno.Length > 0)
            {
                double salesamount = 0, discamount = 0, invoiceamount = 0, taxamount = 0, totalamount = 0;
                lsInvoiceLineItem = getInvoiceDetailsList(sComp, sInvoiceNo, 0, "");
                for (int i = 0; i < lsInvoiceLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsInvoiceLineItem[i];
                    salesamount = salesamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity) ;
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    invoiceamount = invoiceamount + oModLineItem.GetSetinvoiceprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalinvoice;
                }
                oModInvHdr.GetSetsalesamount = salesamount;
                oModInvHdr.GetSetdiscamount = discamount;
                oModInvHdr.GetSetinvoiceamount = invoiceamount;
                oModInvHdr.GetSettaxamount = taxamount;
                oModInvHdr.GetSettotalamount = totalamount;
                //update order header
                result = updateInvoiceHeader(oModInvHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateInvoiceHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertInvoiceDetails(MainModel oModInvoiceDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO invoice_details (comp, invoiceno, lineno, shipmentno, shipment_lineno, orderno, order_lineno, itemno, itemdesc, unitcost, unitprice, discamount, quantity, costprice, invoiceprice, taxcode, taxrate, taxamount, totalinvoice) ";
                query = query + " VALUES (?comp, ?invoiceno, ?lineno, ?shipmentno, ?shipment_lineno, ?orderno, ?order_lineno, ?itemno, ?itemdesc, ?unitcost, ?unitprice, ?discamount, ?quantity, ?costprice, ?invoiceprice, ?taxcode, ?taxrate, ?taxamount, ?totalinvoice) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetinvoiceno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetlineno;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetshipmentno;
                cmd.Parameters.Add("?shipment_lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetshipment_lineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetitemdesc;
                cmd.Parameters.Add("?unitcost", MySqlDbType.Double).Value = oModInvoiceDet.GetSetunitcost;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModInvoiceDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetquantity;
                cmd.Parameters.Add("?costprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetcostprice;
                cmd.Parameters.Add("?invoiceprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetinvoiceprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModInvoiceDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModInvoiceDet.GetSettaxamount;
                cmd.Parameters.Add("?totalinvoice", MySqlDbType.Double).Value = oModInvoiceDet.GetSettotalinvoice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertInvoiceDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateInvoiceDetails(MainModel oModInvoiceDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE invoice_details ";
                query = query + " SET shipmentno = ?shipmentno, shipment_lineno = ?shipment_lineno, orderno = ?orderno, order_lineno = ?order_lineno, itemno = ?itemno, itemdesc = ?itemdesc, unitcost = ?unitcost, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, costprice = ?costprice, invoiceprice = ?invoiceprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalinvoice = ?totalinvoice ";
                query = query + " WHERE  comp = ?comp AND invoiceno = ?invoiceno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetinvoiceno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetlineno;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetshipmentno;
                cmd.Parameters.Add("?shipment_lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetshipment_lineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetitemdesc;
                cmd.Parameters.Add("?unitcost", MySqlDbType.Double).Value = oModInvoiceDet.GetSetunitcost;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModInvoiceDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetquantity;
                cmd.Parameters.Add("?costprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetcostprice;
                cmd.Parameters.Add("?invoiceprice", MySqlDbType.Double).Value = oModInvoiceDet.GetSetinvoiceprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModInvoiceDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModInvoiceDet.GetSettaxamount;
                cmd.Parameters.Add("?totalinvoice", MySqlDbType.Double).Value = oModInvoiceDet.GetSettotalinvoice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateInvoiceDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteInvoiceDetails(MainModel oModInvoiceDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM invoice_details ";
                query = query + " WHERE  comp = ?comp AND invoiceno = ?invoiceno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetcomp;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModInvoiceDet.GetSetinvoiceno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModInvoiceDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteInvoiceDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getRevenueListDetails(String comp, String selyear, String selmonth, String selday, String status, String additionalquery)
    {
        ArrayList lsRevMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, date_format(invoice_header.confirmeddate,'%d-%m-%Y') str_confirmeddate, invoice_header.invoicecat, invoice_header.invoicetype, ";
                query = query + "        invoice_details.invoiceno, invoice_details.itemno, invoice_details.itemdesc, (invoice_details.unitprice - invoice_details.discamount) unit_price, invoice_details.quantity, ";
                query = query + "        invoice_details.invoiceprice, invoice_details.taxamount, invoice_details.totalinvoice ";
                query = query + " FROM   invoice_header, invoice_details ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " AND    invoice_header.comp = invoice_details.comp ";
                query = query + " AND    invoice_header.invoiceno = invoice_details.invoiceno ";

                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (selyear.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + selyear + "'";
                }
                if (selmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m') = '" + selmonth + "'";
                }
                if (selday.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%d') = '" + selday + "'";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                query = query + " order by invoice_header.comp, date_format(invoice_header.invoicedate,'%d-%m-%Y'), invoice_details.invoiceno, invoice_details.itemno ";
                //WriteToLogFile("MainController-getRevenueListDetails: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modRevDet = new MainModel();
                    modRevDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modRevDet.GetSetconfirmeddate = replaceNull(dataReader, "str_confirmeddate");
                    modRevDet.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modRevDet.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modRevDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modRevDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modRevDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modRevDet.GetSetunitprice = replaceDoubleZero(dataReader, "unit_price");
                    modRevDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modRevDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modRevDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modRevDet.GetSettotalinvoice = replaceDoubleZero(dataReader, "totalinvoice");
                    lsRevMod.Add(modRevDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getRevenuListDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsRevMod;
    }

    /*** END FOR INVOICE ***/

    /*** BEGIN FOR PAYMENT RECEIPT ***/

    public ArrayList getLineItemPendingPaymentReceipt(String comp, String bpid, String bpdesc, String invoiceno)
    {
        ArrayList lsPendPayRcptMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.invoiceno, date_format(invoice_header.invoicedate,'%d-%m-%Y') str_invoicedate, invoice_header.invoicetype, invoice_header.invoiceterm, invoice_header.bpid, ";
                query = query + "        invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, invoice_header.salesamount, invoice_header.discamount, invoice_header.invoiceamount, ";
                query = query + "        invoice_header.taxamount, invoice_header.totalamount, invoice_header.payrcptamount, invoice_header.remarks, invoice_header.status, invoice_header.createdby, invoice_header.createddate, ";
                query = query + "        invoice_header.confirmedby, invoice_header.confirmeddate, invoice_header.cancelledby, invoice_header.cancelleddate  ";
                query = query + " FROM   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " AND    invoice_header.status = 'CONFIRMED' ";
                query = query + " AND    invoice_header.totalamount - (case when invoice_header.invoicecat = 'JOURNAL_VOUCHER' then invoice_header.totalamount else invoice_header.payrcptamount end) > 0 ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoiceno = '" + invoiceno + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpdesc = ?bpdesc ";
                }
                query = query + " order by invoice_header.comp, invoice_header.invoiceno, invoice_header.invoicedate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = bpdesc;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();

                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modInvHdr.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modInvHdr.GetSetinvoicetype = replaceNull(dataReader, "invoicetype");
                    modInvHdr.GetSetinvoiceterm = replaceNull(dataReader, "invoiceterm");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    modInvHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modInvHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");

                    lsPendPayRcptMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingPaymentReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendPayRcptMod;
    }

    public ArrayList getInvoicePaymentReceiptHeaderListSumByBP(String comp, String invoiceno, String bpid, String fyr, String status)
    {
        ArrayList lsPayRcptHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList lsParamType = getParametertype("INCOME");
                ArrayList revenuetype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    revenuetype.Add(modParam.GetSetparamttype);
                }
                String revtyp = "";
                for (int i = 0; i < revenuetype.Count; i++)
                {
                    String str = (String)revenuetype[i];
                    if (i.Equals(0))
                    {
                        revtyp = "'" + str + "'";
                    }
                    else
                    {
                        revtyp = revtyp + ",'" + str + "'";
                    }
                }

                query = "";
                query = query + " SELECT invoice_header.comp, invoice_header.bpid, invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact, SUM(invoice_header.totalamount) inv_amount, SUM(invoice_header.payrcptamount) pay_amount ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " and  (invoice_header.invoicecat in ('SALES_INVOICE','TRANSFER_INVOICE') or (invoice_header.invoicecat = 'RECEIPT_VOUCHER' and invoice_header.invoicetype in (" + revtyp + "))) ";

                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.invoiceno = '" + invoiceno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + bpid + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM fiscalperiod where comp = '" + comp + "' and  financeyear = '" + fyr + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " group by invoice_header.comp, invoice_header.bpid, invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact ";
                query = query + " order by invoice_header.comp, invoice_header.bpid, invoice_header.bpdesc, invoice_header.bpaddress, invoice_header.bpcontact ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                //WriteToLogFile("MainController-getInvoicePaymentReceiptHeaderListSumByBP [SQL]: " + query);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "inv_amount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "pay_amount");
                    lsPayRcptHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInvoicePaymentReceiptHeaderListSumByBP: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayRcptHdrMod;
    }

    public ArrayList getPaymentReceiptHeaderList(String comp, String payrcptno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsPayRcptHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') str_payrcptdate, payrcpt_header.payrcpttype, payrcpt_header.bpid, ";
                query = query + "        payrcpt_header.bpdesc, payrcpt_header.bpaddress, payrcpt_header.bpcontact, payrcpt_header.invoiceamount, payrcpt_header.payrcptamount, ";
                query = query + "        payrcpt_header.remarks, payrcpt_header.status, payrcpt_header.createdby, payrcpt_header.createddate, ";
                query = query + "        payrcpt_header.confirmedby, payrcpt_header.confirmeddate, payrcpt_header.cancelledby, payrcpt_header.cancelleddate  ";
                query = query + " from   payrcpt_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.payrcptno = '" + payrcptno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.bpid = '" + bpid + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.confirmeddate <= ?enddate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_header.comp, payrcpt_header.payrcptno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modInvHdr.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    modInvHdr.GetSetpayrcpttype = replaceNull(dataReader, "payrcpttype");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsPayRcptHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayRcptHdrMod;
    }

    public ArrayList getPaymentReceiptHeaderDetailsList(String comp, String payrcptno, String bpid, int lineno, String invoiceno, String status)
    {
        ArrayList lsPayRcptDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') str_payrcptdate, payrcpt_header.payrcpttype, payrcpt_header.bpid, ";
                query = query + "        payrcpt_header.bpdesc, payrcpt_header.bpaddress, payrcpt_header.bpcontact, payrcpt_header.invoiceamount, payrcpt_header.payrcptamount, ";
                query = query + "        payrcpt_header.remarks, payrcpt_header.status, payrcpt_header.createdby, payrcpt_header.createddate, ";
                query = query + "        payrcpt_header.confirmedby, payrcpt_header.confirmeddate, payrcpt_header.cancelledby, payrcpt_header.cancelleddate,  ";
                query = query + "        payrcpt_details.lineno, payrcpt_details.invoiceno, date_format(payrcpt_details.invoicedate,'%d-%m-%Y') str_invoicedate, ";
                query = query + " 	     payrcpt_details.paytype, payrcpt_details.payrefno, payrcpt_details.payremarks, payrcpt_details.invoiceprice, payrcpt_details.payrcptprice ";
                query = query + " from   payrcpt_header, payrcpt_details ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp = payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno = payrcpt_details.payrcptno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.payrcptno = '" + payrcptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  payrcpt_details.lineno = " + lineno + " ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.invoiceno = '" + invoiceno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPayRcptDet = new MainModel();
                    modPayRcptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayRcptDet.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modPayRcptDet.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    modPayRcptDet.GetSetpayrcpttype = replaceNull(dataReader, "payrcpttype");
                    modPayRcptDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPayRcptDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPayRcptDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modPayRcptDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modPayRcptDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modPayRcptDet.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modPayRcptDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modPayRcptDet.GetSetstatus = replaceNull(dataReader, "status");
                    modPayRcptDet.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modPayRcptDet.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modPayRcptDet.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modPayRcptDet.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modPayRcptDet.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modPayRcptDet.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modPayRcptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayRcptDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modPayRcptDet.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modPayRcptDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayRcptDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayRcptDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayRcptDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modPayRcptDet.GetSetpayrcptprice = replaceDoubleZero(dataReader, "payrcptprice");
                    lsPayRcptDetMod.Add(modPayRcptDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayRcptDetMod;
    }

    public MainModel getPaymentReceiptHeaderDetailsDetails(String comp, String payrcptno, String bpid, int lineno, String invoiceno, String status)
    {
        MainModel modPayRcptDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') str_payrcptdate, payrcpt_header.payrcpttype, payrcpt_header.bpid, ";
                query = query + "        payrcpt_header.bpdesc, payrcpt_header.bpaddress, payrcpt_header.bpcontact, payrcpt_header.invoiceamount, payrcpt_header.payrcptamount, ";
                query = query + "        payrcpt_header.remarks, payrcpt_header.status, payrcpt_header.createdby, payrcpt_header.createddate, ";
                query = query + "        payrcpt_header.confirmedby, payrcpt_header.confirmeddate, payrcpt_header.cancelledby, payrcpt_header.cancelleddate,  ";
                query = query + "        payrcpt_details.lineno, payrcpt_details.invoiceno, date_format(payrcpt_details.invoicedate,'%d-%m-%Y') str_invoicedate, ";
                query = query + " 	     payrcpt_details.paytype, payrcpt_details.payrefno, payrcpt_details.payremarks, payrcpt_details.invoiceprice, payrcpt_details.payrcptprice ";
                query = query + " from   payrcpt_header, payrcpt_details ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp = payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno = payrcpt_details.payrcptno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.payrcptno = '" + payrcptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  payrcpt_details.lineno = " + lineno + " ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.invoiceno = '" + invoiceno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modPayRcptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayRcptDet.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modPayRcptDet.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    modPayRcptDet.GetSetpayrcpttype = replaceNull(dataReader, "payrcpttype");
                    modPayRcptDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPayRcptDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPayRcptDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modPayRcptDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modPayRcptDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modPayRcptDet.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modPayRcptDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modPayRcptDet.GetSetstatus = replaceNull(dataReader, "status");
                    modPayRcptDet.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modPayRcptDet.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modPayRcptDet.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modPayRcptDet.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modPayRcptDet.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modPayRcptDet.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modPayRcptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayRcptDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modPayRcptDet.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modPayRcptDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayRcptDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayRcptDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayRcptDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modPayRcptDet.GetSetpayrcptprice = replaceDoubleZero(dataReader, "payrcptprice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptHeaderDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modPayRcptDet;
    }

    public MainModel getPaymentReceiptHeaderDetails(String comp, String payrcptno)
    {
        MainModel modInvHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') str_payrcptdate, payrcpt_header.payrcpttype, payrcpt_header.bpid, ";
                query = query + "        payrcpt_header.bpdesc, payrcpt_header.bpaddress, payrcpt_header.bpcontact, payrcpt_header.invoiceamount, payrcpt_header.payrcptamount, ";
                query = query + "        payrcpt_header.remarks, payrcpt_header.status, payrcpt_header.createdby, payrcpt_header.createddate, ";
                query = query + "        payrcpt_header.confirmedby, payrcpt_header.confirmeddate, payrcpt_header.cancelledby, payrcpt_header.cancelleddate  ";
                query = query + " from   payrcpt_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.payrcptno = '" + payrcptno + "' ";
                }
                query = query + " order by payrcpt_header.comp, payrcpt_header.payrcptno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modInvHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modInvHdr.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modInvHdr.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    modInvHdr.GetSetpayrcpttype = replaceNull(dataReader, "payrcpttype");
                    modInvHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modInvHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modInvHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modInvHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modInvHdr.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modInvHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modInvHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modInvHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInvHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInvHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modInvHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modInvHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modInvHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modInvHdr;
    }

    public ArrayList getPaymentReceiptDetailsList(String comp, String payrcptno, int lineno, String invoiceno)
    {
        ArrayList lsPayRcptDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno, payrcpt_details.invoiceno, date_format(payrcpt_details.invoicedate,'%d-%m-%Y') str_invoicedate, ";
                query = query + " 	     payrcpt_details.paytype, payrcpt_details.payrefno, payrcpt_details.payremarks, payrcpt_details.invoiceprice, payrcpt_details.payrcptprice ";
                query = query + " from   payrcpt_details ";
                query = query + " WHERE  payrcpt_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.payrcptno = '" + payrcptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  payrcpt_details.lineno = " + lineno + " ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.invoiceno = '" + invoiceno + "' ";
                }
                query = query + " order by payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPayRcptDet = new MainModel();
                    modPayRcptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayRcptDet.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modPayRcptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayRcptDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modPayRcptDet.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modPayRcptDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayRcptDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayRcptDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayRcptDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modPayRcptDet.GetSetpayrcptprice = replaceDoubleZero(dataReader, "payrcptprice");
                    lsPayRcptDetMod.Add(modPayRcptDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayRcptDetMod;
    }

    public MainModel getPaymentReceiptDetailsDetails(String comp, String payrcptno, int lineno, String invoiceno, String status)
    {
        MainModel modPayRcptDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno, payrcpt_details.invoiceno, date_format(payrcpt_details.invoicedate,'%d-%m-%Y') str_invoicedate, ";
                query = query + " 	     payrcpt_details.paytype, payrcpt_details.payrefno, payrcpt_details.payremarks, payrcpt_details.invoiceprice, payrcpt_details.payrcptprice ";
                query = query + " from   payrcpt_details ";
                query = query + " WHERE  payrcpt_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (payrcptno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.payrcptno = '" + payrcptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  payrcpt_details.lineno = " + lineno + " ";
                }
                if (invoiceno.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.invoiceno = '" + invoiceno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.payrcptno IN (SELECT payrcptno FROM payrcpt_header WHERE status = '" + status + "' and comp = payrcpt_details.comp) ";
                }
                query = query + " order by payrcpt_details.comp, payrcpt_details.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modPayRcptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayRcptDet.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    modPayRcptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayRcptDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modPayRcptDet.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    modPayRcptDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayRcptDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayRcptDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayRcptDet.GetSetinvoiceprice = replaceDoubleZero(dataReader, "invoiceprice");
                    modPayRcptDet.GetSetpayrcptprice = replaceDoubleZero(dataReader, "payrcptprice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modPayRcptDet;
    }

    public ArrayList getPaymentReceiptCashFlowList(String comp, String openingdate, String closingdate, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno paymentno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(payrcpt_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(payrcpt_header.payrcpttype,': ',invoice_header.invoicetype) paymenttype, ";
                query = query + "        payrcpt_header.bpid, payrcpt_header.bpdesc, payrcpt_details.lineno, ";
                query = query + "        payrcpt_details.invoiceno paydetno, payrcpt_details.paytype, payrcpt_details.payrefno, ";
                query = query + "        payrcpt_details.payremarks, payrcpt_details.payrcptprice payamount ";
                query = query + " from   payrcpt_header, payrcpt_details, invoice_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp =  payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno =  payrcpt_details.payrcptno ";
                query = query + " AND	   payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND	   payrcpt_details.invoiceno = invoice_header.invoiceno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    //query = query + " and  payrcpt_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  payrcpt_header.confirmeddate >= ?openingdate ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    //query = query + " and  payrcpt_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  payrcpt_header.confirmeddate <= ?closingdate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_header.comp, payrcpt_header.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (openingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(openingdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (closingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptCashFlowList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public ArrayList getPaymentReceiptCashInList(String comp, String selyear, String selmonth, String selday, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno paymentno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(payrcpt_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(payrcpt_header.payrcpttype,': ',invoice_header.invoicetype) paymenttype, ";
                query = query + "        payrcpt_header.bpid, payrcpt_header.bpdesc, payrcpt_details.lineno, ";
                query = query + "        payrcpt_details.invoiceno paydetno, payrcpt_details.paytype, payrcpt_details.payrefno, ";
                query = query + "        payrcpt_details.payremarks, payrcpt_details.payrcptprice payamount, ";
                query = query + "        payrcpt_details.invoiceno, date_format(payrcpt_details.invoicedate,'%d-%m-%Y %H:%i:%s') invoicedate ";
                query = query + " from   payrcpt_header, payrcpt_details, invoice_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp =  payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno =  payrcpt_details.payrcptno ";
                query = query + " AND	   payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND	   payrcpt_details.invoiceno = invoice_header.invoiceno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (selyear.Trim().Length > 0)
                {
                    query = query + " and  date_format(payrcpt_header.confirmeddate,'%Y') = '" + selyear + "'";
                }
                if (selmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(payrcpt_header.confirmeddate,'%m') = '" + selmonth + "'";
                }
                if (selday.Trim().Length > 0)
                {
                    query = query + " and  date_format(payrcpt_header.confirmeddate,'%d') = '" + selday + "'";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_header.comp, payrcpt_header.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    modPaymentDet.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    modPaymentDet.GetSetinvoicedate = replaceNull(dataReader, "invoicedate");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptCashInList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public ArrayList getPaymentReceiptCashFlowList(String comp, String fyr, String startdate, String enddate, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno paymentno, date_format(payrcpt_header.payrcptdate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(payrcpt_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(invoice_header.invoicecat,': ',payrcpt_details.payrefno) paymenttype, ";
                query = query + "        payrcpt_header.bpid, payrcpt_header.bpdesc, payrcpt_details.lineno, ";
                query = query + "        payrcpt_details.invoiceno paydetno, payrcpt_details.paytype, payrcpt_details.payrefno, ";
                query = query + "        payrcpt_details.payremarks, payrcpt_details.payrcptprice payamount, fis_posting.tranno, fis_posting.trancode ";
                query = query + " from   payrcpt_header, invoice_header, payrcpt_details left join fis_posting on payrcpt_details.comp = fis_posting.comp and payrcpt_details.payrcptno = fis_posting.refno and payrcpt_details.lineno = fis_posting.lineno ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp =  payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno =  payrcpt_details.payrcptno ";
                query = query + " AND	   payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND	   payrcpt_details.invoiceno = invoice_header.invoiceno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.comp = '" + comp + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.confirmeddate <= ?enddate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                query = query + " order by payrcpt_header.comp, payrcpt_header.payrcptno, payrcpt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetfyr = fyr;
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    modPaymentDet.GetSettranno = replaceNull(dataReader, "tranno");
                    modPaymentDet.GetSettrancode = replaceNull(dataReader, "trancode");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentReceiptCashFlowList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public String insertPaymentReceiptHeader(MainModel oModPayRcpt)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO payrcpt_header (comp, payrcptno, payrcptdate, payrcpttype, bpid, bpdesc, bpaddress, bpcontact, invoiceamount, payrcptamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?payrcptno, ?payrcptdate, ?payrcpttype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?invoiceamount, ?payrcptamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcptno;
                if (oModPayRcpt.GetSetpayrcptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetpayrcptdate,ukDtfi);
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?payrcpttype", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcpttype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpcontact;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetinvoiceamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetpayrcptamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcreatedby;
                if (oModPayRcpt.GetSetcreatedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetconfirmedby;
                if (oModPayRcpt.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcancelledby;
                if (oModPayRcpt.GetSetcancelledby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentReceiptHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertPaymentReceiptHeader2(MainModel oModPayRcpt)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO payrcpt_header (comp, payrcptno, payrcptdate, payrcpttype, bpid, bpdesc, bpaddress, bpcontact, invoiceamount, payrcptamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?payrcptno, ?payrcptdate, ?payrcpttype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?invoiceamount, ?payrcptamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcptno;
                if (oModPayRcpt.GetSetpayrcptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetpayrcptdate, ukDtfi);
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?payrcpttype", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcpttype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpcontact;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetinvoiceamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetpayrcptamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcreatedby;
                if (oModPayRcpt.GetSetcreatedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcreateddate, ukDtfi);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetconfirmedby;
                if (oModPayRcpt.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetconfirmeddate, ukDtfi);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcancelledby;
                if (oModPayRcpt.GetSetcancelledby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcancelleddate, ukDtfi);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentReceiptHeader2: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentReceiptHeader(MainModel oModPayRcpt)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE payrcpt_header ";
                query = query + " SET    payrcptdate = ?payrcptdate, payrcpttype = ?payrcpttype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, invoiceamount = ?invoiceamount, payrcptamount = ?payrcptamount, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND payrcptno = ?payrcptno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcptno;
                if (oModPayRcpt.GetSetpayrcptdate.Trim().Length > 0)
                {
                    //WriteToLogFile("MainController-updatePaymentReceiptHeader: oModPayRcpt.GetSetpayrcptdate - " + oModPayRcpt.GetSetpayrcptdate);
                    DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetpayrcptdate,ukDtfi);
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = datetime;
                    //WriteToLogFile("MainController-updatePaymentReceiptHeader: datetime - " + datetime);
                }
                else
                {
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?payrcpttype", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetpayrcpttype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetbpcontact;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetinvoiceamount;
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModPayRcpt.GetSetpayrcptamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcreatedby;
                if (oModPayRcpt.GetSetcreatedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetconfirmedby;
                if (oModPayRcpt.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayRcpt.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayRcpt.GetSetcancelledby;
                if (oModPayRcpt.GetSetcancelledby.Length > 0)
                {
                    if (oModPayRcpt.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayRcpt.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentReceiptHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentReceiptHeaderInfo(String sComp, String sPayRcptNo)
    {
        String result = "Y";

        MainModel oModPayRcptHdr = new MainModel();
        ArrayList lsPayRcptLineItem = new ArrayList();

        try
        {
            oModPayRcptHdr = getPaymentReceiptHeaderDetails(sComp, sPayRcptNo);
            if (oModPayRcptHdr.GetSetpayrcptno.Length > 0)
            {
                double invoiceamount = 0, payrcptamount = 0, taxamount = 0, totalamount = 0;
                lsPayRcptLineItem = getPaymentReceiptDetailsList(sComp, sPayRcptNo, 0, "");
                for (int i = 0; i < lsPayRcptLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsPayRcptLineItem[i];
                    invoiceamount = invoiceamount + oModLineItem.GetSetinvoiceprice;
                    payrcptamount = payrcptamount + oModLineItem.GetSetpayrcptprice;
                }
                oModPayRcptHdr.GetSetinvoiceamount = invoiceamount;
                oModPayRcptHdr.GetSetpayrcptamount = payrcptamount;
                //update Payment Receipt header
                result = updatePaymentReceiptHeader(oModPayRcptHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentReceiptHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertPaymentReceiptDetails(MainModel oModPayRcptDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO payrcpt_details (comp, payrcptno, lineno, invoiceno, invoicedate, paytype, payrefno, payremarks, invoiceprice, payrcptprice) ";
                query = query + " VALUES (?comp, ?payrcptno, ?lineno, ?invoiceno, ?invoicedate, ?paytype, ?payrefno, ?payremarks, ?invoiceprice, ?payrcptprice) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayrcptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayRcptDet.GetSetlineno;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetinvoiceno;
                if (oModPayRcptDet.GetSetinvoicedate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayRcptDet.GetSetinvoicedate,ukDtfi);
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpaytype;
                cmd.Parameters.Add("?payrefno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayrefno;
                cmd.Parameters.Add("?payremarks", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayremarks;
                cmd.Parameters.Add("?invoiceprice", MySqlDbType.Double).Value = oModPayRcptDet.GetSetinvoiceprice;
                cmd.Parameters.Add("?payrcptprice", MySqlDbType.Double).Value = oModPayRcptDet.GetSetpayrcptprice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentReceiptDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentReceiptDetails(MainModel oModPayRcptDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE payrcpt_details ";
                query = query + " SET    invoiceno = ?invoiceno, invoicedate = ?invoicedate, paytype = ?paytype, payrefno = ?payrefno, payremarks = ?payremarks, invoiceprice = ?invoiceprice, payrcptprice = ?payrcptprice ";
                query = query + " WHERE comp = ?comp  AND payrcptno = ?payrcptno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayrcptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayRcptDet.GetSetlineno;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetinvoiceno;
                if (oModPayRcptDet.GetSetinvoicedate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayRcptDet.GetSetinvoicedate,ukDtfi);
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpaytype;
                cmd.Parameters.Add("?payrefno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayrefno;
                cmd.Parameters.Add("?payremarks", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayremarks;
                cmd.Parameters.Add("?invoiceprice", MySqlDbType.Double).Value = oModPayRcptDet.GetSetinvoiceprice;
                cmd.Parameters.Add("?payrcptprice", MySqlDbType.Double).Value = oModPayRcptDet.GetSetpayrcptprice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentReceiptDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deletePaymentReceiptDetails(MainModel oModPayRcptDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM payrcpt_details ";
                query = query + " WHERE  comp = ?comp AND payrcptno = ?payrcptno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetcomp;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModPayRcptDet.GetSetpayrcptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayRcptDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deletePaymentReceiptDetails: " + e.Message.ToString());
        }
        return result;
    }

    /*** END FOR PAYMENT RECEIPT ***/

    /*** BEGIN FOR ADJUSTMENT ***/
    /*
    public ArrayList getLineItemPendingPaymentPaid(String comp, String bpid, String bpdesc, String paypaidtype)
    {
        ArrayList lsPendPayPaidMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, expenses_header.bpid, ";
                query = query + "        expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " FROM   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " AND    expenses_header.status = 'CONFIRMED' ";
                query = query + " AND    expenses_header.totalamount - expenses_header.paypaidamount > 0 ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpdesc = ?bpdesc ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesno, expenses_header.expensesdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = bpdesc;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();

                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");

                    lsPendPayPaidMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingPaymentPaid: " + e.Message.ToString());
        }
        return lsPendPayPaidMod;
    }

    public ArrayList getExpensesPaymentPaidHeaderListSumByBP(String comp, String expensesno, String bpid, String fyr, String status)
    {
        ArrayList lsExpPayPaidHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, SUM(expenses_header.totalamount) exp_amount, SUM(expenses_header.paypaidamount) pay_amount ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesno = '" + expensesno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(expenses_header.confirmeddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM fiscalperiod WHERE financeyear = '" + fyr + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " group by expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact ";
                query = query + " order by expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "exp_amount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "pay_amount");
                    lsExpPayPaidHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesPaymentPaidHeaderListSumByBP: " + e.Message.ToString());
        }
        return lsExpPayPaidHdrMod;
    }
    */

    public ArrayList getAdjustmentHeaderList(String comp, String adjustmentno, String itemno, String status)
    {
        ArrayList lsAdjHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT adjustment_header.comp, adjustment_header.adjustmentno, date_format(adjustment_header.adjustmentdate,'%d-%m-%Y') str_adjustmentdate, adjustment_header.adjustmenttype, ";
                query = query + "        adjustment_header.remarks, adjustment_header.status, adjustment_header.createdby, adjustment_header.createddate, ";
                query = query + "        adjustment_header.confirmedby, adjustment_header.confirmeddate, adjustment_header.cancelledby, adjustment_header.cancelleddate  ";
                query = query + " from   adjustment_header ";
                query = query + " WHERE  adjustment_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.comp = '" + comp + "' ";
                }
                if (adjustmentno.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.adjustmentno = '" + adjustmentno + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.adjustmentno IN (SELECT adjustment_details.adjustmentno FROM adjustment_details WHERE adjustment_details.comp = '" + comp + "' AND upper(adjustment_details.itemno) = '" + itemno.Trim().ToUpper() + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.status = '" + status + "' ";
                }
                query = query + " order by adjustment_header.comp, adjustment_header.adjustmentno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modHdr = new MainModel();
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modHdr.GetSetadjustmentdate = replaceNull(dataReader, "str_adjustmentdate");
                    modHdr.GetSetadjustmenttype = replaceNull(dataReader, "adjustmenttype");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsAdjHdrMod.Add(modHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAdjustmentHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAdjHdrMod;
    }

    public MainModel getAdjustmentHeaderDetails(String comp, String adjustmentno)
    {
        MainModel modHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT adjustment_header.comp, adjustment_header.adjustmentno, date_format(adjustment_header.adjustmentdate,'%d-%m-%Y') str_adjustmentdate, adjustment_header.adjustmenttype, ";
                query = query + "        adjustment_header.remarks, adjustment_header.status, adjustment_header.createdby, adjustment_header.createddate, ";
                query = query + "        adjustment_header.confirmedby, adjustment_header.confirmeddate, adjustment_header.cancelledby, adjustment_header.cancelleddate  ";
                query = query + " from   adjustment_header ";
                query = query + " WHERE  adjustment_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.comp = '" + comp + "' ";
                }
                if (adjustmentno.Trim().Length > 0)
                {
                    query = query + " and  adjustment_header.adjustmentno = '" + adjustmentno + "' ";
                }
                query = query + " order by adjustment_header.comp, adjustment_header.adjustmentno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modHdr.GetSetadjustmentdate = replaceNull(dataReader, "str_adjustmentdate");
                    modHdr.GetSetadjustmenttype = replaceNull(dataReader, "adjustmenttype");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAdjustmentHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modHdr;
    }

    public ArrayList getAdjustmentDetailsList(String comp, String adjustmentno, int lineno, String itemno)
    {
        ArrayList lsAdjDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT adjustment_details.comp, adjustment_details.adjustmentno, adjustment_details.lineno, adjustment_details.itemno, adjustment_details.itemdesc, ";
                query = query + " 	     adjustment_details.location, date_format(adjustment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, adjustment_details.qtysoh, adjustment_details.costsoh, ";
                query = query + " 	     adjustment_details.qtyvariance, adjustment_details.pricevariance, adjustment_details.qtyadjusted, adjustment_details.costadjusted, adjustment_details.remarks ";
                query = query + " from   adjustment_details ";
                query = query + " WHERE  adjustment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.comp = '" + comp + "' ";
                }
                if (adjustmentno.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.adjustmentno = '" + adjustmentno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  adjustment_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  upper(adjustment_details.itemno) = '" + itemno.Trim().ToUpper() + "') ";
                }
                query = query + " order by adjustment_details.comp, adjustment_details.adjustmentno, adjustment_details.lineno, adjustment_details.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modDet = new MainModel();
                    modDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modDet.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modDet.GetSetlocation = replaceNull(dataReader, "location");
                    modDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modDet.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modDet.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modDet.GetSetqtyvariance = replaceZero(dataReader, "qtyvariance");
                    modDet.GetSetpricevariance = replaceDoubleZero(dataReader, "pricevariance");
                    modDet.GetSetqtyadjusted = replaceZero(dataReader, "qtyadjusted");
                    modDet.GetSetcostadjusted = replaceDoubleZero(dataReader, "costadjusted");
                    modDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    lsAdjDetMod.Add(modDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAdjustmentDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsAdjDetMod;
    }

    public MainModel getAdjustmentDetailsDetails(String comp, String adjustmentno, int lineno, String itemno, String location, String datesoh, String status)
    {
        MainModel modDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT adjustment_details.comp, adjustment_details.adjustmentno, adjustment_details.lineno, adjustment_details.itemno, adjustment_details.itemdesc, ";
                query = query + "        adjustment_details.location, date_format(adjustment_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, adjustment_details.qtysoh, adjustment_details.costsoh, ";
                query = query + "        adjustment_details.qtyvariance, adjustment_details.pricevariance, adjustment_details.qtyadjusted, adjustment_details.costadjusted, adjustment_details.remarks ";
                query = query + " from   adjustment_details ";
                query = query + " WHERE  adjustment_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.comp = '" + comp + "' ";
                }
                if (adjustmentno.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.adjustmentno = '" + adjustmentno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  adjustment_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  upper(adjustment_details.itemno) = '" + itemno.Trim().ToUpper() + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(adjustment_details.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  adjustment_details.adjustmentno IN (SELECT adjustmentno FROM adjustment_header WHERE status = '" + status + "' and comp = adjustment_details.comp) ";
                }
                query = query + " order by adjustment_details.comp, adjustment_details.adjustmentno, adjustment_details.lineno, adjustment_details.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modDet.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modDet.GetSetlocation = replaceNull(dataReader, "location");
                    modDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modDet.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modDet.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    modDet.GetSetqtyvariance = replaceZero(dataReader, "qtyvariance");
                    modDet.GetSetpricevariance = replaceDoubleZero(dataReader, "pricevariance");
                    modDet.GetSetqtyadjusted = replaceZero(dataReader, "qtyadjusted");
                    modDet.GetSetcostadjusted = replaceDoubleZero(dataReader, "costadjusted");
                    modDet.GetSetremarks = replaceNull(dataReader, "remarks");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getAdjustmentDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modDet;
    }

    /*
    public ArrayList getPaymentPaidCashFlowList(String comp, String openingdate, String closingdate, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno paymentno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(paypaid_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(paypaid_header.paypaidtype,': ',expenses_header.expensestype) paymenttype, ";
                query = query + "        paypaid_header.bpid, paypaid_header.bpdesc, paypaid_details.lineno, ";
                query = query + "        paypaid_details.expensesno paydetno, paypaid_details.paytype, paypaid_details.payrefno, ";
                query = query + "        paypaid_details.payremarks, paypaid_details.paypaidprice payamount ";
                query = query + " from   paypaid_header, paypaid_details, expenses_header ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	   paypaid_details.comp = expenses_header.comp ";
                query = query + " AND	   paypaid_details.expensesno = expenses_header.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    //query = query + " and  paypaid_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  paypaid_header.confirmeddate >= ?openingdate ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    //query = query + " and  paypaid_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  paypaid_header.confirmeddate <= ?closingdate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno, paypaid_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (openingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(openingdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (closingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidCashFlowList: " + e.Message.ToString());
        }
        return lsPaymentMod;
    }
    */
     
    public String insertAdjustmentHeader(MainModel oModAdjustment)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO adjustment_header (comp, adjustmentno, adjustmentdate, adjustmenttype, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?adjustmentno, ?adjustmentdate, ?adjustmenttype, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcomp;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModAdjustment.GetSetadjustmentno;
                if (oModAdjustment.GetSetadjustmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetadjustmentdate, ukDtfi);
                    cmd.Parameters.Add("?adjustmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?adjustmentdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?adjustmenttype", MySqlDbType.VarChar).Value = oModAdjustment.GetSetadjustmenttype;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAdjustment.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAdjustment.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcreatedby;
                if (oModAdjustment.GetSetcreatedby.Length > 0)
                {
                    if (oModAdjustment.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetconfirmedby;
                if (oModAdjustment.GetSetconfirmedby.Length > 0)
                {
                    if (oModAdjustment.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcancelledby;
                if (oModAdjustment.GetSetcancelledby.Length > 0)
                {
                    if (oModAdjustment.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertAdjustmentHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateAdjustmentHeader(MainModel oModAdjustment)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE adjustment_header ";
                query = query + " SET    adjustmentdate = ?adjustmentdate, adjustmenttype = ?adjustmenttype, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND adjustmentno = ?adjustmentno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcomp;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModAdjustment.GetSetadjustmentno;
                if (oModAdjustment.GetSetadjustmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetadjustmentdate, ukDtfi);
                    cmd.Parameters.Add("?adjustmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?adjustmentdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?adjustmenttype", MySqlDbType.VarChar).Value = oModAdjustment.GetSetadjustmenttype;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModAdjustment.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModAdjustment.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcreatedby;
                if (oModAdjustment.GetSetcreatedby.Length > 0)
                {
                    if (oModAdjustment.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetconfirmedby;
                if (oModAdjustment.GetSetconfirmedby.Length > 0)
                {
                    if (oModAdjustment.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModAdjustment.GetSetcancelledby;
                if (oModAdjustment.GetSetcancelledby.Length > 0)
                {
                    if (oModAdjustment.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModAdjustment.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateAdjustmentHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*
    public String updatePaymentPaidHeaderInfo(String sComp, String sPayPaidNo)
    {
        String result = "Y";

        MainModel oModPayPaidHdr = new MainModel();
        ArrayList lsPayPaidLineItem = new ArrayList();

        try
        {
            oModPayPaidHdr = getPaymentPaidHeaderDetails(sComp, sPayPaidNo);
            if (oModPayPaidHdr.GetSetpaypaidno.Length > 0)
            {
                double expensesamount = 0, paypaidamount = 0, taxamount = 0, totalamount = 0;
                lsPayPaidLineItem = getPaymentPaidDetailsList(sComp, sPayPaidNo, 0, "");
                for (int i = 0; i < lsPayPaidLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsPayPaidLineItem[i];
                    expensesamount = expensesamount + oModLineItem.GetSetexpensesprice;
                    paypaidamount = paypaidamount + oModLineItem.GetSetpaypaidprice;
                }
                oModPayPaidHdr.GetSetexpensesamount = expensesamount;
                oModPayPaidHdr.GetSetpaypaidamount = paypaidamount;
                //update Payment Paid header
                result = updatePaymentPaidHeader(oModPayPaidHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentPaidHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }
    */
    
    public String insertAdjustmentDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO adjustment_details (comp, adjustmentno, lineno, itemno, itemdesc, location, datesoh, qtysoh, costsoh, qtyvariance, pricevariance, qtyadjusted, costadjusted, remarks) ";
                query = query + " VALUES (?comp, ?adjustmentno, ?lineno, ?itemno, ?itemdesc, ?location, ?datesoh, ?qtysoh, ?costsoh, ?qtyvariance, ?pricevariance, ?qtyadjusted, ?costadjusted, ?remarks) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModDet.GetSetadjustmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDet.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDet.GetSetlocation;
                if (oModDet.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDet.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModDet.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModDet.GetSetcostsoh;
                cmd.Parameters.Add("?qtyvariance", MySqlDbType.Int16).Value = oModDet.GetSetqtyvariance;
                cmd.Parameters.Add("?pricevariance", MySqlDbType.Double).Value = oModDet.GetSetpricevariance;
                cmd.Parameters.Add("?qtyadjusted", MySqlDbType.Int16).Value = oModDet.GetSetqtyadjusted;
                cmd.Parameters.Add("?costadjusted", MySqlDbType.Double).Value = oModDet.GetSetcostadjusted;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModDet.GetSetremarks;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertAdjustmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateAdjustmentDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE adjustment_details ";
                query = query + " SET    itemno = ?itemno, itemdesc = ?itemdesc, location = ?location, datesoh = ?datesoh, qtysoh = ?qtysoh, costsoh = ?costsoh, qtyvariance = ?qtyvariance, pricevariance = ?pricevariance, qtyadjusted = ?qtyadjusted, costadjusted = ?costadjusted, remarks = ?remarks ";
                query = query + " WHERE comp = ?comp  AND adjustmentno = ?adjustmentno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModDet.GetSetadjustmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDet.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDet.GetSetlocation;
                if (oModDet.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDet.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModDet.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModDet.GetSetcostsoh;
                cmd.Parameters.Add("?qtyvariance", MySqlDbType.Int16).Value = oModDet.GetSetqtyvariance;
                cmd.Parameters.Add("?pricevariance", MySqlDbType.Double).Value = oModDet.GetSetpricevariance;
                cmd.Parameters.Add("?qtyadjusted", MySqlDbType.Int16).Value = oModDet.GetSetqtyadjusted;
                cmd.Parameters.Add("?costadjusted", MySqlDbType.Double).Value = oModDet.GetSetcostadjusted;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModDet.GetSetremarks;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateAdjustmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteAdjustmentDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM adjustment_details ";
                query = query + " WHERE  comp = ?comp AND adjustmentno = ?adjustmentno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModDet.GetSetadjustmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteAdjustmentDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }
    /*** END FOR ADJUSTMENT ***/

    #region/*** BEGIN FOR PURCHASE ORDER ***/

    public ArrayList getPurchaseOrderHeaderList(String comp, String orderno, String ordercat, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_header.comp, purchase_header.orderno, date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordercat, purchase_header.orderactivity, purchase_header.ordertype, purchase_header.bpid, ";
                query = query + "        purchase_header.bpdesc, purchase_header.bpaddress, purchase_header.bpcontact, date_format(purchase_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, purchase_header.paytype, purchase_header.purchaseamount, ";
                query = query + "        purchase_header.discamount, purchase_header.orderamount, purchase_header.taxamount, purchase_header.totalamount, ";
                query = query + "        purchase_header.orderremarks, purchase_header.orderstatus, purchase_header.ordercreated, purchase_header.ordercreateddate, purchase_header.orderapproved, purchase_header.orderapproveddate, purchase_header.ordercancelled, purchase_header.ordercancelleddate ";
                query = query + " from   purchase_header ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " and  purchase_header.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(purchase_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.ordercat = '" + ordercat + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderstatus = '" + status + "' ";
                }
                query = query + " order by purchase_header.comp, purchase_header.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getPurchaseOrderHeaderListSearching(String comp, String searchitem, String ordercat, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_header.comp, purchase_header.orderno, date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordercat, purchase_header.orderactivity, purchase_header.ordertype, purchase_header.bpid, ";
                query = query + "        purchase_header.bpdesc, purchase_header.bpaddress, purchase_header.bpcontact, date_format(purchase_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, purchase_header.paytype, purchase_header.purchaseamount, ";
                query = query + "        purchase_header.discamount, purchase_header.orderamount, purchase_header.taxamount, purchase_header.totalamount, ";
                query = query + "        purchase_header.orderremarks, purchase_header.orderstatus, purchase_header.ordercreated, purchase_header.ordercreateddate, purchase_header.orderapproved, purchase_header.orderapproveddate, purchase_header.ordercancelled, purchase_header.ordercancelleddate ";
                query = query + " from   purchase_header ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " and  purchase_header.comp = '" + comp + "' ";
                if (searchitem.Trim().Length > 0)
                {
                    query = query + " and  (upper(purchase_header.orderno) like '%" + searchitem.ToUpper() + "%' or upper(purchase_header.bpid) like '%" + searchitem.ToUpper() + "%' or upper(purchase_header.bpdesc) like '%" + searchitem.ToUpper() + "%')";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.ordercat = '" + ordercat + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderstatus = '" + status + "' ";
                }
                query = query + " order by purchase_header.comp, purchase_header.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public ArrayList getPurchaseOrderHeaderDetailsList(String comp, String orderno, String bpid, String startdate, String enddate, String itemno, String status, String receiptstatus, String expensesstatus)
    {
        ArrayList lsOrdHdrDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_header.comp, purchase_header.orderno, date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordercat, purchase_header.orderactivity, purchase_header.ordertype, purchase_header.bpid, ";
                query = query + "        purchase_header.bpdesc, purchase_header.bpaddress, purchase_header.bpcontact, date_format(purchase_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, purchase_header.paytype, purchase_header.purchaseamount, ";
                query = query + "        purchase_header.discamount, purchase_header.orderamount, purchase_header.taxamount, purchase_header.totalamount, ";
                query = query + "        purchase_header.orderremarks, purchase_header.orderstatus, purchase_header.ordercreated, purchase_header.ordercreateddate, purchase_header.orderapproved, purchase_header.orderapproveddate, purchase_header.ordercancelled, purchase_header.ordercancelleddate, ";
                query = query + "        purchase_details.lineno, ";
                query = query + " 	     purchase_details.itemno, purchase_details.itemdesc, item.itemcat, purchase_details.remarks, purchase_details.unitprice, ";
                query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                query = query + " from   purchase_header, purchase_details, item ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " and    purchase_header.comp = purchase_details.comp ";
                query = query + " and    purchase_header.orderno = purchase_details.orderno ";
                query = query + " AND    purchase_details.comp = item.comp ";
                query = query + " AND    purchase_details.itemno = item.itemno ";
                query = query + " and    purchase_header.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(purchase_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.bpid = '" + bpid + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderstatus = '" + status + "' ";
                }
                if (receiptstatus.Equals("DONE"))
                {
                    query = query + " and  purchase_details.quantity - purchase_details.receiptqty = 0 ";
                }
                else if (receiptstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  purchase_details.quantity - purchase_details.receiptqty > 0 ";
                }
                if (expensesstatus.Equals("DONE"))
                {
                    query = query + " and  purchase_details.totalprice - purchase_details.billingamount = 0 ";
                }
                else if (expensesstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  purchase_details.totalprice - purchase_details.billingamount > 0 ";
                }
                query = query + " order by purchase_header.comp, purchase_header.orderno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdrDet = new MainModel();
                    modOrdHdrDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdrDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdrDet.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdrDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdrDet.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdrDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdrDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdrDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdrDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdrDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdrDet.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdrDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdrDet.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdrDet.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdrDet.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdrDet.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdrDet.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdrDet.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdrDet.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdrDet.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdrDet.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    modOrdHdrDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdHdrDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdHdrDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdHdrDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdHdrDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdHdrDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdHdrDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdHdrDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdHdrDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdHdrDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdHdrDetMod.Add(modOrdHdrDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrDetMod;
    }

    public MainModel getPurchaseOrderHeaderDetails(String comp, String orderno)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_header.comp, purchase_header.orderno, date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordercat, purchase_header.orderactivity, purchase_header.ordertype, purchase_header.bpid, ";
                query = query + "        purchase_header.bpdesc, purchase_header.bpaddress, purchase_header.bpcontact, date_format(purchase_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, purchase_header.paytype, purchase_header.purchaseamount, ";
                query = query + "        purchase_header.discamount, purchase_header.orderamount, purchase_header.taxamount, purchase_header.totalamount, ";
                query = query + "        purchase_header.orderremarks, purchase_header.orderstatus, purchase_header.ordercreated, purchase_header.ordercreateddate, purchase_header.orderapproved, purchase_header.orderapproveddate, purchase_header.ordercancelled, purchase_header.ordercancelleddate ";
                query = query + " from   purchase_header ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " and  purchase_header.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.orderno = '" + orderno.ToUpper() + "' ";
                }
                query = query + " order by purchase_header.comp, purchase_header.orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modOrdHdr;
    }

    public MainModel getPurchaseOrderHeaderDetails(String comp, String orderno, String ordercat)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_header.compto comp, transfer_header.orderno, date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordercat, transfer_header.ordertype, transfer_header.orderactivity, ";
                    query = query + "        transfer_header.compfrom bpid, comp1.comp_name bpdesc, comp1.comp_address bpaddress, comp1.comp_contact bpcontact, ";
                    //query = query + "        transfer_header.compto bpid, comp2.comp_name bpdesc, comp2.comp_address bpaddress, comp2.comp_contact bpcontact, ";
                    //query = query + "        date_format(transfer_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, ";
                    query = query + "        date_format(transfer_header.receiptdate,'%d-%m-%Y') str_plandeliverydate, ";
                    query = query + "        'NOT_APPLICABLE' paytype, transfer_header.transferamount purchaseamount, ";
                    query = query + "        transfer_header.discamount, transfer_header.orderamount, transfer_header.taxamount, transfer_header.totalamount, ";
                    query = query + "        transfer_header.orderremarks, transfer_header.orderstatus, transfer_header.ordercreated, transfer_header.ordercreateddate, transfer_header.orderapproved, transfer_header.orderapproveddate, transfer_header.ordercancelled, transfer_header.ordercancelleddate ";
                    query = query + " from   transfer_header, comp_details comp1, comp_details comp2 ";
                    query = query + " WHERE  transfer_header.comp is not NULL ";
                    query = query + " and    transfer_header.compfrom = comp1.comp ";
                    query = query + " and    transfer_header.compto = comp2.comp ";
                    if (comp.Trim().Length > 0)
                    {
                        //query = query + " and    transfer_header.compfrom = '" + comp + "' ";
                        query = query + " and    transfer_header.compto = '" + comp + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    //query = query + " order by transfer_header.compfrom, transfer_header.orderno ";
                    query = query + " order by transfer_header.compto, transfer_header.orderno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT purchase_header.comp, purchase_header.orderno, date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordercat, purchase_header.orderactivity, purchase_header.ordertype, purchase_header.bpid, ";
                    query = query + "        purchase_header.bpdesc, purchase_header.bpaddress, purchase_header.bpcontact, date_format(purchase_header.plandeliverydate,'%d-%m-%Y') str_plandeliverydate, purchase_header.paytype, purchase_header.purchaseamount, ";
                    query = query + "        purchase_header.discamount, purchase_header.orderamount, purchase_header.taxamount, purchase_header.totalamount, ";
                    query = query + "        purchase_header.orderremarks, purchase_header.orderstatus, purchase_header.ordercreated, purchase_header.ordercreateddate, purchase_header.orderapproved, purchase_header.orderapproveddate, purchase_header.ordercancelled, purchase_header.ordercancelleddate ";
                    query = query + " from   purchase_header ";
                    query = query + " WHERE  purchase_header.comp is not NULL ";
                    query = query + " and  purchase_header.comp = '" + comp + "' ";
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.orderno = '" + orderno + "' ";
                    }
                    query = query + " order by purchase_header.comp, purchase_header.orderno ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdHdr.GetSetplandeliverydate = replaceNull(dataReader, "str_plandeliverydate");
                    modOrdHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modOrdHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderHeaderDetails: " + e.Message.ToString());
        }
        return modOrdHdr;
    }

    public ArrayList getPurchaseOrderDetailsList(String comp, String orderno, int lineno, String itemno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_header.ordertype, purchase_details.lineno, ";
                query = query + " 	     purchase_details.itemno, purchase_details.itemdesc, item.itemcat, item.itemtype, purchase_details.remarks, purchase_details.unitprice, ";
                query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                query = query + " from   purchase_header, purchase_details, item ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " AND    purchase_header.comp = purchase_details.comp AND purchase_header.orderno = purchase_details.orderno ";
                query = query + " AND  purchase_details.comp = item.comp ";
                query = query + " AND  purchase_details.itemno = item.itemno ";
                query = query + " and  purchase_details.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  purchase_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public MainModel getPurchaseOrderDetailsDetails(String comp, String orderno, int lineno, String itemno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_details.lineno, purchase_header.ordercat, ";
                query = query + " 	     purchase_details.itemno, purchase_details.itemdesc, purchase_details.remarks, purchase_details.unitprice, ";
                query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                query = query + " from   purchase_details, purchase_header ";
                query = query + " WHERE  purchase_details.comp is not NULL ";
                query = query + " and    purchase_details.comp = purchase_header.comp ";
                query = query + " and    purchase_details.orderno = purchase_header.orderno ";
                query = query + " and    purchase_details.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  purchase_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modOrdDet;
    }

    public MainModel getPurchaseOrderDetailsDetails(String comp, String orderno, int lineno, String itemno, String receiptno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_details.lineno, purchase_header.ordercat, ";
                query = query + " 	     purchase_details.itemno, purchase_details.itemdesc, purchase_details.remarks, purchase_details.unitprice, ";
                query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                query = query + "        purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) order_quantity, ";
                query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                query = query + " from   purchase_details, purchase_header ";
                query = query + " WHERE  purchase_details.comp is not NULL ";
                query = query + " and    purchase_details.comp = purchase_header.comp ";
                query = query + " and    purchase_details.orderno = purchase_header.orderno ";
                //query = query + " AND    purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) > 0 ";
                query = query + " and    purchase_details.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  purchase_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  purchase_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderDetailsDetails: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public MainModel getPurchaseOrderDetailsDetails(String comp, String orderno, int lineno, String itemno, String ordercat, String receiptno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_header.compto comp, transfer_details.orderno, transfer_details.lineno, transfer_header.ordercat, ";
                    query = query + " 	     transfer_details.itemno, transfer_details.itemdesc, transfer_details.remarks, transfer_details.unitprice, ";
                    query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                    query = query + "        transfer_details.deliverqty - transfer_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = transfer_header.compto and transfer_header.comp = transfer_details.comp and transfer_header.orderno = transfer_details.orderno and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = transfer_details.itemno and receipt_details.orderno = transfer_details.orderno and receipt_details.order_lineno = transfer_details.lineno),0) order_quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                    query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount, transfer_details.receiptqty, transfer_details.billingamount ";
                    query = query + " from   transfer_details, transfer_header ";
                    query = query + " WHERE  transfer_details.comp is not NULL ";
                    query = query + " AND  transfer_details.comp = transfer_header.comp ";
                    query = query + " AND  transfer_details.orderno = transfer_header.orderno ";
                    query = query + " and  transfer_header.compto = '" + comp + "' ";
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_details.orderno = '" + orderno + "' ";
                    }
                    if (lineno > 0)
                    {
                        query = query + " and  transfer_details.lineno = " + lineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_details.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by transfer_header.compto, transfer_details.orderno, transfer_details.lineno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_details.lineno, purchase_header.ordercat, ";
                    query = query + " 	     purchase_details.itemno, purchase_details.itemdesc, purchase_details.remarks, purchase_details.unitprice, ";
                    query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                    query = query + "        purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) order_quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                    query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                    query = query + " from   purchase_details, purchase_header ";
                    query = query + " WHERE  purchase_details.comp is not NULL ";
                    query = query + " and    purchase_details.comp = purchase_header.comp ";
                    query = query + " and    purchase_details.orderno = purchase_header.orderno ";
                    query = query + " and    purchase_details.comp = '" + comp + "' ";
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_details.orderno = '" + orderno + "' ";
                    }
                    if (lineno > 0)
                    {
                        query = query + " and  purchase_details.lineno = " + lineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_details.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPurchaseOrderDetailsDetails: " + e.Message.ToString());
        }
        return modOrdDet;
    }

    public String insertPurchaseOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO purchase_header (comp, orderno, orderdate, ordercat, orderactivity, ordertype, bpid, bpdesc, bpaddress, bpcontact, paytype, purchaseamount, discamount, orderamount, taxamount, totalamount, plandeliverydate, orderremarks, orderstatus, ordercreated, ordercreateddate, orderapproved, orderapproveddate, ordercancelled, ordercancelleddate) ";
                query = query + " VALUES (?comp, ?orderno, ?orderdate, ?ordercat, ?orderactivity, ?ordertype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?paytype, ?purchaseamount, ?discamount, ?orderamount, ?taxamount, ?totalamount, ?plandeliverydate, ?orderremarks, ?orderstatus, ?ordercreated, ?ordercreateddate, ?orderapproved, ?orderapproveddate, ?ordercancelled, ?ordercancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                if (oModOrder.GetSetorderdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderdate, ukDtfi);
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?purchaseamount", MySqlDbType.Double).Value = oModOrder.GetSetpurchaseamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetplandeliverydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetplandeliverydate, ukDtfi);
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPurchaseOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePurchaseOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE purchase_header ";
                query = query + " SET    ordercat = ?ordercat, orderactivity = ?orderactivity, ordertype = ?ordertype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, paytype = ?paytype, purchaseamount = ?purchaseamount, discamount = ?discamount, ";
                query = query + "        orderamount = ?orderamount, taxamount = ?taxamount, totalamount = ?totalamount, plandeliverydate = ?plandeliverydate, orderremarks = ?orderremarks, orderstatus = ?orderstatus, ordercreated = ?ordercreated, ordercreateddate = ?ordercreateddate, orderapproved = ?orderapproved, orderapproveddate = ?orderapproveddate, ordercancelled = ?ordercancelled, ordercancelleddate = ?ordercancelleddate ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModOrder.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModOrder.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModOrder.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModOrder.GetSetbpcontact;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModOrder.GetSetpaytype;
                cmd.Parameters.Add("?purchaseamount", MySqlDbType.Double).Value = oModOrder.GetSetpurchaseamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetplandeliverydate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetplandeliverydate, ukDtfi);
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?plandeliverydate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    //WriteToLogFile("MainController-updateOrderHeader: oModOrder.GetSetordercreated - " + oModOrder.GetSetordercreateddate);
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                        //WriteToLogFile("MainController-updateOrderHeader: datetime - " + datetime);
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePurchaseOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePurchaseOrderHeaderInfo(String sComp, String sOrderNo)
    {
        String result = "Y";

        MainModel oModOrdHdr = new MainModel();
        ArrayList lsOrderLineItem = new ArrayList();

        try
        {
            oModOrdHdr = getPurchaseOrderHeaderDetails(sComp, sOrderNo);
            if (oModOrdHdr.GetSetorderno.Length > 0)
            {
                double purchaseamount = 0, discamount = 0, orderamount = 0, taxamount = 0, totalamount = 0;
                lsOrderLineItem = getPurchaseOrderDetailsList(sComp, sOrderNo, 0, "");
                for (int i = 0; i < lsOrderLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsOrderLineItem[i];
                    purchaseamount = purchaseamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity);
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    orderamount = orderamount + oModLineItem.GetSetorderprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalprice;
                }
                oModOrdHdr.GetSetpurchaseamount = purchaseamount;
                oModOrdHdr.GetSetdiscamount = discamount;
                oModOrdHdr.GetSetorderamount = orderamount;
                oModOrdHdr.GetSettaxamount = taxamount;
                oModOrdHdr.GetSettotalamount = totalamount;
                //update order header
                result = updatePurchaseOrderHeader(oModOrdHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePurchaseOrderHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertPurchaseOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO purchase_details (comp, orderno, lineno, itemno, itemdesc, remarks, unitprice, discamount, quantity, orderprice, taxcode, taxrate, taxamount, totalprice, receiptqty, billingamount) ";
                query = query + " VALUES (?comp, ?orderno, ?lineno, ?itemno, ?itemdesc, ?remarks, ?unitprice, ?discamount, ?quantity, ?orderprice, ?taxcode, ?taxrate, ?taxamount, ?totalprice, ?receiptqty, ?billingamount) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?receiptqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetreceiptqty;
                cmd.Parameters.Add("?billingamount", MySqlDbType.Double).Value = oModOrderDet.GetSetbillingamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPuchaseOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePurchaseOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE purchase_details ";
                query = query + " SET    itemno = ?itemno, itemdesc = ?itemdesc, remarks = ?remarks, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, orderprice = ?orderprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalprice = ?totalprice, receiptqty = ?receiptqty, billingamount = ?billingamount ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?receiptqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetreceiptqty;
                cmd.Parameters.Add("?billingamount", MySqlDbType.Double).Value = oModOrderDet.GetSetbillingamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePurchaseOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deletePurchaseOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM purchase_details ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deletePurchaseOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    #endregion/*** END FOR PURCHASE ORDER ***/

    #region /*** BEGIN FOR TRANSFER ORDER ***/

    public ArrayList getTransferOrderHeaderList(String comp, String compfrom, String compto, String orderno, String ordercat, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT transfer_header.comp, transfer_header.orderno, date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordercat, transfer_header.ordertype, transfer_header.orderactivity, transfer_header.pricetype, ";
                query = query + "        transfer_header.compfrom, comp1.comp_name comp1_comp_name, comp1.comp_address comp1_comp_address, comp1.comp_contact comp1_comp_contact, comp1.comp_contactno comp1_comp_contactno, ";
                query = query + "        transfer_header.compto, comp2.comp_name comp2_comp_name, comp2.comp_address comp2_comp_address, comp2.comp_contact comp2_comp_contact, comp2.comp_contactno comp2_comp_contactno, ";
                query = query + "        date_format(transfer_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, date_format(transfer_header.receiptdate,'%d-%m-%Y') str_receiptdate, transfer_header.transferamount, ";
                query = query + "        transfer_header.discamount, transfer_header.orderamount, transfer_header.taxamount, transfer_header.totalamount, ";
                query = query + "        transfer_header.orderremarks, transfer_header.orderstatus, transfer_header.ordercreated, transfer_header.ordercreateddate, transfer_header.orderapproved, transfer_header.orderapproveddate, transfer_header.ordercancelled, transfer_header.ordercancelleddate ";
                query = query + " from   transfer_header, comp_details comp1, comp_details comp2 ";
                query = query + " WHERE  transfer_header.comp is not NULL ";
                query = query + " and    transfer_header.compfrom = comp1.comp ";
                query = query + " and    transfer_header.compto = comp2.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and    transfer_header.comp = '" + comp + "' ";
                }
                else
                {
                    if (compfrom.Trim().Length > 0 && compto.Trim().Length > 0)
                    {
                        query = query + " and    (transfer_header.compfrom = '" + compfrom + "' ";
                        query = query + " or    transfer_header.compto = '" + compto + "') ";
                    }
                    else
                    {
                        if (compfrom.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compfrom = '" + compfrom + "' ";
                        }
                        if (compto.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compto = '" + compto + "' ";
                        }
                    }
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(transfer_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (ordercat.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.ordercat = '" + ordercat + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.orderstatus = '" + status + "' ";
                }
                query = query + " order by transfer_header.comp, transfer_header.orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdr = new MainModel();
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetpricetype = replaceNull(dataReader, "pricetype");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp = replaceNull(dataReader, "compfrom");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_name = replaceNull(dataReader, "comp1_comp_name");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_address = replaceNull(dataReader, "comp1_comp_address");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_contact = replaceNull(dataReader, "comp1_comp_contact");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp1_comp_contactno");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp = replaceNull(dataReader, "compto");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_name = replaceNull(dataReader, "comp2_comp_name");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_address = replaceNull(dataReader, "comp2_comp_address");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_contact = replaceNull(dataReader, "comp2_comp_contact");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp2_comp_contactno");
                    modOrdHdr.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modOrdHdr.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modOrdHdr.GetSettransferamount = replaceDoubleZero(dataReader, "transferamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    lsOrdHdrMod.Add(modOrdHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferOrderHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrMod;
    }

    public String insertTransferOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO transfer_header (comp, orderno, orderdate, ordercat, ordertype, orderactivity, pricetype, compfrom, compto, transferamount, discamount, orderamount, taxamount, totalamount, shipmentdate, receiptdate, orderremarks, orderstatus, ordercreated, ordercreateddate, orderapproved, orderapproveddate, ordercancelled, ordercancelleddate) ";
                query = query + " VALUES (?comp, ?orderno, ?orderdate, ?ordercat, ?ordertype, ?orderactivity, ?pricetype, ?compfrom, ?compto, ?transferamount, ?discamount, ?orderamount, ?taxamount, ?totalamount, ?shipmentdate, ?receiptdate, ?orderremarks, ?orderstatus, ?ordercreated, ?ordercreateddate, ?orderapproved, ?orderapproveddate, ?ordercancelled, ?ordercancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                if (oModOrder.GetSetorderdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderdate, ukDtfi);
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?pricetype", MySqlDbType.VarChar).Value = oModOrder.GetSetpricetype;
                cmd.Parameters.Add("?compfrom", MySqlDbType.VarChar).Value = oModOrder.GetSetCompFromDetails.GetSetcomp;
                cmd.Parameters.Add("?compto", MySqlDbType.VarChar).Value = oModOrder.GetSetCompToDetails.GetSetcomp;
                cmd.Parameters.Add("?transferamount", MySqlDbType.Double).Value = oModOrder.GetSettransferamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetshipmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetshipmentdate, ukDtfi);
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = null;
                }
                if (oModOrder.GetSetreceiptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetreceiptdate, ukDtfi);
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertTransferOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public MainModel getTransferOrderHeaderDetails(String comp, String compfrom, String compto, String orderno)
    {
        MainModel modOrdHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                query = "";
                query = query + " SELECT transfer_header.comp, transfer_header.orderno, date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordercat, transfer_header.ordertype, transfer_header.orderactivity, transfer_header.pricetype, ";
                query = query + "        transfer_header.compfrom, comp1.comp_name comp1_comp_name, comp1.comp_address comp1_comp_address, comp1.comp_contact comp1_comp_contact, comp1.comp_contactno comp1_comp_contactno, ";
                query = query + "        transfer_header.compto, comp2.comp_name comp2_comp_name, comp2.comp_address comp2_comp_address, comp2.comp_contact comp2_comp_contact, comp2.comp_contactno comp2_comp_contactno, ";
                query = query + "        date_format(transfer_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, date_format(transfer_header.receiptdate,'%d-%m-%Y') str_receiptdate, transfer_header.transferamount, ";
                query = query + "        transfer_header.discamount, transfer_header.orderamount, transfer_header.taxamount, transfer_header.totalamount, ";
                query = query + "        transfer_header.orderremarks, transfer_header.orderstatus, transfer_header.ordercreated, transfer_header.ordercreateddate, transfer_header.orderapproved, transfer_header.orderapproveddate, transfer_header.ordercancelled, transfer_header.ordercancelleddate ";
                query = query + " from   transfer_header, comp_details comp1, comp_details comp2 ";
                query = query + " WHERE  transfer_header.comp is not NULL ";
                query = query + " and    transfer_header.compfrom = comp1.comp ";
                query = query + " and    transfer_header.compto = comp2.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and    transfer_header.comp = '" + comp + "' ";
                }
                else
                {
                    if (compfrom.Trim().Length > 0 && compto.Trim().Length > 0)
                    {
                        query = query + " and    (transfer_header.compfrom = '" + compfrom + "' ";
                        query = query + " or    transfer_header.compto = '" + compto + "') ";
                    }
                    else
                    {
                        if (compfrom.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compfrom = '" + compfrom + "' ";
                        }
                        if (compto.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compto = '" + compto + "' ";
                        }
                    }
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(transfer_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                query = query + " order by transfer_header.comp, transfer_header.orderno ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modOrdHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdr.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdr.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdr.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdr.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdr.GetSetpricetype = replaceNull(dataReader, "pricetype");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp = replaceNull(dataReader, "compfrom");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_name = replaceNull(dataReader, "comp1_comp_name");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_address = replaceNull(dataReader, "comp1_comp_address");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_contact = replaceNull(dataReader, "comp1_comp_contact");
                    modOrdHdr.GetSetCompFromDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp1_comp_contactno");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp = replaceNull(dataReader, "compto");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_name = replaceNull(dataReader, "comp2_comp_name");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_address = replaceNull(dataReader, "comp2_comp_address");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_contact = replaceNull(dataReader, "comp2_comp_contact");
                    modOrdHdr.GetSetCompToDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp2_comp_contactno");
                    modOrdHdr.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modOrdHdr.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modOrdHdr.GetSettransferamount = replaceDoubleZero(dataReader, "transferamount");
                    modOrdHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdr.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdr.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdr.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdr.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdr.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdr.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdr.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdr.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdr.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferOrderHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modOrdHdr;
    }

    public ArrayList getTransferOrderDetailsList(String comp, String orderno, int lineno, String itemno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT transfer_details.comp, transfer_details.orderno, transfer_details.lineno, ";
                query = query + " 	     transfer_details.itemno, transfer_details.itemdesc, item.itemcat, transfer_details.remarks, transfer_details.unitprice, ";
                query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount, transfer_details.receiptqty, transfer_details.billingamount ";
                query = query + " from   transfer_details, item ";
                query = query + " WHERE  transfer_details.comp is not NULL ";
                query = query + " AND  transfer_details.comp = item.comp ";
                query = query + " AND  transfer_details.itemno = item.itemno ";
                query = query + " and  transfer_details.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  transfer_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  transfer_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  transfer_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by transfer_details.comp, transfer_details.orderno, transfer_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferOrderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getTransferOrderHeaderDetailsList(String comp, String orderno, String compfrom, String compto, String startdate, String enddate, String itemno, String status, String shipmentstatus, String invoicestatus, String receiptstatus, String expensesstatus)
    {
        ArrayList lsOrdHdrDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT transfer_header.comp, transfer_header.orderno, date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordercat, transfer_header.orderactivity, transfer_header.pricetype, transfer_header.ordertype, ";
                query = query + "        transfer_header.compfrom, comp1.comp_name comp1_comp_name, comp1.comp_address comp1_comp_address, comp1.comp_contact comp1_comp_contact, comp1.comp_contactno comp1_comp_contactno, ";
                query = query + "        transfer_header.compto, comp2.comp_name comp2_comp_name, comp2.comp_address comp2_comp_address, comp2.comp_contact comp2_comp_contact, comp2.comp_contactno comp2_comp_contactno, ";
                query = query + "        date_format(transfer_header.shipmentdate,'%d-%m-%Y') str_shipmentdate, date_format(transfer_header.receiptdate,'%d-%m-%Y') str_receiptdate, transfer_header.transferamount, ";
                query = query + "        transfer_header.discamount, transfer_header.orderamount, transfer_header.taxamount, transfer_header.totalamount, ";
                query = query + "        transfer_header.orderremarks, transfer_header.orderstatus, transfer_header.ordercreated, transfer_header.ordercreateddate, transfer_header.orderapproved, transfer_header.orderapproveddate, transfer_header.ordercancelled, transfer_header.ordercancelleddate, ";
                query = query + "        transfer_details.lineno, ";
                query = query + " 	     transfer_details.itemno, transfer_details.itemdesc, item.itemcat, transfer_details.remarks, transfer_details.unitprice, ";
                query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount, transfer_details.receiptqty, transfer_details.billingamount ";
                query = query + " from   transfer_header, transfer_details, item, comp_details comp1, comp_details comp2 ";
                query = query + " WHERE  transfer_header.comp is not NULL ";
                query = query + " and    transfer_header.comp = transfer_details.comp ";
                query = query + " and    transfer_header.orderno = transfer_details.orderno ";
                query = query + " AND    transfer_details.comp = item.comp ";
                query = query + " AND    transfer_details.itemno = item.itemno ";
                query = query + " and    transfer_header.compfrom = comp1.comp ";
                query = query + " and    transfer_header.compto = comp2.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and    transfer_header.comp = '" + comp + "' ";
                }
                else
                {
                    if (compfrom.Trim().Length > 0 && compto.Trim().Length > 0)
                    {
                        query = query + " and    (transfer_header.compfrom = '" + compfrom + "' ";
                        query = query + " or    transfer_header.compto = '" + compto + "') ";
                    }
                    else
                    {
                        if (compfrom.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compfrom = '" + compfrom + "' ";
                        }
                        if (compto.Trim().Length > 0)
                        {
                            query = query + " and    transfer_header.compto = '" + compto + "' ";
                        }
                    }
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  upper(transfer_header.orderno) like '%" + orderno.ToUpper() + "%' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.orderdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.orderdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  transfer_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.orderstatus = '" + status + "' ";
                }
                if (shipmentstatus.Equals("DONE"))
                {
                    query = query + " and  transfer_details.quantity - transfer_details.deliverqty = 0 ";
                }
                else if (shipmentstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  transfer_details.quantity - transfer_details.deliverqty > 0 ";
                }
                if (invoicestatus.Equals("DONE"))
                {
                    query = query + " and  transfer_details.totalprice - transfer_details.invoiceamount = 0 ";
                }
                else if (invoicestatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  transfer_details.totalprice - transfer_details.invoiceamount > 0 ";
                }
                if (receiptstatus.Equals("DONE"))
                {
                    query = query + " and  transfer_details.quantity - transfer_details.receiptqty = 0 ";
                }
                else if (receiptstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  transfer_details.quantity - transfer_details.receiptqty > 0 ";
                }
                if (expensesstatus.Equals("DONE"))
                {
                    query = query + " and  transfer_details.totalprice - transfer_details.billingamount = 0 ";
                }
                else if (expensesstatus.Equals("IN-PROGRESS"))
                {
                    query = query + " and  transfer_details.totalprice - transfer_details.billingamount > 0 ";
                }
                query = query + " order by transfer_header.comp, transfer_header.orderno ";
                //WriteToLogFile("MainController-getTransferOrderHeaderDetailsList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdHdrDet = new MainModel();
                    modOrdHdrDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdHdrDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdHdrDet.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    modOrdHdrDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdHdrDet.GetSetorderactivity = replaceNull(dataReader, "orderactivity");
                    modOrdHdrDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdHdrDet.GetSetpricetype = replaceNull(dataReader, "pricetype");
                    modOrdHdrDet.GetSetCompFromDetails.GetSetcomp = replaceNull(dataReader, "compfrom");
                    modOrdHdrDet.GetSetCompFromDetails.GetSetcomp_name = replaceNull(dataReader, "comp1_comp_name");
                    modOrdHdrDet.GetSetCompFromDetails.GetSetcomp_address = replaceNull(dataReader, "comp1_comp_address");
                    modOrdHdrDet.GetSetCompFromDetails.GetSetcomp_contact = replaceNull(dataReader, "comp1_comp_contact");
                    modOrdHdrDet.GetSetCompFromDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp1_comp_contactno");
                    modOrdHdrDet.GetSetCompToDetails.GetSetcomp = replaceNull(dataReader, "compto");
                    modOrdHdrDet.GetSetCompToDetails.GetSetcomp_name = replaceNull(dataReader, "comp2_comp_name");
                    modOrdHdrDet.GetSetCompToDetails.GetSetcomp_address = replaceNull(dataReader, "comp2_comp_address");
                    modOrdHdrDet.GetSetCompToDetails.GetSetcomp_contact = replaceNull(dataReader, "comp2_comp_contact");
                    modOrdHdrDet.GetSetCompToDetails.GetSetcomp_contactno = replaceNull(dataReader, "comp2_comp_contactno");
                    modOrdHdrDet.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    modOrdHdrDet.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modOrdHdrDet.GetSettransferamount = replaceDoubleZero(dataReader, "transferamount");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modOrdHdrDet.GetSetorderremarks = replaceNull(dataReader, "orderremarks");
                    modOrdHdrDet.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    modOrdHdrDet.GetSetordercreated = replaceNull(dataReader, "ordercreated");
                    modOrdHdrDet.GetSetordercreateddate = replaceNull(dataReader, "ordercreateddate");
                    modOrdHdrDet.GetSetorderapproved = replaceNull(dataReader, "orderapproved");
                    modOrdHdrDet.GetSetorderapproveddate = replaceNull(dataReader, "orderapproveddate");
                    modOrdHdrDet.GetSetordercancelled = replaceNull(dataReader, "ordercancelled");
                    modOrdHdrDet.GetSetordercancelleddate = replaceNull(dataReader, "ordercancelleddate");
                    modOrdHdrDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdHdrDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdHdrDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdHdrDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdHdrDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdHdrDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdHdrDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdHdrDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdHdrDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdHdrDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdHdrDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdHdrDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdHdrDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdHdrDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modOrdHdrDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdHdrDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdHdrDetMod.Add(modOrdHdrDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferOrderHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdHdrDetMod;
    }


    public MainModel getTransferOrderDetailsDetails(String comp, String orderno, int lineno, String itemno)
    {
        MainModel modOrdDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT transfer_details.comp, transfer_details.orderno, transfer_details.lineno, transfer_header.ordercat, ";
                query = query + " 	     transfer_details.itemno, transfer_details.itemdesc, transfer_details.remarks, transfer_details.unitprice, ";
                query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                query = query + "        transfer_details.totalprice, transfer_details.deliverqty, transfer_details.invoiceamount, transfer_details.receiptqty, transfer_details.billingamount ";
                query = query + " from   transfer_details, transfer_header ";
                query = query + " WHERE  transfer_details.comp is not NULL ";
                query = query + " AND  transfer_details.comp = transfer_header.comp ";
                query = query + " AND  transfer_details.orderno = transfer_header.orderno ";
                query = query + " and  transfer_details.comp = '" + comp + "' ";
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  transfer_details.orderno = '" + orderno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  transfer_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  transfer_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by transfer_details.comp, transfer_details.orderno, transfer_details.lineno ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetordercat = replaceNull(dataReader, "ordercat");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetdeliverqty = replaceZero(dataReader, "deliverqty");
                    modOrdDet.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferOrderDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modOrdDet;
    }

    public String insertTransferOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO transfer_details (comp, orderno, lineno, itemno, itemdesc, remarks, unitprice, discamount, quantity, orderprice, taxcode, taxrate, taxamount, totalprice, deliverqty, invoiceamount, receiptqty, billingamount) ";
                query = query + " VALUES (?comp, ?orderno, ?lineno, ?itemno, ?itemdesc, ?remarks, ?unitprice, ?discamount, ?quantity, ?orderprice, ?taxcode, ?taxrate, ?taxamount, ?totalprice, ?deliverqty, ?invoiceamount, ?receiptqty, ?billingamount) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?deliverqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetdeliverqty;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModOrderDet.GetSetinvoiceamount;
                cmd.Parameters.Add("?receiptqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetreceiptqty;
                cmd.Parameters.Add("?billingamount", MySqlDbType.Double).Value = oModOrderDet.GetSetbillingamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertTransferOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateTransferOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE transfer_details ";
                query = query + " SET    itemno = ?itemno, itemdesc = ?itemdesc, remarks = ?remarks, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, orderprice = ?orderprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalprice = ?totalprice, deliverqty = ?deliverqty, invoiceamount = ?invoiceamount, receiptqty = ?receiptqty, billingamount = ?billingamount ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModOrderDet.GetSetitemdesc;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModOrderDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModOrderDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrderDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModOrderDet.GetSetquantity;
                cmd.Parameters.Add("?orderprice", MySqlDbType.Double).Value = oModOrderDet.GetSetorderprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModOrderDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModOrderDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrderDet.GetSettaxamount;
                cmd.Parameters.Add("?totalprice", MySqlDbType.Double).Value = oModOrderDet.GetSettotalprice;
                cmd.Parameters.Add("?deliverqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetdeliverqty;
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModOrderDet.GetSetinvoiceamount;
                cmd.Parameters.Add("?receiptqty", MySqlDbType.Int16).Value = oModOrderDet.GetSetreceiptqty;
                cmd.Parameters.Add("?billingamount", MySqlDbType.Double).Value = oModOrderDet.GetSetbillingamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateTransferOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateTransferOrderHeader(MainModel oModOrder)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE transfer_header ";
                query = query + " SET    ordercat = ?ordercat, ordertype = ?ordertype, orderactivity = ?orderactivity, pricetype = ?pricetype, compfrom = ?compfrom, compto = ?compto, transferamount = ?transferamount, discamount = ?discamount, ";
                query = query + "        orderamount = ?orderamount, taxamount = ?taxamount, totalamount = ?totalamount, shipmentdate = ?shipmentdate, receiptdate = ?receiptdate, orderremarks = ?orderremarks, orderstatus = ?orderstatus, ordercreated = ?ordercreated, ordercreateddate = ?ordercreateddate, orderapproved = ?orderapproved, orderapproveddate = ?orderapproveddate, ordercancelled = ?ordercancelled, ordercancelleddate = ?ordercancelleddate ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrder.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrder.GetSetorderno;
                cmd.Parameters.Add("?ordercat", MySqlDbType.VarChar).Value = oModOrder.GetSetordercat;
                cmd.Parameters.Add("?ordertype", MySqlDbType.VarChar).Value = oModOrder.GetSetordertype;
                cmd.Parameters.Add("?orderactivity", MySqlDbType.VarChar).Value = oModOrder.GetSetorderactivity;
                cmd.Parameters.Add("?pricetype", MySqlDbType.VarChar).Value = oModOrder.GetSetpricetype;
                cmd.Parameters.Add("?compfrom", MySqlDbType.VarChar).Value = oModOrder.GetSetCompFromDetails.GetSetcomp;
                cmd.Parameters.Add("?compto", MySqlDbType.VarChar).Value = oModOrder.GetSetCompToDetails.GetSetcomp;
                cmd.Parameters.Add("?transferamount", MySqlDbType.Double).Value = oModOrder.GetSettransferamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModOrder.GetSetdiscamount;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModOrder.GetSetorderamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModOrder.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModOrder.GetSettotalamount;
                if (oModOrder.GetSetshipmentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetshipmentdate, ukDtfi);
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = null;
                }
                if (oModOrder.GetSetreceiptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModOrder.GetSetreceiptdate, ukDtfi);
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?orderremarks", MySqlDbType.VarChar).Value = oModOrder.GetSetorderremarks;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModOrder.GetSetorderstatus;
                cmd.Parameters.Add("?ordercreated", MySqlDbType.VarChar).Value = oModOrder.GetSetordercreated;
                if (oModOrder.GetSetordercreated.Length > 0)
                {
                    //WriteToLogFile("MainController-updateOrderHeader: oModOrder.GetSetordercreated - " + oModOrder.GetSetordercreateddate);
                    if (oModOrder.GetSetordercreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercreateddate);
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = datetime;
                        //WriteToLogFile("MainController-updateOrderHeader: datetime - " + datetime);
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercreateddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderapproved", MySqlDbType.VarChar).Value = oModOrder.GetSetorderapproved;
                if (oModOrder.GetSetorderapproved.Length > 0)
                {
                    if (oModOrder.GetSetorderapproveddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetorderapproveddate);
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderapproveddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?ordercancelled", MySqlDbType.VarChar).Value = oModOrder.GetSetordercancelled;
                if (oModOrder.GetSetordercancelled.Length > 0)
                {
                    if (oModOrder.GetSetordercancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModOrder.GetSetordercancelleddate);
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?ordercancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateTransferOrderHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateTransferOrderHeaderInfo(String sComp, String sOrderNo)
    {
        String result = "Y";

        MainModel oModOrdHdr = new MainModel();
        ArrayList lsOrderLineItem = new ArrayList();

        try
        {
            oModOrdHdr = getTransferOrderHeaderDetails(sComp, "", "", sOrderNo);
            if (oModOrdHdr.GetSetorderno.Length > 0)
            {
                double transferamount = 0, discamount = 0, orderamount = 0, taxamount = 0, totalamount = 0;
                lsOrderLineItem = getTransferOrderDetailsList(sComp, sOrderNo, 0, "");
                for (int i = 0; i < lsOrderLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsOrderLineItem[i];
                    transferamount = transferamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity);
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    orderamount = orderamount + oModLineItem.GetSetorderprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalprice;
                }
                oModOrdHdr.GetSettransferamount = transferamount;
                oModOrdHdr.GetSetdiscamount = discamount;
                oModOrdHdr.GetSetorderamount = orderamount;
                oModOrdHdr.GetSettaxamount = taxamount;
                oModOrdHdr.GetSettotalamount = totalamount;
                //update order header
                result = updateTransferOrderHeader(oModOrdHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateTransferOrderHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String deleteTransferOrderDetails(MainModel oModOrderDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM transfer_details ";
                query = query + " WHERE  comp = ?comp AND orderno = ?orderno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModOrderDet.GetSetcomp;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModOrderDet.GetSetorderno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModOrderDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteTransferOrderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getTransferPendingShipment(String comp, String bpid, String shipmentno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct transfer_header.comp, transfer_header.compto, comp_details.comp_name, comp_details.comp_address, ";
                query = query + "        comp_details.comp_contact, comp_details.comp_contactno ";
                query = query + " from   transfer_details, transfer_header, comp_details ";
                query = query + " WHERE  transfer_header.comp is not NULL ";
                query = query + " AND    transfer_header.comp = transfer_details.comp ";
                query = query + " AND    transfer_header.orderno = transfer_details.orderno ";
                query = query + " AND    transfer_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    transfer_details.quantity - transfer_details.deliverqty - ifnull((select sum(shipment_details.shipment_quantity) from shipment_details where shipment_details.comp = transfer_details.comp and shipment_details.shipmentno = '" + shipmentno + "' and shipment_details.itemno = transfer_details.itemno and shipment_details.orderno = transfer_details.orderno and shipment_details.order_lineno = transfer_details.lineno),0) > 0 ";
                query = query + " AND    transfer_header.compto = comp_details.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.compfrom = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.compto = '" + bpid + "' ";
                }
                query = query + " order by transfer_header.compto ";
                //WriteToLogFile("MainController-getTransferPendingShipment [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetbpid = replaceNull(dataReader, "compto");
                    modOrdDet.GetSetbpdesc = replaceNull(dataReader, "comp_name");
                    modOrdDet.GetSetbpaddress = replaceNull(dataReader, "comp_address");
                    modOrdDet.GetSetbpcontact = replaceNull(dataReader, "comp_contact");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferPendingShipment: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getTransferPendingReceipt(String comp, String bpid, String receiptno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct transfer_header.comp, transfer_header.compfrom, comp_details.comp_name, comp_details.comp_address, ";
                query = query + "        comp_details.comp_contact, comp_details.comp_contactno ";
                query = query + " from   transfer_details, transfer_header, comp_details ";
                query = query + " WHERE  transfer_header.comp is not NULL ";
                query = query + " AND    transfer_header.comp = transfer_details.comp ";
                query = query + " AND    transfer_header.orderno = transfer_details.orderno ";
                query = query + " AND    transfer_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    transfer_details.quantity - transfer_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = transfer_header.compto and transfer_header.comp = transfer_details.comp and transfer_header.orderno = transfer_details.orderno and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = transfer_details.itemno and receipt_details.orderno = transfer_details.orderno and receipt_details.order_lineno = transfer_details.lineno),0) > 0 ";
                query = query + " AND    transfer_header.compfrom = comp_details.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.compto = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  transfer_header.compfrom = '" + bpid + "' ";
                }
                query = query + " order by transfer_header.compfrom ";
                //WriteToLogFile("MainController-getTransferPendingShipment [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetbpid = replaceNull(dataReader, "compfrom");
                    modOrdDet.GetSetbpdesc = replaceNull(dataReader, "comp_name");
                    modOrdDet.GetSetbpaddress = replaceNull(dataReader, "comp_address");
                    modOrdDet.GetSetbpcontact = replaceNull(dataReader, "comp_contact");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTransferPendingReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    #endregion

    #region/*** BEGIN FOR RECEIPT ***/

    public ArrayList getReceiptHeaderList(String comp, String receiptno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_header.comp, receipt_header.receiptno, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptcat, ";
                query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, ";
                query = query + "        receipt_header.remarks, receipt_header.status, receipt_header.createdby, receipt_header.createddate, ";
                query = query + "        receipt_header.confirmedby, receipt_header.confirmeddate, receipt_header.cancelledby, receipt_header.cancelleddate  ";
                query = query + " from   receipt_header ";
                query = query + " WHERE  receipt_header.comp is not NULL ";
                query = query + " and    receipt_header.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  upper(receipt_header.receiptno) like '%" + receiptno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.status = '" + status + "' ";
                }
                query = query + " order by receipt_header.comp, receipt_header.receiptno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modHdr = new MainModel();
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modHdr.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modHdr.GetSetreceiptcat = replaceNull(dataReader, "receiptcat");
                    modHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsHdrMod.Add(modHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }


    public MainModel getReceiptHeaderDetails(String comp, String receiptno)
    {
        MainModel modHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_header.comp, receipt_header.receiptno, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptcat, ";
                query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, ";
                query = query + "        receipt_header.remarks, receipt_header.status, receipt_header.createdby, receipt_header.createddate, ";
                query = query + "        receipt_header.confirmedby, receipt_header.confirmeddate, receipt_header.cancelledby, receipt_header.cancelleddate  ";
                query = query + " from   receipt_header ";
                query = query + " WHERE  receipt_header.comp is not NULL ";
                query = query + " and    receipt_header.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.receiptno  = '" + receiptno.ToUpper() + "' ";
                }
                query = query + " order by receipt_header.comp, receipt_header.receiptno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modHdr.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modHdr.GetSetreceiptcat = replaceNull(dataReader, "receiptcat");
                    modHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modHdr;
    }

    public ArrayList getReceiptHeaderDetailsList(String comp, String receiptno, String bpid, String startdate, String enddate, String orderno, String itemno, String status, String expensesstatus)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_header.comp, receipt_header.receiptno, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptcat, ";
                query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, ";
                query = query + "        receipt_header.remarks, receipt_header.status, receipt_header.createdby, receipt_header.createddate, ";
                query = query + "        receipt_header.confirmedby, receipt_header.confirmeddate, receipt_header.cancelledby, receipt_header.cancelleddate,  ";
                query = query + "        receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno, ";
                query = query + " 	     receipt_details.itemno, receipt_details.itemdesc, receipt_details.order_quantity, receipt_details.receipt_quantity, ";
                query = query + "        receipt_details.location, date_format(receipt_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        receipt_details.remarks, receipt_details.hasbilling  ";
                query = query + " from   receipt_header, receipt_details ";
                query = query + " WHERE  receipt_header.comp is not NULL ";
                query = query + " AND    receipt_header.comp = receipt_details.comp ";
                query = query + " AND    receipt_header.receiptno = receipt_details.receiptno ";
                query = query + " and    receipt_header.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  upper(receipt_header.receiptno) like '%" + receiptno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.status = '" + status + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.orderno = '" + orderno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.receiptdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  receipt_header.receiptdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.itemno = '" + itemno + "' ";
                }
                if (expensesstatus.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.hasbilling = '" + expensesstatus + "' ";
                }
                query = query + " order by receipt_header.comp, receipt_header.receiptno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modHdr = new MainModel();
                    modHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modHdr.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modHdr.GetSetreceiptdate = replaceNull(dataReader, "str_receiptdate");
                    modHdr.GetSetreceiptcat = replaceNull(dataReader, "receiptcat");
                    modHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modHdr.GetSetlineno = replaceZero(dataReader, "lineno");
                    modHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modHdr.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modHdr.GetSetitemno = replaceNull(dataReader, "itemno");
                    modHdr.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modHdr.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modHdr.GetSetreceipt_quantity = replaceZero(dataReader, "receipt_quantity");
                    modHdr.GetSetlocation = replaceNull(dataReader, "location");
                    modHdr.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modHdr.GetSethasbilling = replaceNull(dataReader, "hasbilling");
                    lsHdrMod.Add(modHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public ArrayList getReceiptDetailsList(String comp, String receiptno, int lineno, String itemno)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_details.comp, receipt_details.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno, ";
                query = query + " 	     receipt_details.itemno, receipt_details.itemdesc, receipt_details.order_quantity, receipt_details.receipt_quantity, ";
                query = query + "        receipt_details.location, date_format(receipt_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        receipt_details.remarks, receipt_details.hasbilling  ";
                query = query + " from   receipt_details ";
                query = query + " WHERE  receipt_details.comp is not NULL ";
                query = query + " and    receipt_details.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.receiptno = '" + receiptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  receipt_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by receipt_details.comp, receipt_details.receiptno, receipt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modReceiptDet = new MainModel();
                    modReceiptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modReceiptDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modReceiptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modReceiptDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modReceiptDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modReceiptDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modReceiptDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modReceiptDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modReceiptDet.GetSetreceipt_quantity = replaceZero(dataReader, "receipt_quantity");
                    modReceiptDet.GetSetlocation = replaceNull(dataReader, "location");
                    modReceiptDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modReceiptDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modReceiptDet.GetSethasbilling = replaceNull(dataReader, "hasbilling");
                    lsHdrMod.Add(modReceiptDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public ArrayList getReceiptDetailsList(String comp, String receiptno, int lineno, String orderno, int order_lineno, String itemno)
    {
        ArrayList lsHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_details.comp, receipt_details.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno, ";
                query = query + " 	     receipt_details.itemno, receipt_details.itemdesc, receipt_details.order_quantity, receipt_details.receipt_quantity, ";
                query = query + "        receipt_details.location, date_format(receipt_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        receipt_details.remarks, receipt_details.hasbilling  ";
                query = query + " from   receipt_details ";
                query = query + " WHERE  receipt_details.comp is not NULL ";
                query = query + " and    receipt_details.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.receiptno = '" + receiptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  receipt_details.lineno = " + lineno + " ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  receipt_details.order_lineno = " + order_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by receipt_details.comp, receipt_details.receiptno, receipt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modReceiptDet = new MainModel();
                    modReceiptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modReceiptDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modReceiptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modReceiptDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modReceiptDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modReceiptDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modReceiptDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modReceiptDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modReceiptDet.GetSetreceipt_quantity = replaceZero(dataReader, "receipt_quantity");
                    modReceiptDet.GetSetlocation = replaceNull(dataReader, "location");
                    modReceiptDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modReceiptDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modReceiptDet.GetSethasbilling = replaceNull(dataReader, "hasbilling");
                    lsHdrMod.Add(modReceiptDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsHdrMod;
    }

    public MainModel getReceiptDetailsDetails(String comp, String receiptno, int lineno, String itemno)
    {
        MainModel modReceiptDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_details.comp, receipt_details.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno, ";
                query = query + " 	     receipt_details.itemno, receipt_details.itemdesc, receipt_details.order_quantity, receipt_details.receipt_quantity, ";
                query = query + "        receipt_details.location, date_format(receipt_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        receipt_details.remarks, receipt_details.hasbilling  ";
                query = query + " from   receipt_details ";
                query = query + " WHERE  receipt_details.comp is not NULL ";
                query = query + " and    receipt_details.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.receiptno = '" + receiptno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  receipt_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by receipt_details.comp, receipt_details.receiptno, receipt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modReceiptDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modReceiptDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modReceiptDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modReceiptDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modReceiptDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modReceiptDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modReceiptDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modReceiptDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modReceiptDet.GetSetreceipt_quantity = replaceZero(dataReader, "receipt_quantity");
                    modReceiptDet.GetSetlocation = replaceNull(dataReader, "location");
                    modReceiptDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modReceiptDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modReceiptDet.GetSethasbilling = replaceNull(dataReader, "hasbilling");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modReceiptDet;
    }

    public ArrayList getLineItemPendingReceipt(String comp, String bpid, String receiptno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_details.lineno, ";
                query = query + "        purchase_details.itemno, purchase_details.itemdesc, item.itemcat, purchase_details.remarks, purchase_details.unitprice, ";
                query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                query = query + "        purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) order_quantity, ";
                query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                query = query + " from   purchase_details, purchase_header, item ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " AND    purchase_header.comp = purchase_details.comp ";
                query = query + " AND    purchase_header.orderno = purchase_details.orderno ";
                query = query + " AND    purchase_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) > 0 ";
                query = query + " AND    purchase_details.comp = item.comp ";
                query = query + " AND    purchase_details.itemno = item.itemno ";
                query = query + " and    purchase_header.comp = '" + comp + "' ";
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.bpid = '" + bpid + "' ";
                }
                query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getLineItemPendingReceipt(String comp, String bpid, String receiptno, String orderno, String ordercat)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (ordercat.Equals("TRANSFER_ORDER"))
                {
                    query = "";
                    query = query + " SELECT transfer_details.comp, transfer_details.orderno, transfer_header.ordertype, transfer_details.lineno, ";
                    query = query + "        transfer_details.itemno, transfer_details.itemdesc, item.itemcat, transfer_details.remarks, transfer_details.unitprice, ";
                    query = query + "        transfer_details.discamount, transfer_details.quantity, transfer_details.orderprice, ";
                    query = query + "        transfer_details.deliverqty - transfer_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = transfer_header.compto and transfer_header.comp = transfer_details.comp and transfer_header.orderno = transfer_details.orderno and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = transfer_details.itemno and receipt_details.orderno = transfer_details.orderno and receipt_details.order_lineno = transfer_details.lineno),0) order_quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate, transfer_details.taxamount, ";
                    query = query + "        transfer_details.totalprice, transfer_details.receiptqty, transfer_details.billingamount ";
                    query = query + " from   transfer_details, transfer_header, item ";
                    query = query + " WHERE  transfer_header.comp is not NULL ";
                    query = query + " AND    transfer_header.comp = transfer_details.comp ";
                    query = query + " AND    transfer_header.orderno = transfer_details.orderno ";
                    query = query + " AND    transfer_header.orderstatus = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.quantity - transfer_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = transfer_header.compto and transfer_header.comp = transfer_details.comp and transfer_header.orderno = transfer_details.orderno and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = transfer_details.itemno and receipt_details.orderno = transfer_details.orderno and receipt_details.order_lineno = transfer_details.lineno),0) > 0 ";
                    query = query + " AND    transfer_details.comp = item.comp ";
                    query = query + " AND    transfer_details.itemno = item.itemno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.compto = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.compfrom = '" + bpid + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    if (ordercat.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordercat = '" + ordercat + "' ";
                    }
                    query = query + " order by transfer_details.comp, transfer_details.orderno, transfer_details.lineno ";
                }
                else
                {
                    query = "";
                    query = query + " SELECT purchase_details.comp, purchase_details.orderno, purchase_header.ordertype, purchase_details.lineno, ";
                    query = query + "        purchase_details.itemno, purchase_details.itemdesc, item.itemcat, purchase_details.remarks, purchase_details.unitprice, ";
                    query = query + "        purchase_details.discamount, purchase_details.quantity, purchase_details.orderprice, ";
                    query = query + "        purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) order_quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate, purchase_details.taxamount, ";
                    query = query + "        purchase_details.totalprice, purchase_details.receiptqty, purchase_details.billingamount ";
                    query = query + " from   purchase_details, purchase_header, item ";
                    query = query + " WHERE  purchase_header.comp is not NULL ";
                    query = query + " AND    purchase_header.comp = purchase_details.comp ";
                    query = query + " AND    purchase_header.orderno = purchase_details.orderno ";
                    query = query + " AND    purchase_header.orderstatus = 'CONFIRMED' ";
                    query = query + " AND    purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) > 0 ";
                    query = query + " AND    purchase_details.comp = item.comp ";
                    query = query + " AND    purchase_details.itemno = item.itemno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.bpid = '" + bpid + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.orderno = '" + orderno + "' ";
                    }
                    if (ordercat.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.ordercat = '" + ordercat + "' ";
                    }
                    query = query + " order by purchase_details.comp, purchase_details.orderno, purchase_details.lineno ";
                }
                //WriteToLogFile("MainController-getLineItemPendingReceipt [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modOrdDet.GetSetordertype = replaceNull(dataReader, "ordertype");
                    modOrdDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modOrdDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modOrdDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modOrdDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modOrdDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modOrdDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modOrdDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modOrdDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modOrdDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modOrdDet.GetSetorderprice = replaceDoubleZero(dataReader, "orderprice");
                    modOrdDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modOrdDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modOrdDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modOrdDet.GetSettotalprice = replaceDoubleZero(dataReader, "totalprice");
                    modOrdDet.GetSetreceiptqty = replaceZero(dataReader, "receiptqty");
                    modOrdDet.GetSetbillingamount = replaceDoubleZero(dataReader, "billingamount");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public ArrayList getOrderPendingReceipt(String comp, String bpid, String receiptno)
    {
        ArrayList lsOrdDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct purchase_header.comp, purchase_header.bpid, businesspartner.bpdesc, businesspartner.bpaddress, ";
                query = query + "        businesspartner.bpcontact, businesspartner.bpreference ";
                query = query + " from   purchase_details, purchase_header, businesspartner ";
                query = query + " WHERE  purchase_header.comp is not NULL ";
                query = query + " AND    purchase_header.comp = purchase_details.comp ";
                query = query + " AND    purchase_header.orderno = purchase_details.orderno ";
                query = query + " AND    purchase_header.orderstatus = 'CONFIRMED' ";
                query = query + " AND    purchase_details.quantity - purchase_details.receiptqty - ifnull((select sum(receipt_details.receipt_quantity) from receipt_details where receipt_details.comp = purchase_details.comp and receipt_details.receiptno = '" + receiptno + "' and receipt_details.itemno = purchase_details.itemno and receipt_details.orderno = purchase_details.orderno and receipt_details.order_lineno = purchase_details.lineno),0) > 0 ";
                query = query + " AND    purchase_header.comp = businesspartner.comp ";
                query = query + " AND    purchase_header.bpid = businesspartner.bpid ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  purchase_header.bpid = '" + bpid + "' ";
                }
                query = query + " order by purchase_header.comp, purchase_header.bpid ";
                //WriteToLogFile("MainController-getOrderPendingShipment [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modOrdDet = new MainModel();
                    modOrdDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modOrdDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modOrdDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modOrdDet.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modOrdDet.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modOrdDet.GetSetbpreference = replaceNull(dataReader, "bpreference");
                    lsOrdDetMod.Add(modOrdDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getOrderPendingReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsOrdDetMod;
    }

    public MainModel getReceiptDetailsOther(String comp, String receiptno, String orderno, int order_lineno, String itemno, String status)
    {
        MainModel modShipmentDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT receipt_details.comp, receipt_details.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno, ";
                query = query + " 	     receipt_details.itemno, receipt_details.itemdesc, receipt_details.order_quantity, receipt_details.receipt_quantity, ";
                query = query + "        receipt_details.location, date_format(receipt_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        receipt_details.remarks, receipt_details.hasbilling  ";
                query = query + " from   receipt_details ";
                query = query + " WHERE  receipt_details.comp is not NULL ";
                query = query + " and    receipt_details.comp = '" + comp + "' ";
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.receiptno <> '" + receiptno + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  receipt_details.order_lineno = " + order_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  receipt_details.receiptno IN (SELECT receiptno FROM receipt_header WHERE status = '" + status + "' and comp = receipt_details.comp) ";
                }
                query = query + " order by receipt_details.comp, receipt_details.receiptno, receipt_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modShipmentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modShipmentDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modShipmentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modShipmentDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modShipmentDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modShipmentDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modShipmentDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modShipmentDet.GetSetorder_quantity = replaceZero(dataReader, "order_quantity");
                    modShipmentDet.GetSetreceipt_quantity = replaceZero(dataReader, "receipt_quantity");
                    modShipmentDet.GetSetlocation = replaceNull(dataReader, "location");
                    modShipmentDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modShipmentDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modShipmentDet.GetSethasbilling = replaceNull(dataReader, "hasbilling");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReceiptDetailsOther: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modShipmentDet;
    }

    public String insertReceiptHeader(MainModel oModReceipt)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO receipt_header (comp, receiptno, receiptdate, receiptcat, bpid, bpdesc, bpaddress, bpcontact, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?receiptno, ?receiptdate, ?receiptcat, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModReceipt.GetSetcomp;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModReceipt.GetSetreceiptno;
                if (oModReceipt.GetSetreceiptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetreceiptdate, ukDtfi);
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?receiptcat", MySqlDbType.VarChar).Value = oModReceipt.GetSetreceiptcat;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpcontact;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModReceipt.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModReceipt.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModReceipt.GetSetcreatedby;
                if (oModReceipt.GetSetcreatedby.Length > 0)
                {
                    if (oModReceipt.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModReceipt.GetSetconfirmedby;
                if (oModReceipt.GetSetconfirmedby.Length > 0)
                {
                    if (oModReceipt.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModReceipt.GetSetcancelledby;
                if (oModReceipt.GetSetcancelledby.Length > 0)
                {
                    if (oModReceipt.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertReceiptHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateReceiptHeader(MainModel oModReceipt)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE receipt_header ";
                query = query + " SET    receiptdate = ?receiptdate, receiptcat = ?receiptcat, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND receiptno = ?receiptno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModReceipt.GetSetcomp;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModReceipt.GetSetreceiptno;
                if (oModReceipt.GetSetreceiptdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetreceiptdate, ukDtfi);
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?receiptdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?receiptcat", MySqlDbType.VarChar).Value = oModReceipt.GetSetreceiptcat;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModReceipt.GetSetbpcontact;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModReceipt.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModReceipt.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModReceipt.GetSetcreatedby;
                if (oModReceipt.GetSetcreatedby.Length > 0)
                {
                    if (oModReceipt.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModReceipt.GetSetconfirmedby;
                if (oModReceipt.GetSetconfirmedby.Length > 0)
                {
                    if (oModReceipt.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModReceipt.GetSetcancelledby;
                if (oModReceipt.GetSetcancelledby.Length > 0)
                {
                    if (oModReceipt.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModReceipt.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateReceiptHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertReceiptDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO receipt_details (comp, receiptno, lineno, orderno, order_lineno, itemno, itemdesc, order_quantity, receipt_quantity, location, datesoh, remarks, hasbilling) ";
                query = query + " VALUES (?comp, ?receiptno, ?lineno, ?orderno, ?order_lineno, ?itemno, ?itemdesc, ?order_quantity, ?receipt_quantity, ?location, ?datesoh, ?remarks, ?hasbilling) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModDet.GetSetreceiptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDet.GetSetitemdesc;
                cmd.Parameters.Add("?order_quantity", MySqlDbType.Int16).Value = oModDet.GetSetorder_quantity;
                cmd.Parameters.Add("?receipt_quantity", MySqlDbType.Int16).Value = oModDet.GetSetreceipt_quantity;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDet.GetSetlocation;
                if (oModDet.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDet.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModDet.GetSetremarks;
                cmd.Parameters.Add("?hasbilling", MySqlDbType.VarChar).Value = oModDet.GetSethasbilling;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertReceiptDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateReceiptDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE receipt_details ";
                query = query + " SET    orderno = ?orderno, order_lineno = ?order_lineno, itemno = ?itemno, itemdesc = ?itemdesc, order_quantity = ?order_quantity, receipt_quantity = ?receipt_quantity, location = ?location, datesoh = ?datesoh, remarks = ?remarks, hasbilling = ?hasbilling ";
                query = query + " WHERE  comp = ?comp AND receiptno = ?receiptno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModDet.GetSetreceiptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDet.GetSetitemdesc;
                cmd.Parameters.Add("?order_quantity", MySqlDbType.Int16).Value = oModDet.GetSetorder_quantity;
                cmd.Parameters.Add("?receipt_quantity", MySqlDbType.Int16).Value = oModDet.GetSetreceipt_quantity;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDet.GetSetlocation;
                if (oModDet.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDet.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModDet.GetSetremarks;
                cmd.Parameters.Add("?hasbilling", MySqlDbType.VarChar).Value = oModDet.GetSethasbilling;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateReceiptDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteReceiptDetails(MainModel oModDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM receipt_details ";
                query = query + " WHERE  comp = ?comp AND receiptno = ?receiptno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDet.GetSetcomp;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModDet.GetSetreceiptno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteReceiptDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    #endregion/*** END FOR RECEIPT ***/

    /*** BEGIN FOR EXPENSES ***/

    public ArrayList getLineItemPendingExpenses(String comp, String bpid, String ordertype, String expensescat, String receiptno, String orderno, String itemno)
    {
        ArrayList lsPendExpMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (expensescat.Equals("PURCHASE_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, item.itemtype, ";
                    query = query + "        purchase_details.unitprice, purchase_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, purchase_header, purchase_details, item ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = item.comp ";
                    query = query + " AND    receipt_details.itemno = item.itemno ";
                    query = query + " AND    receipt_details.comp = purchase_details.comp ";
                    query = query + " AND    receipt_details.orderno = purchase_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = purchase_details.lineno ";
                    query = query + " AND    receipt_details.itemno = purchase_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    purchase_details.comp = purchase_header.comp ";
                    query = query + " AND    purchase_details.orderno = purchase_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.orderno = '" + orderno + "' ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendExp.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else if (expensescat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, item.itemtype, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, transfer_header, transfer_details, item ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = item.comp ";
                    query = query + " AND    receipt_details.itemno = item.itemno ";
                    query = query + " AND    receipt_details.comp = transfer_header.compto ";
                    query = query + " AND    receipt_details.orderno = transfer_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    receipt_details.itemno = transfer_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendExp.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingExpenses: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendExpMod;
    }

    public ArrayList getLineItemPendingExpenses(String comp, String bpid, String expensescat, String expensestype)
    {
        ArrayList lsPendExpMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (expensescat.Equals("PURCHASE_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, ";
                    query = query + "        purchase_details.unitprice, purchase_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, purchase_header, purchase_details ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = purchase_details.comp ";
                    query = query + " AND    receipt_details.orderno = purchase_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = purchase_details.lineno ";
                    query = query + " AND    receipt_details.itemno = purchase_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    purchase_details.comp = purchase_header.comp ";
                    query = query + " AND    purchase_details.orderno = purchase_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else if (expensescat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, transfer_header, transfer_details ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = transfer_header.compto ";
                    query = query + " AND    receipt_details.orderno = transfer_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    receipt_details.itemno = transfer_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else
                {
                    query = "";
                    query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                    query = query + "        parameters.createdby, parameters.createddate ";
                    query = query + " FROM   parameters ";
                    query = query + " WHERE  parameters.comp = '000' ";
                    if (expensestype.Trim().Length > 0)
                    {
                        query = query + " AND    parameters.paramtype = '" + expensestype + "' ";
                    }
                    query = query + " ORDER  BY parameters.paramcode ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetparamid = replaceNull(dataReader, "paramid");
                        modPendExp.GetSetparamtype = replaceNull(dataReader, "paramtype");
                        modPendExp.GetSetparamcode = replaceNull(dataReader, "paramcode");
                        modPendExp.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                        modPendExp.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingExpenses: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendExpMod;
    }

    public ArrayList getLineItemPendingExpenses(String comp, String bpid, String ordertype, String expensescat, String expensestype, String receiptno)
    {
        ArrayList lsPendExpMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (expensescat.Equals("PURCHASE_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, ";
                    query = query + "        purchase_details.unitprice, purchase_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, purchase_header, purchase_details ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = purchase_details.comp ";
                    query = query + " AND    receipt_details.orderno = purchase_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = purchase_details.lineno ";
                    query = query + " AND    receipt_details.itemno = purchase_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    purchase_details.comp = purchase_header.comp ";
                    query = query + " AND    purchase_details.orderno = purchase_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else if (expensescat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, transfer_header, transfer_details ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = transfer_header.compto ";
                    query = query + " AND    receipt_details.orderno = transfer_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    receipt_details.itemno = transfer_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else
                {
                    query = "";
                    query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                    query = query + "        parameters.createdby, parameters.createddate ";
                    query = query + " FROM   parameters ";
                    query = query + " WHERE  parameters.comp = '000' ";
                    if (expensestype.Trim().Length > 0)
                    {
                        query = query + " AND    parameters.paramtype = '" + expensestype + "' ";
                    }
                    query = query + " ORDER  BY parameters.paramcode ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetparamid = replaceNull(dataReader, "paramid");
                        modPendExp.GetSetparamtype = replaceNull(dataReader, "paramtype");
                        modPendExp.GetSetparamcode = replaceNull(dataReader, "paramcode");
                        modPendExp.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                        modPendExp.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close(); 
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingExpenses: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendExpMod;
    }

    public ArrayList getLineItemPendingExpenses(String comp, String bpid, String ordertype, String expensescat, String receiptno, int receiptlineno, String orderno, int orderlineno, String itemno)
    {
        ArrayList lsPendExpMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                if (expensescat.Equals("PURCHASE_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(purchase_header.orderdate,'%d-%m-%Y') str_orderdate, purchase_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, item.itemtype, ";
                    query = query + "        purchase_details.unitprice, purchase_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        purchase_details.taxcode, purchase_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, purchase_header, purchase_details, item ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = item.comp ";
                    query = query + " AND    receipt_details.itemno = item.itemno ";
                    query = query + " AND    receipt_details.comp = purchase_details.comp ";
                    query = query + " AND    receipt_details.orderno = purchase_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = purchase_details.lineno ";
                    query = query + " AND    receipt_details.itemno = purchase_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    purchase_details.comp = purchase_header.comp ";
                    query = query + " AND    purchase_details.orderno = purchase_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    if (receiptlineno > 0)
                    {
                        query = query + " and  receipt_details.lineno = " + receiptlineno + " ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  purchase_header.orderno = '" + orderno + "' ";
                    }
                    if (orderlineno > 0)
                    {
                        query = query + " and  receipt_details.order_lineno = " + orderlineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendExp.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                else if (expensescat.Equals("TRANSFER_INVOICE"))
                {
                    query = "";
                    query = query + " SELECT receipt_header.comp, date_format(receipt_header.receiptdate,'%d-%m-%Y') str_receiptdate, receipt_header.receiptno, receipt_details.lineno, ";
                    query = query + "        receipt_header.bpid, receipt_header.bpdesc, receipt_header.bpaddress, receipt_header.bpcontact, receipt_header.remarks, ";
                    query = query + "        date_format(transfer_header.orderdate,'%d-%m-%Y') str_orderdate, transfer_header.ordertype, receipt_details.orderno, receipt_details.order_lineno, receipt_details.itemno, receipt_details.itemdesc, item.itemtype, ";
                    query = query + "        transfer_details.unitprice, transfer_details.discamount, receipt_details.receipt_quantity quantity, ";
                    query = query + "        transfer_details.taxcode, transfer_details.taxrate ";
                    query = query + " FROM   receipt_header, receipt_details, transfer_header, transfer_details, item ";
                    query = query + " WHERE  receipt_details.comp is not NULL ";
                    query = query + " AND    receipt_details.comp = item.comp ";
                    query = query + " AND    receipt_details.itemno = item.itemno ";
                    query = query + " AND    receipt_details.comp = transfer_header.compto ";
                    query = query + " AND    receipt_details.orderno = transfer_details.orderno ";
                    query = query + " AND    receipt_details.order_lineno = transfer_details.lineno ";
                    query = query + " AND    receipt_details.itemno = transfer_details.itemno ";
                    query = query + " AND    receipt_details.hasbilling = 'N' ";
                    query = query + " AND    receipt_details.comp = receipt_header.comp";
                    query = query + " AND    receipt_details.receiptno = receipt_header.receiptno ";
                    query = query + " AND    receipt_header.status = 'CONFIRMED' ";
                    query = query + " AND    transfer_details.comp = transfer_header.comp ";
                    query = query + " AND    transfer_details.orderno = transfer_header.orderno ";
                    if (comp.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.comp = '" + comp + "' ";
                    }
                    if (bpid.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.bpid = '" + bpid + "' ";
                    }
                    if (ordertype.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.ordertype = '" + ordertype + "' ";
                    }
                    if (receiptno.Trim().Length > 0)
                    {
                        query = query + " and  receipt_header.receiptno = '" + receiptno + "' ";
                    }
                    if (receiptlineno > 0)
                    {
                        query = query + " and  receipt_details.lineno = " + receiptlineno + " ";
                    }
                    if (orderno.Trim().Length > 0)
                    {
                        query = query + " and  transfer_header.orderno = '" + orderno + "' ";
                    }
                    if (orderlineno > 0)
                    {
                        query = query + " and  receipt_details.order_lineno = " + orderlineno + " ";
                    }
                    if (itemno.Trim().Length > 0)
                    {
                        query = query + " and  item.itemno = '" + itemno + "' ";
                    }
                    query = query + " order by receipt_header.comp, receipt_header.receiptno, receipt_details.lineno, receipt_details.orderno, receipt_details.order_lineno ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        MainModel modPendExp = new MainModel();
                        modPendExp.GetSetcomp = replaceNull(dataReader, "comp");
                        modPendExp.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                        modPendExp.GetSetlineno = replaceZero(dataReader, "lineno");
                        modPendExp.GetSetorderno = replaceNull(dataReader, "orderno");
                        modPendExp.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");

                        modPendExp.GetSetitemno = replaceNull(dataReader, "itemno");
                        modPendExp.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                        modPendExp.GetSetitemtype = replaceNull(dataReader, "itemtype");

                        modPendExp.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                        modPendExp.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                        modPendExp.GetSetquantity = replaceZero(dataReader, "quantity");
                        modPendExp.GetSetexpensesprice = Math.Round((modPendExp.GetSetunitprice - modPendExp.GetSetdiscamount) * modPendExp.GetSetquantity, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettaxcode = replaceNull(dataReader, "taxcode");
                        modPendExp.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                        modPendExp.GetSettaxamount = Math.Round(modPendExp.GetSetexpensesprice * modPendExp.GetSettaxrate / 100, 2, MidpointRounding.AwayFromZero);
                        modPendExp.GetSettotalexpenses = modPendExp.GetSetexpensesprice + modPendExp.GetSettaxamount;

                        modPendExp.GetSetbpid = replaceNull(dataReader, "bpid");
                        modPendExp.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                        modPendExp.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                        modPendExp.GetSetbpcontact = replaceNull(dataReader, "bpcontact");

                        lsPendExpMod.Add(modPendExp);
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingExpenses: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendExpMod;
    }

    public ArrayList getExpensesHeaderListSearching(String comp, String searchtype, String searchitem, String startdate, String enddate, String expensescat, String expensestype, String status)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (searchtype.Equals("EXPENSESNO") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + searchitem.ToUpper() + "%' ";
                }
                if (searchtype.Equals("BPID") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.bpid = '" + searchitem + "' ";
                }
                if (searchtype.Equals("BPDESC") && searchitem.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.bpdesc) like '%" + searchitem.ToUpper() + "%' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (expensescat.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensescat = '" + expensescat + "' ";
                }
                if (expensestype.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensestype = '" + expensestype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesdate desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderListSearching: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderList(String comp, String expensesno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesdate desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderList(String comp, String expensesno, String bpid, String startdate, String enddate, ArrayList expensescat, ArrayList expensestype, String status)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (expensescat.Count > 0)
                {
                    String expcat = "";
                    for (int i = 0; i < expensescat.Count; i++)
                    {
                        String str = (String)expensescat[i];
                        if (i.Equals(0))
                        {
                            expcat = "'" + str + "'";
                        }
                        else
                        {
                            expcat = expcat + ",'" + str + "'";
                        }
                    }
                    query = query + " and  expenses_header.expensescat in (" + expcat + ") ";
                }
                if (expensestype.Count > 0)
                {
                    String exptyp = "";
                    for (int i = 0; i < expensestype.Count; i++)
                    {
                        String str = (String)expensestype[i];
                        if (i.Equals(0))
                        {
                            exptyp = "'" + str + "'";
                        }
                        else
                        {
                            exptyp = exptyp + ",'" + str + "'";
                        }
                    }
                    query = query + " and  expenses_header.expensestype in (" + exptyp + ") ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate <= ?enddate ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesdate desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderList(String comp, String expensesno, String bpid, String startdate, String enddate, String additionalquery, String status)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate <= ?enddate ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesdate desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                //WriteToLogFile("MainController-getExpensesHeaderList: [SQL] " + query);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderListSum(String comp, String expensesno, String bpid, String startdate, String enddate, String additionalquery, String status)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, date_format(expenses_header.confirmeddate,'%m-%Y') str_confirmeddate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        sum(expenses_header.purchaseamount) sum_purchaseamount, sum(expenses_header.discamount) sum_discamount, sum(expenses_header.expensesamount) sum_expensesamount, ";
                query = query + "        sum(expenses_header.taxamount) sum_taxamount, sum(expenses_header.totalamount) sum_totalamount, sum(expenses_header.paypaidamount) sum_paypaidamount ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.confirmeddate <= ?enddate ";
                }
                query = query + " group by expenses_header.comp, date_format(expenses_header.confirmeddate,'%m-%Y'), expenses_header.expensestype, expenses_header.expensescat ";
                query = query + " order by expenses_header.comp, date_format(expenses_header.confirmeddate,'%m-%Y') ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                //WriteToLogFile("MainController-getExpensesHeaderList: [SQL] " + query);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate, ukDtfi);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate, ukDtfi);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "str_confirmeddate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "sum_purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "sum_discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "sum_expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "sum_taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "sum_totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "sum_paypaidamount");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderListSum: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderDetailsList(String comp, String expensesno, String bpid, String startdate, String enddate, String receiptno, String orderno, String itemno, String status, String paymentstatus)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate, ";
                query = query + "        expenses_details.lineno, expenses_details.receiptno, expenses_details.receipt_lineno, expenses_details.orderno, expenses_details.order_lineno, ";
                query = query + " 	     expenses_details.itemno, expenses_details.itemdesc, expenses_details.unitprice, expenses_details.discamount, expenses_details.quantity, expenses_details.expensesprice, expenses_details.taxcode, ";
                query = query + "        expenses_details.taxrate, expenses_details.taxamount, expenses_details.totalexpenses  ";
                query = query + " from   expenses_header, expenses_details ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " AND    expenses_header.comp = expenses_details.comp ";
                query = query + " AND    expenses_header.expensesno = expenses_details.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.receiptno = '" + receiptno + "' ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.orderno = '" + orderno + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.itemno = '" + itemno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate >= STR_TO_DATE('" + startdate + "', '%d-%m-%Y') ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate <= STR_TO_DATE('" + enddate + "', '%d-%m-%Y') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                if (paymentstatus.Trim().Length > 0)
                {
                    if (paymentstatus.Trim().Equals("Y"))
                    {
                        query = query + " and  expenses_header.totalamount - (case when expenses_header.expensescat = 'JOURNAL_VOUCHER' then expenses_header.totalamount else expenses_header.paypaidamount end) = 0 ";
                    }
                    else if (paymentstatus.Trim().Equals("N"))
                    {
                        query = query + " and  expenses_header.totalamount - (case when expenses_header.expensescat = 'JOURNAL_VOUCHER' then expenses_header.totalamount else expenses_header.paypaidamount end) > 0 ";
                    }
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modExpHdr.GetSetlineno = replaceZero(dataReader, "lineno");
                    modExpHdr.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modExpHdr.GetSetreceipt_lineno = replaceZero(dataReader, "receipt_lineno");
                    modExpHdr.GetSetorderno = replaceNull(dataReader, "orderno");
                    modExpHdr.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modExpHdr.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpHdr.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    //modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetquantity = replaceZero(dataReader, "quantity");
                    modExpHdr.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpHdr.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modExpHdr.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                    modExpHdr.GetSetExpensesDetails = getExpensesDetailsList(modExpHdr.GetSetcomp, modExpHdr.GetSetexpensesno, 0, "");
                    modExpHdr.GetSetPaymentDetails = getPaymentPaidDetailsList(modExpHdr.GetSetcomp, "", 0, modExpHdr.GetSetexpensesno);
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public ArrayList getExpensesHeaderDetailsList(String comp, String fyr, String expensesno, String bpid, String startdate, String enddate, String itemno, String status, String paymentstatus)
    {
        ArrayList lsExpHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate, ";
                query = query + " 	     expenses_details.itemno, expenses_details.itemdesc, expenses_details.expensesprice, expenses_details.totalexpenses, fis_posting.tranno, fis_posting.trancode ";
                query = query + " from   expenses_header, expenses_details left join fis_posting on expenses_details.comp = fis_posting.comp and expenses_details.expensesno = fis_posting.refno and expenses_details.lineno = fis_posting.lineno ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " AND    expenses_header.comp = expenses_details.comp ";
                query = query + " AND    expenses_header.expensesno = expenses_details.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  upper(expenses_header.expensesno) like '%" + expensesno.ToUpper() + "%' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.itemno = '" + itemno + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesdate <= ?enddate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }

                query = query + " order by expenses_header.comp, expenses_header.expensesno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Length > 0)
                {
                    if (startdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(startdate);
                        cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = null;
                }

                if (enddate.Length > 0)
                {
                    if (enddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(enddate);
                        cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = null;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetfyr = fyr;
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modExpHdr.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpHdr.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modExpHdr.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpHdr.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                    modExpHdr.GetSettranno = replaceNull(dataReader, "tranno");
                    modExpHdr.GetSettrancode = replaceNull(dataReader, "trancode");
                    lsExpHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpHdrMod;
    }

    public MainModel getExpensesHeaderDetails(String comp, String expensesno)
    {
        MainModel modExpHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesno = '" + expensesno + "' ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modExpHdr;
    }

    public ArrayList getExpensesDetailsList(String comp, String expensesno, int lineno, String itemno)
    {
        ArrayList lsExpDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_details.comp, expenses_details.expensesno, expenses_details.lineno, expenses_details.receiptno, expenses_details.receipt_lineno, expenses_details.orderno, expenses_details.order_lineno, ";
                query = query + " 	     expenses_details.itemno, expenses_details.itemdesc, ifnull(item.itemcat,'') itemcat, ifnull(item.itemtype,'') itemtype, expenses_details.unitprice, expenses_details.discamount, expenses_details.quantity, expenses_details.expensesprice, expenses_details.taxcode, ";
                query = query + "        expenses_details.taxrate, expenses_details.taxamount, expenses_details.totalexpenses  ";
                query = query + " from   expenses_details left join item on expenses_details.comp = item.comp AND  expenses_details.itemno = item.itemno ";
                query = query + " WHERE  expenses_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.expensesno = '" + expensesno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  expenses_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.itemno = '" + itemno + "' ";
                }
                query = query + " order by expenses_details.comp, expenses_details.expensesno, expenses_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpDet = new MainModel();
                    modExpDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modExpDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modExpDet.GetSetreceipt_lineno = replaceZero(dataReader, "receipt_lineno");
                    modExpDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modExpDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modExpDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modExpDet.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modExpDet.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modExpDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modExpDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modExpDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modExpDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpDet.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                    lsExpDetMod.Add(modExpDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpDetMod;
    }

    public ArrayList getExpensesDetailsList(String comp, String expensesno, int lineno, String receiptno, int receipt_lineno, String orderno, int order_lineno, String itemno)
    {
        ArrayList lsExpDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_details.comp, expenses_details.expensesno, expenses_details.lineno, expenses_details.receiptno, expenses_details.receipt_lineno, expenses_details.orderno, expenses_details.order_lineno, ";
                query = query + " 	     expenses_details.itemno, expenses_details.itemdesc, expenses_details.unitprice, expenses_details.discamount, expenses_details.quantity, expenses_details.expensesprice, expenses_details.taxcode, ";
                query = query + "        expenses_details.taxrate, expenses_details.taxamount, expenses_details.totalexpenses  ";
                query = query + " from   expenses_details ";
                query = query + " WHERE  expenses_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.expensesno = '" + expensesno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  expenses_details.lineno = " + lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.itemno = '" + itemno + "' ";
                }
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.receiptno = '" + receiptno + "' ";
                }
                if (receipt_lineno > 0)
                {
                    query = query + " and  expenses_details.receipt_lineno = " + receipt_lineno + " ";
                }
                if (orderno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.orderno = '" + orderno + "' ";
                }
                if (order_lineno > 0)
                {
                    query = query + " and  expenses_details.order_lineno = " + order_lineno + " ";
                }
                query = query + " order by expenses_details.comp, expenses_details.expensesno, expenses_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpDet = new MainModel();
                    modExpDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modExpDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modExpDet.GetSetreceipt_lineno = replaceZero(dataReader, "receipt_lineno");
                    modExpDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modExpDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modExpDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modExpDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modExpDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modExpDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modExpDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpDet.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                    lsExpDetMod.Add(modExpDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpDetMod;
    }

    public MainModel getExpensesDetailsDetails(String comp, String expensesno, int lineno, String receiptno, int receipt_lineno, String itemno, String status)
    {
        MainModel modExpDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_details.comp, expenses_details.expensesno, expenses_details.lineno, expenses_details.receiptno, expenses_details.receipt_lineno, expenses_details.orderno, expenses_details.order_lineno, ";
                query = query + " 	     expenses_details.itemno, expenses_details.itemdesc, expenses_details.unitprice, expenses_details.discamount, expenses_details.quantity, expenses_details.expensesprice, expenses_details.taxcode, ";
                query = query + "        expenses_details.taxrate, expenses_details.taxamount, expenses_details.totalexpenses  ";
                query = query + " from   expenses_details ";
                query = query + " WHERE  expenses_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.expensesno = '" + expensesno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  expenses_details.lineno = " + lineno + " ";
                }
                if (receiptno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.receiptno = '" + receiptno + "' ";
                }
                if (receipt_lineno > 0)
                {
                    query = query + " and  expenses_details.receipt_lineno = " + receipt_lineno + " ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.itemno = '" + itemno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_details.expensesno IN (SELECT expensesno FROM expenses_header WHERE status = '" + status + "' and comp = expenses_details.comp) ";
                }
                query = query + " order by expenses_details.comp, expenses_details.expensesno, expenses_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modExpDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modExpDet.GetSetreceiptno = replaceNull(dataReader, "receiptno");
                    modExpDet.GetSetreceipt_lineno = replaceZero(dataReader, "receipt_lineno");
                    modExpDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modExpDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modExpDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    //modInvDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpDet.GetSetunitprice = replaceDoubleZero(dataReader, "unitprice");
                    modExpDet.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modExpDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modExpDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    modExpDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpDet.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modExpDet;
    }

    public String insertExpensesHeader(MainModel oModExpenses)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO expenses_header (comp, expensesno, expensesdate, expensescat, expensestype, bpid, bpdesc, bpaddress, bpcontact, purchaseamount, discamount, expensesamount, taxamount, totalamount, paypaidamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?expensesno, ?expensesdate, ?expensescat, ?expensestype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?purchaseamount, ?discamount, ?expensesamount, ?taxamount, ?totalamount, ?paypaidamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpenses.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensesno;
                if (oModExpenses.GetSetexpensesdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetexpensesdate, ukDtfi);
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?expensescat", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensescat;
                cmd.Parameters.Add("?expensestype", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensestype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpcontact;
                cmd.Parameters.Add("?purchaseamount", MySqlDbType.Double).Value = oModExpenses.GetSetpurchaseamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModExpenses.GetSetdiscamount;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModExpenses.GetSetexpensesamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModExpenses.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModExpenses.GetSettotalamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModExpenses.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModExpenses.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModExpenses.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcreatedby;
                if (oModExpenses.GetSetcreatedby.Length > 0)
                {
                    if (oModExpenses.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModExpenses.GetSetconfirmedby;
                if (oModExpenses.GetSetconfirmedby.Length > 0)
                {
                    if (oModExpenses.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcancelledby;
                if (oModExpenses.GetSetcancelledby.Length > 0)
                {
                    if (oModExpenses.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertExpensesHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertExpensesHeader2(MainModel oModExpenses)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO expenses_header (comp, expensesno, expensesdate, expensescat, expensestype, bpid, bpdesc, bpaddress, bpcontact, purchaseamount, discamount, expensesamount, taxamount, totalamount, paypaidamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?expensesno, ?expensesdate, ?expensescat, ?expensestype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?purchaseamount, ?discamount, ?expensesamount, ?taxamount, ?totalamount, ?paypaidamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                
                //WriteToLogFile("MainController-insertExpensesHeader2: Remarks [" + oModExpenses.GetSetremarks + "]");
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpenses.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensesno;
                if (oModExpenses.GetSetexpensesdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetexpensesdate, ukDtfi);
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?expensescat", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensescat;
                cmd.Parameters.Add("?expensestype", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensestype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpcontact;
                cmd.Parameters.Add("?purchaseamount", MySqlDbType.Double).Value = oModExpenses.GetSetpurchaseamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModExpenses.GetSetdiscamount;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModExpenses.GetSetexpensesamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModExpenses.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModExpenses.GetSettotalamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModExpenses.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModExpenses.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModExpenses.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcreatedby;
                if (oModExpenses.GetSetcreatedby.Length > 0)
                {
                    if (oModExpenses.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcreateddate, ukDtfi);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModExpenses.GetSetconfirmedby;
                if (oModExpenses.GetSetconfirmedby.Length > 0)
                {
                    if (oModExpenses.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetconfirmeddate, ukDtfi);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcancelledby;
                if (oModExpenses.GetSetcancelledby.Length > 0)
                {
                    if (oModExpenses.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcancelleddate, ukDtfi);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertExpensesHeader2: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateExpensesHeader(MainModel oModExpenses)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE expenses_header ";
                query = query + " SET    expensesdate = ?expensesdate, expensescat = ?expensescat, expensestype = ?expensestype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, purchaseamount = ?purchaseamount, discamount = ?discamount, expensesamount = ?expensesamount, taxamount = ?taxamount, totalamount = ?totalamount, paypaidamount = ?paypaidamount, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND expensesno = ?expensesno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpenses.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensesno;
                if (oModExpenses.GetSetexpensesdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetexpensesdate, ukDtfi);
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?expensescat", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensescat;
                cmd.Parameters.Add("?expensestype", MySqlDbType.VarChar).Value = oModExpenses.GetSetexpensestype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModExpenses.GetSetbpcontact;
                cmd.Parameters.Add("?purchaseamount", MySqlDbType.Double).Value = oModExpenses.GetSetpurchaseamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModExpenses.GetSetdiscamount;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModExpenses.GetSetexpensesamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModExpenses.GetSettaxamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModExpenses.GetSettotalamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModExpenses.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModExpenses.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModExpenses.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcreatedby;
                if (oModExpenses.GetSetcreatedby.Length > 0)
                {
                    if (oModExpenses.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModExpenses.GetSetconfirmedby;
                if (oModExpenses.GetSetconfirmedby.Length > 0)
                {
                    if (oModExpenses.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModExpenses.GetSetcancelledby;
                if (oModExpenses.GetSetcancelledby.Length > 0)
                {
                    if (oModExpenses.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModExpenses.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateExpensesHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateExpensesHeaderInfo(String sComp, String sExpensesNo)
    {
        String result = "Y";

        MainModel oModExpHdr = new MainModel();
        ArrayList lsExpensesLineItem = new ArrayList();

        try
        {
            oModExpHdr = getExpensesHeaderDetails(sComp, sExpensesNo);
            if (oModExpHdr.GetSetexpensesno.Length > 0)
            {
                double purchaseamount = 0, discamount = 0, expensesamount = 0, taxamount = 0, totalamount = 0;
                lsExpensesLineItem = getExpensesDetailsList(sComp, sExpensesNo, 0, "");
                for (int i = 0; i < lsExpensesLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsExpensesLineItem[i];
                    purchaseamount = purchaseamount + (oModLineItem.GetSetunitprice * oModLineItem.GetSetquantity);
                    discamount = discamount + (oModLineItem.GetSetdiscamount * oModLineItem.GetSetquantity);
                    expensesamount = expensesamount + oModLineItem.GetSetexpensesprice;
                    taxamount = taxamount + oModLineItem.GetSettaxamount;
                    totalamount = totalamount + oModLineItem.GetSettotalexpenses;
                }
                oModExpHdr.GetSetpurchaseamount = purchaseamount;
                oModExpHdr.GetSetdiscamount = discamount;
                oModExpHdr.GetSetexpensesamount = expensesamount;
                oModExpHdr.GetSettaxamount = taxamount;
                oModExpHdr.GetSettotalamount = totalamount;
                //update order header
                result = updateExpensesHeader(oModExpHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateExpensesHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertExpensesDetails(MainModel oModExpDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO expenses_details (comp, expensesno, lineno, receiptno, receipt_lineno, orderno, order_lineno, itemno, itemdesc, unitprice, discamount, quantity, expensesprice, taxcode, taxrate, taxamount, totalexpenses) ";
                query = query + " VALUES (?comp, ?expensesno, ?lineno, ?receiptno, ?receipt_lineno, ?orderno, ?order_lineno, ?itemno, ?itemdesc, ?unitprice, ?discamount, ?quantity, ?expensesprice, ?taxcode, ?taxrate, ?taxamount, ?totalexpenses) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpDet.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpDet.GetSetexpensesno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetlineno;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModExpDet.GetSetreceiptno;
                cmd.Parameters.Add("?receipt_lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetreceipt_lineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModExpDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModExpDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModExpDet.GetSetitemdesc;
                //cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModExpDet.GetSetremarks;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModExpDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModExpDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModExpDet.GetSetquantity;
                cmd.Parameters.Add("?expensesprice", MySqlDbType.Double).Value = oModExpDet.GetSetexpensesprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModExpDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModExpDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModExpDet.GetSettaxamount;
                cmd.Parameters.Add("?totalexpenses", MySqlDbType.Double).Value = oModExpDet.GetSettotalexpenses;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertExpensesDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateExpensesDetails(MainModel oModExpDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE expenses_details ";
                query = query + " SET receiptno = ?receiptno, receipt_lineno = ?receipt_lineno, orderno = ?orderno, order_lineno = ?order_lineno, itemno = ?itemno, itemdesc = ?itemdesc, unitprice = ?unitprice, discamount = ?discamount, quantity = ?quantity, expensesprice = ?expensesprice, taxcode = ?taxcode, taxrate = ?taxrate, taxamount = ?taxamount, totalexpenses = ?totalexpenses ";
                query = query + " WHERE  comp = ?comp AND expensesno = ?expensesno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpDet.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpDet.GetSetexpensesno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetlineno;
                cmd.Parameters.Add("?receiptno", MySqlDbType.VarChar).Value = oModExpDet.GetSetreceiptno;
                cmd.Parameters.Add("?receipt_lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetreceipt_lineno;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModExpDet.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModExpDet.GetSetorder_lineno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModExpDet.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModExpDet.GetSetitemdesc;
                cmd.Parameters.Add("?unitprice", MySqlDbType.Double).Value = oModExpDet.GetSetunitprice;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModExpDet.GetSetdiscamount;
                cmd.Parameters.Add("?quantity", MySqlDbType.Int16).Value = oModExpDet.GetSetquantity;
                cmd.Parameters.Add("?expensesprice", MySqlDbType.Double).Value = oModExpDet.GetSetexpensesprice;
                cmd.Parameters.Add("?taxcode", MySqlDbType.VarChar).Value = oModExpDet.GetSettaxcode;
                cmd.Parameters.Add("?taxrate", MySqlDbType.Double).Value = oModExpDet.GetSettaxrate;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModExpDet.GetSettaxamount;
                cmd.Parameters.Add("?totalexpenses", MySqlDbType.Double).Value = oModExpDet.GetSettotalexpenses;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateExpensesDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deleteExpensesDetails(MainModel oModExpensesDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM expenses_details ";
                query = query + " WHERE  comp = ?comp AND expensesno = ?expensesno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModExpensesDet.GetSetcomp;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModExpensesDet.GetSetexpensesno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModExpensesDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteExpensesDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getExpensesListDetails(String comp, String selyear, String selmonth, String selday, String status, String additionalquery)
    {
        ArrayList lsExpMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, date_format(expenses_header.confirmeddate,'%d-%m-%Y') str_confirmeddate, expenses_header.expensestype, expenses_header.expensescat, ";
                query = query + "        expenses_details.expensesno, expenses_details.itemno, expenses_details.itemdesc, (expenses_details.unitprice - expenses_details.discamount) unit_price, expenses_details.quantity, ";
                query = query + "        expenses_details.expensesprice, expenses_details.taxamount, expenses_details.totalexpenses ";
                query = query + " from   expenses_header, expenses_details ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " AND    expenses_header.comp = expenses_details.comp ";
                query = query + " AND    expenses_header.expensesno = expenses_details.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (selyear.Trim().Length > 0)
                {
                    query = query + " and  date_format(expenses_header.confirmeddate,'%Y') = '" + selyear + "'";
                }
                if (selmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(expenses_header.confirmeddate,'%m') = '" + selmonth + "'";
                }
                if (selday.Trim().Length > 0)
                {
                    query = query + " and  date_format(expenses_header.confirmeddate,'%d') = '" + selday + "'";
                }
                if (additionalquery.Length > 0)
                {
                    query = query + additionalquery;
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " order by expenses_header.comp, date_format(expenses_header.confirmeddate,'%d-%m-%Y'), expenses_details.expensesno, expenses_details.itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                //WriteToLogFile("MainController-getExpensesListDetails: [SQL] " + query);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpDet = new MainModel();
                    modExpDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpDet.GetSetconfirmeddate = replaceNull(dataReader, "str_confirmeddate");
                    modExpDet.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpDet.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modExpDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modExpDet.GetSetunitprice = replaceDoubleZero(dataReader, "unit_price");
                    modExpDet.GetSetquantity = replaceZero(dataReader, "quantity");
                    modExpDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modExpDet.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpDet.GetSettotalexpenses = replaceDoubleZero(dataReader, "totalexpenses");
                    lsExpMod.Add(modExpDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesListDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpMod;
    }

    /*** END FOR EXPENSES ***/

    /*** BEGIN FOR PAYMENT PAID ***/

    public ArrayList getLineItemPendingPaymentPaid(String comp, String bpid, String bpdesc, String expensesno)
    {
        ArrayList lsPendPayPaidMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.expensesno, date_format(expenses_header.expensesdate,'%d-%m-%Y') str_expensesdate, expenses_header.expensestype, expenses_header.expensescat, expenses_header.bpid, ";
                query = query + "        expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, expenses_header.purchaseamount, expenses_header.discamount, expenses_header.expensesamount, ";
                query = query + "        expenses_header.taxamount, expenses_header.totalamount, expenses_header.paypaidamount, expenses_header.remarks, expenses_header.status, expenses_header.createdby, expenses_header.createddate, ";
                query = query + "        expenses_header.confirmedby, expenses_header.confirmeddate, expenses_header.cancelledby, expenses_header.cancelleddate  ";
                query = query + " FROM   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " AND    expenses_header.status = 'CONFIRMED' ";
                query = query + " AND    expenses_header.totalamount - (case when expenses_header.expensescat = 'JOURNAL_VOUCHER' then expenses_header.totalamount else expenses_header.paypaidamount end) > 0 ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesno = '" + expensesno + "' ";
                }
                if (bpdesc.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpdesc = ?bpdesc ";
                }
                query = query + " order by expenses_header.comp, expenses_header.expensesno, expenses_header.expensesdate ";
                //WriteToLogFile("MainController-getLineItemPendingPaymentPaid (SQL): " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = bpdesc;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();

                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "expensestype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetpurchaseamount = replaceDoubleZero(dataReader, "purchaseamount");
                    modExpHdr.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modExpHdr.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    modExpHdr.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modExpHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modExpHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modExpHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modExpHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modExpHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");

                    lsPendPayPaidMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getLineItemPendingPaymentPaid: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPendPayPaidMod;
    }

    public ArrayList getExpensesPaymentPaidHeaderListSumByBP(String comp, String expensesno, String bpid, String fyr, String status)
    {
        ArrayList lsExpPayPaidHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList lsParamType = getParametertype("EXPENSES");
                ArrayList expensestype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    expensestype.Add(modParam.GetSetparamttype);
                }
                String exptyp = "";
                for (int i = 0; i < expensestype.Count; i++)
                {
                    String str = (String)expensestype[i];
                    if (i.Equals(0))
                    {
                        exptyp = "'" + str + "'";
                    }
                    else
                    {
                        exptyp = exptyp + ",'" + str + "'";
                    }
                }

                query = "";
                query = query + " SELECT expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact, SUM(expenses_header.totalamount) exp_amount, SUM(expenses_header.paypaidamount) pay_amount ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + " and  (expenses_header.expensescat in ('PURCHASE_INVOICE','TRANSFER_INVOICE') or (expenses_header.expensescat = 'PAYMENT_VOUCHER' and expenses_header.expensestype in (" + exptyp + "))) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.expensesno = '" + expensesno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.bpid = '" + bpid + "' ";
                }
                if (fyr.Trim().Length > 0)
                {
                    query = query + " and  date_format(expenses_header.confirmeddate,'%m-%Y') IN (SELECT CONCAT(actualmonth, '-', actualyear) FROM fiscalperiod WHERE comp = expenses_header.comp and financeyear = '" + fyr + "') ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " group by expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact ";
                query = query + " order by expenses_header.comp, expenses_header.bpid, expenses_header.bpdesc, expenses_header.bpaddress, expenses_header.bpcontact ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modExpHdr = new MainModel();
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modExpHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "exp_amount");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "pay_amount");
                    lsExpPayPaidHdrMod.Add(modExpHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesPaymentPaidHeaderListSumByBP: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsExpPayPaidHdrMod;
    }

    public ArrayList getPaymentPaidHeaderList(String comp, String paypaidno, String bpid, String startdate, String enddate, String status)
    {
        ArrayList lsPayPaidHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') str_paypaiddate, paypaid_header.paypaidtype, paypaid_header.bpid, ";
                query = query + "        paypaid_header.bpdesc, paypaid_header.bpaddress, paypaid_header.bpcontact, paypaid_header.expensesamount, paypaid_header.paypaidamount, ";
                query = query + "        paypaid_header.remarks, paypaid_header.status, paypaid_header.createdby, paypaid_header.createddate, ";
                query = query + "        paypaid_header.confirmedby, paypaid_header.confirmeddate, paypaid_header.cancelledby, paypaid_header.cancelleddate  ";
                query = query + " from   paypaid_header ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.comp = '" + comp + "' ";
                }
                if (paypaidno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.paypaidno = '" + paypaidno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaidHdr = new MainModel();
                    modPaidHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaidHdr.GetSetpaypaidno = replaceNull(dataReader, "paypaidno");
                    modPaidHdr.GetSetpaypaiddate = replaceNull(dataReader, "str_paypaiddate");
                    modPaidHdr.GetSetpaypaidtype = replaceNull(dataReader, "paypaidtype");
                    modPaidHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaidHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaidHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modPaidHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modPaidHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modPaidHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modPaidHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modPaidHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modPaidHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modPaidHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modPaidHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modPaidHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modPaidHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modPaidHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsPayPaidHdrMod.Add(modPaidHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayPaidHdrMod;
    }

    public ArrayList getPaymentPaidHeaderDetailsList(String comp, String paypaidno, String bpid, int lineno, String expensesno, String status)
    {
        ArrayList lsPayPaidHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') str_paypaiddate, paypaid_header.paypaidtype, paypaid_header.bpid, ";
                query = query + "        paypaid_header.bpdesc, paypaid_header.bpaddress, paypaid_header.bpcontact, paypaid_header.expensesamount, paypaid_header.paypaidamount, ";
                query = query + "        paypaid_header.remarks, paypaid_header.status, paypaid_header.createdby, paypaid_header.createddate, ";
                query = query + "        paypaid_header.confirmedby, paypaid_header.confirmeddate, paypaid_header.cancelledby, paypaid_header.cancelleddate,  ";
                query = query + "        paypaid_details.comp, paypaid_details.paypaidno, paypaid_details.lineno, paypaid_details.expensesno, date_format(paypaid_details.expensesdate,'%d-%m-%Y') str_expensesdate, ";
                query = query + " 	     paypaid_details.paytype, paypaid_details.payrefno, paypaid_details.payremarks, paypaid_details.expensesprice, paypaid_details.paypaidprice ";
                query = query + " from   paypaid_header, paypaid_details ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp = paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno = paypaid_details.paypaidno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.comp = '" + comp + "' ";
                }
                if (paypaidno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.paypaidno = '" + paypaidno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  paypaid_details.lineno = " + lineno + " ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.expensesno = '" + expensesno + "' ";
                }
                if (bpid.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.bpid = '" + bpid + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaidHdr = new MainModel();
                    modPaidHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaidHdr.GetSetpaypaidno = replaceNull(dataReader, "paypaidno");
                    modPaidHdr.GetSetpaypaiddate = replaceNull(dataReader, "str_paypaiddate");
                    modPaidHdr.GetSetpaypaidtype = replaceNull(dataReader, "paypaidtype");
                    modPaidHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaidHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaidHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modPaidHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modPaidHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modPaidHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modPaidHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modPaidHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modPaidHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modPaidHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modPaidHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modPaidHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modPaidHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modPaidHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    modPaidHdr.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaidHdr.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modPaidHdr.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modPaidHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaidHdr.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaidHdr.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaidHdr.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modPaidHdr.GetSetpaypaidprice = replaceDoubleZero(dataReader, "paypaidprice");
                    lsPayPaidHdrMod.Add(modPaidHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidHeaderDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayPaidHdrMod;
    }

    public MainModel getPaymentPaidHeaderDetails(String comp, String paypaidno)
    {
        MainModel modPaidHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') str_paypaiddate, paypaid_header.paypaidtype, paypaid_header.bpid, ";
                query = query + "        paypaid_header.bpdesc, paypaid_header.bpaddress, paypaid_header.bpcontact, paypaid_header.expensesamount, paypaid_header.paypaidamount, ";
                query = query + "        paypaid_header.remarks, paypaid_header.status, paypaid_header.createdby, paypaid_header.createddate, ";
                query = query + "        paypaid_header.confirmedby, paypaid_header.confirmeddate, paypaid_header.cancelledby, paypaid_header.cancelleddate  ";
                query = query + " from   paypaid_header ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.comp = '" + comp + "' ";
                }
                if (paypaidno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.paypaidno = '" + paypaidno + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modPaidHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaidHdr.GetSetpaypaidno = replaceNull(dataReader, "paypaidno");
                    modPaidHdr.GetSetpaypaiddate = replaceNull(dataReader, "str_paypaiddate");
                    modPaidHdr.GetSetpaypaidtype = replaceNull(dataReader, "paypaidtype");
                    modPaidHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaidHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaidHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modPaidHdr.GetSetbpcontact = replaceNull(dataReader, "bpcontact");
                    modPaidHdr.GetSetexpensesamount = replaceDoubleZero(dataReader, "expensesamount");
                    modPaidHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modPaidHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modPaidHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modPaidHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modPaidHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modPaidHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modPaidHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modPaidHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modPaidHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modPaidHdr;
    }

    public ArrayList getPaymentPaidDetailsList(String comp, String paypaidno, int lineno, String expensesno)
    {
        ArrayList lsPayPaidDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_details.comp, paypaid_details.paypaidno, paypaid_details.lineno, paypaid_details.expensesno, date_format(paypaid_details.expensesdate,'%d-%m-%Y') str_expensesdate, ";
                query = query + " 	     paypaid_details.paytype, paypaid_details.payrefno, paypaid_details.payremarks, paypaid_details.expensesprice, paypaid_details.paypaidprice ";
                query = query + " from   paypaid_details ";
                query = query + " WHERE  paypaid_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (paypaidno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.paypaidno = '" + paypaidno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  paypaid_details.lineno = " + lineno + " ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.expensesno = '" + expensesno + "' ";
                }
                query = query + " order by paypaid_details.comp, paypaid_details.paypaidno, paypaid_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPayPaidDet = new MainModel();
                    modPayPaidDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayPaidDet.GetSetpaypaidno = replaceNull(dataReader, "paypaidno");
                    modPayPaidDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayPaidDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modPayPaidDet.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modPayPaidDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayPaidDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayPaidDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayPaidDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modPayPaidDet.GetSetpaypaidprice = replaceDoubleZero(dataReader, "paypaidprice");
                    lsPayPaidDetMod.Add(modPayPaidDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPayPaidDetMod;
    }

    public MainModel getPaymentPaidDetailsDetails(String comp, String paypaidno, int lineno, String expensesno, String status)
    {
        MainModel modPayPaidDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_details.comp, paypaid_details.paypaidno, paypaid_details.lineno, paypaid_details.expensesno, date_format(paypaid_details.expensesdate,'%d-%m-%Y') str_expensesdate, ";
                query = query + " 	     paypaid_details.paytype, paypaid_details.payrefno, paypaid_details.payremarks, paypaid_details.expensesprice, paypaid_details.paypaidprice ";
                query = query + " from   paypaid_details ";
                query = query + " WHERE  paypaid_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (paypaidno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.paypaidno = '" + paypaidno + "' ";
                }
                if (lineno > 0)
                {
                    query = query + " and  paypaid_details.lineno = " + lineno + " ";
                }
                if (expensesno.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.expensesno = '" + expensesno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.paypaidno IN (SELECT paypaidno FROM paypaid_header WHERE status = '" + status + "' and comp = paypaid_details.comp) ";
                }
                query = query + " order by paypaid_details.comp, paypaid_details.paypaidno, paypaid_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modPayPaidDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPayPaidDet.GetSetpaypaidno = replaceNull(dataReader, "paypaidno");
                    modPayPaidDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPayPaidDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modPayPaidDet.GetSetexpensesdate = replaceNull(dataReader, "str_expensesdate");
                    modPayPaidDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPayPaidDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPayPaidDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPayPaidDet.GetSetexpensesprice = replaceDoubleZero(dataReader, "expensesprice");
                    modPayPaidDet.GetSetpaypaidprice = replaceDoubleZero(dataReader, "paypaidprice");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modPayPaidDet;
    }

    public ArrayList getPaymentPaidCashFlowList(String comp, String openingdate, String closingdate, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno paymentno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(paypaid_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(paypaid_header.paypaidtype,': ',expenses_header.expensestype) paymenttype, ";
                query = query + "        paypaid_header.bpid, paypaid_header.bpdesc, paypaid_details.lineno, ";
                query = query + "        paypaid_details.expensesno paydetno, paypaid_details.paytype, paypaid_details.payrefno, ";
                query = query + "        paypaid_details.payremarks, paypaid_details.paypaidprice payamount ";
                query = query + " from   paypaid_header, paypaid_details, expenses_header ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	   paypaid_details.comp = expenses_header.comp ";
                query = query + " AND	   paypaid_details.expensesno = expenses_header.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    //query = query + " and  paypaid_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  paypaid_header.confirmeddate >= ?openingdate ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    //query = query + " and  paypaid_header.confirmeddate >= STR_TO_DATE('" + openingdate + "','%d-%m-%Y %H:%i:%s') ";
                    query = query + " and  paypaid_header.confirmeddate <= ?closingdate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno, paypaid_details.lineno ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (openingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(openingdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (closingdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidCashFlowList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public ArrayList getPaymentPaidCashOutList(String comp, String selyear, String selmonth, String selday, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno paymentno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(paypaid_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(paypaid_header.paypaidtype,': ',expenses_header.expensestype) paymenttype, ";
                query = query + "        paypaid_header.bpid, paypaid_header.bpdesc, paypaid_details.lineno, ";
                query = query + "        paypaid_details.expensesno paydetno, paypaid_details.paytype, paypaid_details.payrefno, ";
                query = query + "        paypaid_details.payremarks, paypaid_details.paypaidprice payamount, ";
                query = query + "        paypaid_details.expensesno, date_format(paypaid_details.expensesdate,'%d-%m-%Y %H:%i:%s') expensesdate ";
                query = query + " from   paypaid_header, paypaid_details, expenses_header ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	   paypaid_details.comp = expenses_header.comp ";
                query = query + " AND	   paypaid_details.expensesno = expenses_header.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (selyear.Trim().Length > 0)
                {
                    query = query + " and  date_format(paypaid_header.confirmeddate,'%Y') = '" + selyear + "'";
                }
                if (selmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(paypaid_header.confirmeddate,'%m') = '" + selmonth + "'";
                }
                if (selday.Trim().Length > 0)
                {
                    query = query + " and  date_format(paypaid_header.confirmeddate,'%d') = '" + selday + "'";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno, paypaid_details.lineno ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    modPaymentDet.GetSetexpensesno = replaceNull(dataReader, "expensesno");
                    modPaymentDet.GetSetexpensesdate = replaceNull(dataReader, "expensesdate");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidCashOutList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public ArrayList getPaymentPaidCashFlowList(String comp, String fyr, String startdate, String enddate, String status)
    {
        ArrayList lsPaymentMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno paymentno, date_format(paypaid_header.paypaiddate,'%d-%m-%Y') paymentdate, ";
                query = query + "        date_format(paypaid_header.confirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, ";
                query = query + "        concat(expenses_header.expensescat,': ',expenses_header.expensestype) paymenttype, ";
                query = query + "        paypaid_header.bpid, paypaid_header.bpdesc, paypaid_details.lineno, ";
                query = query + "        paypaid_details.expensesno paydetno, paypaid_details.paytype, paypaid_details.payrefno, ";
                query = query + "        paypaid_details.payremarks, paypaid_details.paypaidprice payamount, fis_posting.tranno, fis_posting.trancode ";
                query = query + " from   paypaid_header, expenses_header, paypaid_details left join fis_posting on paypaid_details.comp = fis_posting.comp and paypaid_details.paypaidno = fis_posting.refno and paypaid_details.lineno = fis_posting.lineno ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	   paypaid_details.comp = expenses_header.comp ";
                query = query + " AND	   paypaid_details.expensesno = expenses_header.expensesno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.comp = '" + comp + "' ";
                }
                if (startdate.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.confirmeddate >= ?startdate ";
                }
                if (enddate.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.confirmeddate <= ?enddate ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                query = query + " order by paypaid_header.comp, paypaid_header.paypaidno, paypaid_details.lineno ";
                //WriteToLogFile("MainController-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (startdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(startdate);
                    cmd.Parameters.Add("?startdate", MySqlDbType.DateTime).Value = datetime;
                }
                if (enddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(enddate);
                    cmd.Parameters.Add("?enddate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modPaymentDet = new MainModel();
                    modPaymentDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modPaymentDet.GetSetfyr = fyr;
                    modPaymentDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modPaymentDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modPaymentDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modPaymentDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modPaymentDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modPaymentDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modPaymentDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modPaymentDet.GetSetpaydetno = replaceNull(dataReader, "paydetno");
                    modPaymentDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modPaymentDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modPaymentDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modPaymentDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    modPaymentDet.GetSettranno = replaceNull(dataReader, "tranno");
                    modPaymentDet.GetSettrancode = replaceNull(dataReader, "trancode");
                    lsPaymentMod.Add(modPaymentDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getPaymentPaidCashFlowList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsPaymentMod;
    }

    public String insertPaymentPaidHeader(MainModel oModPayPaid)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO paypaid_header (comp, paypaidno, paypaiddate, paypaidtype, bpid, bpdesc, bpaddress, bpcontact, expensesamount, paypaidamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?paypaidno, ?paypaiddate, ?paypaidtype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?expensesamount, ?paypaidamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidno;
                if (oModPayPaid.GetSetpaypaiddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetpaypaiddate, ukDtfi);
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?paypaidtype", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidtype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpcontact;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModPayPaid.GetSetexpensesamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModPayPaid.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayPaid.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayPaid.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcreatedby;
                if (oModPayPaid.GetSetcreatedby.Length > 0)
                {
                    if (oModPayPaid.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetconfirmedby;
                if (oModPayPaid.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayPaid.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcancelledby;
                if (oModPayPaid.GetSetcancelledby.Length > 0)
                {
                    if (oModPayPaid.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentPaidHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertPaymentPaidHeader2(MainModel oModPayPaid)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO paypaid_header (comp, paypaidno, paypaiddate, paypaidtype, bpid, bpdesc, bpaddress, bpcontact, expensesamount, paypaidamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?paypaidno, ?paypaiddate, ?paypaidtype, ?bpid, ?bpdesc, ?bpaddress, ?bpcontact, ?expensesamount, ?paypaidamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidno;
                if (oModPayPaid.GetSetpaypaiddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetpaypaiddate, ukDtfi);
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?paypaidtype", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidtype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpcontact;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModPayPaid.GetSetexpensesamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModPayPaid.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayPaid.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayPaid.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcreatedby;
                if (oModPayPaid.GetSetcreatedby.Length > 0)
                {
                    if (oModPayPaid.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcreateddate, ukDtfi);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetconfirmedby;
                if (oModPayPaid.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayPaid.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetconfirmeddate, ukDtfi);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcancelledby;
                if (oModPayPaid.GetSetcancelledby.Length > 0)
                {
                    if (oModPayPaid.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcancelleddate, ukDtfi);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentPaidHeader2: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentPaidHeader(MainModel oModPayPaid)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE paypaid_header ";
                query = query + " SET    paypaiddate = ?paypaiddate, paypaidtype = ?paypaidtype, bpid = ?bpid, bpdesc = ?bpdesc, bpaddress = ?bpaddress, bpcontact = ?bpcontact, expensesamount = ?expensesamount, paypaidamount = ?paypaidamount, remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND paypaidno = ?paypaidno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidno;
                if (oModPayPaid.GetSetpaypaiddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetpaypaiddate, ukDtfi);
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?paypaiddate", MySqlDbType.Date).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?paypaidtype", MySqlDbType.VarChar).Value = oModPayPaid.GetSetpaypaidtype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpdesc;
                cmd.Parameters.Add("?bpaddress", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpaddress;
                cmd.Parameters.Add("?bpcontact", MySqlDbType.VarChar).Value = oModPayPaid.GetSetbpcontact;
                cmd.Parameters.Add("?expensesamount", MySqlDbType.Double).Value = oModPayPaid.GetSetexpensesamount;
                cmd.Parameters.Add("?paypaidamount", MySqlDbType.Double).Value = oModPayPaid.GetSetpaypaidamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModPayPaid.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModPayPaid.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcreatedby;
                if (oModPayPaid.GetSetcreatedby.Length > 0)
                {
                    if (oModPayPaid.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetconfirmedby;
                if (oModPayPaid.GetSetconfirmedby.Length > 0)
                {
                    if (oModPayPaid.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModPayPaid.GetSetcancelledby;
                if (oModPayPaid.GetSetcancelledby.Length > 0)
                {
                    if (oModPayPaid.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModPayPaid.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentPaidHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentPaidHeaderInfo(String sComp, String sPayPaidNo)
    {
        String result = "Y";

        MainModel oModPayPaidHdr = new MainModel();
        ArrayList lsPayPaidLineItem = new ArrayList();

        try
        {
            oModPayPaidHdr = getPaymentPaidHeaderDetails(sComp, sPayPaidNo);
            if (oModPayPaidHdr.GetSetpaypaidno.Length > 0)
            {
                double expensesamount = 0, paypaidamount = 0, taxamount = 0, totalamount = 0;
                lsPayPaidLineItem = getPaymentPaidDetailsList(sComp, sPayPaidNo, 0, "");
                for (int i = 0; i < lsPayPaidLineItem.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsPayPaidLineItem[i];
                    expensesamount = expensesamount + oModLineItem.GetSetexpensesprice;
                    paypaidamount = paypaidamount + oModLineItem.GetSetpaypaidprice;
                }
                oModPayPaidHdr.GetSetexpensesamount = expensesamount;
                oModPayPaidHdr.GetSetpaypaidamount = paypaidamount;
                //update Payment Paid header
                result = updatePaymentPaidHeader(oModPayPaidHdr);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentPaidHeaderInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String insertPaymentPaidDetails(MainModel oModPayPaidDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO paypaid_details (comp, paypaidno, lineno, expensesno, expensesdate, paytype, payrefno, payremarks, expensesprice, paypaidprice) ";
                query = query + " VALUES (?comp, ?paypaidno, ?lineno, ?expensesno, ?expensesdate, ?paytype, ?payrefno, ?payremarks, ?expensesprice, ?paypaidprice) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpaypaidno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayPaidDet.GetSetlineno;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetexpensesno;
                if (oModPayPaidDet.GetSetexpensesdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayPaidDet.GetSetexpensesdate, ukDtfi);
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpaytype;
                cmd.Parameters.Add("?payrefno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpayrefno;
                cmd.Parameters.Add("?payremarks", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpayremarks;
                cmd.Parameters.Add("?expensesprice", MySqlDbType.Double).Value = oModPayPaidDet.GetSetexpensesprice;
                cmd.Parameters.Add("?paypaidprice", MySqlDbType.Double).Value = oModPayPaidDet.GetSetpaypaidprice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertPaymentPaidDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updatePaymentPaidDetails(MainModel oModPayPaidDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE paypaid_details ";
                query = query + " SET    expensesno = ?expensesno, expensesdate = ?expensesdate, paytype = ?paytype, payrefno = ?payrefno, payremarks = ?payremarks, expensesprice = ?expensesprice, paypaidprice = ?paypaidprice ";
                query = query + " WHERE comp = ?comp  AND paypaidno = ?paypaidno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpaypaidno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayPaidDet.GetSetlineno;
                cmd.Parameters.Add("?expensesno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetexpensesno;
                if (oModPayPaidDet.GetSetexpensesdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModPayPaidDet.GetSetexpensesdate, ukDtfi);
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?expensesdate", MySqlDbType.Date).Value = null;
                }
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpaytype;
                cmd.Parameters.Add("?payrefno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpayrefno;
                cmd.Parameters.Add("?payremarks", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpayremarks;
                cmd.Parameters.Add("?expensesprice", MySqlDbType.Double).Value = oModPayPaidDet.GetSetexpensesprice;
                cmd.Parameters.Add("?paypaidprice", MySqlDbType.Double).Value = oModPayPaidDet.GetSetpaypaidprice;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updatePaymentPaidDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String deletePaymentPaidDetails(MainModel oModPayPaidDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM paypaid_details ";
                query = query + " WHERE  comp = ?comp AND paypaidno = ?paypaidno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetcomp;
                cmd.Parameters.Add("?paypaidno", MySqlDbType.VarChar).Value = oModPayPaidDet.GetSetpaypaidno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModPayPaidDet.GetSetlineno;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deletePaymentPaidDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR PAYMENT PAID ***/

    /*** BEGIN FOR CASH FLOW ***/

    public ArrayList getCashFlowHeaderList(String comp, String cashflowno, String openingdate, String openingtype, String closingdate, String closingtype, String status)
    {
        ArrayList lsCashFlowHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT cashflow_header.comp, cashflow_header.cashflowno, date_format(cashflow_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, cashflow_header.openingtype, ";
                query = query + "        cashflow_header.bankopeningamount, cashflow_header.cashopeningamount, ";
                query = query + "        cashflow_header.bankpaymentreceiptamount, cashflow_header.cashpaymentreceiptamount, ";
                query = query + "        cashflow_header.bankpaymentpaidamount, cashflow_header.cashpaymentpaidamount, ";
                query = query + "        date_format(cashflow_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, cashflow_header.closingtype, ";
                query = query + "        cashflow_header.bankclosingamount, cashflow_header.cashclosingamount, ";
                query = query + "        cashflow_header.remarks, cashflow_header.status, cashflow_header.createdby, cashflow_header.createddate, ";
                query = query + "        cashflow_header.confirmedby, cashflow_header.confirmeddate, cashflow_header.cancelledby, cashflow_header.cancelleddate  ";
                query = query + " from   cashflow_header ";
                query = query + " WHERE  cashflow_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.comp = '" + comp + "' ";
                }
                if (cashflowno.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.cashflowno = '" + cashflowno + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(cashflow_header.openingdate,'%d-%m-%Y') = '" + openingdate + "' ";
                }
                if (openingtype.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.openingtype = '" + openingtype + "' ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(cashflow_header.closingdate,'%d-%m-%Y') = '" + closingdate + "' ";
                }
                if (closingtype.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.closingtype = '" + closingtype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.status = '" + status + "' ";
                }
                query = query + " order by cashflow_header.comp, cashflow_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCashFlowHdr = new MainModel();
                    modCashFlowHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modCashFlowHdr.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modCashFlowHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modCashFlowHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modCashFlowHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modCashFlowHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modCashFlowHdr.GetSetbankpaymentreceiptamount = replaceDoubleZero(dataReader, "bankpaymentreceiptamount");
                    modCashFlowHdr.GetSetcashpaymentreceiptamount = replaceDoubleZero(dataReader, "cashpaymentreceiptamount");
                    modCashFlowHdr.GetSetbankpaymentpaidamount = replaceDoubleZero(dataReader, "bankpaymentpaidamount");
                    modCashFlowHdr.GetSetcashpaymentpaidamount = replaceDoubleZero(dataReader, "cashpaymentpaidamount");
                    modCashFlowHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modCashFlowHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modCashFlowHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modCashFlowHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modCashFlowHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modCashFlowHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modCashFlowHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCashFlowHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modCashFlowHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modCashFlowHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modCashFlowHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modCashFlowHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsCashFlowHdrMod.Add(modCashFlowHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashFlowHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCashFlowHdrMod;
    }

    public MainModel getCashFlowHeaderDetails(String comp, String cashflowno, String status)
    {
        MainModel modCashFlowHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT cashflow_header.comp, cashflow_header.cashflowno, date_format(cashflow_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, cashflow_header.openingtype, ";
                query = query + "        cashflow_header.bankopeningamount, cashflow_header.cashopeningamount, ";
                query = query + "        cashflow_header.bankpaymentreceiptamount, cashflow_header.cashpaymentreceiptamount, ";
                query = query + "        cashflow_header.bankpaymentpaidamount, cashflow_header.cashpaymentpaidamount, ";
                query = query + "        date_format(cashflow_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, cashflow_header.closingtype, ";
                query = query + "        cashflow_header.bankclosingamount, cashflow_header.cashclosingamount, ";
                query = query + "        cashflow_header.remarks, cashflow_header.status, cashflow_header.createdby, cashflow_header.createddate, ";
                query = query + "        cashflow_header.confirmedby, cashflow_header.confirmeddate, cashflow_header.cancelledby, cashflow_header.cancelleddate  ";
                query = query + " from   cashflow_header ";
                query = query + " WHERE  cashflow_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.comp = '" + comp + "' ";
                }
                if (cashflowno.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.cashflowno = '" + cashflowno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  cashflow_header.status = '" + status + "' ";
                }
                query = query + " order by cashflow_header.comp, cashflow_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modCashFlowHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modCashFlowHdr.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modCashFlowHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modCashFlowHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modCashFlowHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modCashFlowHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modCashFlowHdr.GetSetbankpaymentreceiptamount = replaceDoubleZero(dataReader, "bankpaymentreceiptamount");
                    modCashFlowHdr.GetSetcashpaymentreceiptamount = replaceDoubleZero(dataReader, "cashpaymentreceiptamount");
                    modCashFlowHdr.GetSetbankpaymentpaidamount = replaceDoubleZero(dataReader, "bankpaymentpaidamount");
                    modCashFlowHdr.GetSetcashpaymentpaidamount = replaceDoubleZero(dataReader, "cashpaymentpaidamount");
                    modCashFlowHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modCashFlowHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modCashFlowHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modCashFlowHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modCashFlowHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modCashFlowHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modCashFlowHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCashFlowHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modCashFlowHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modCashFlowHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modCashFlowHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modCashFlowHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashFlowHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modCashFlowHdr;
    }

    public MainModel getCashFlowLastHeaderDetails(String comp, String dateinput, String status)
    {
        MainModel modCashFlowHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.comp, b.cashflowno, date_format(b.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, b.openingtype, ";
                query = query + "        b.bankopeningamount, b.cashopeningamount, ";
                query = query + "        b.bankpaymentreceiptamount, b.cashpaymentreceiptamount, ";
                query = query + "        b.bankpaymentpaidamount, b.cashpaymentpaidamount, ";
                query = query + "        date_format(b.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, b.closingtype, ";
                query = query + "        b.bankclosingamount, b.cashclosingamount, ";
                query = query + "        b.remarks, b.status, b.createdby, b.createddate, ";
                query = query + "        b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate  ";
                query = query + " from   cashflow_header b ";
                query = query + " WHERE  b.comp = '" + comp + "' ";
                query = query + " and    b.closingdate = (select max(c.closingdate) from cashflow_header c where c.comp = b.comp and c.status = b.status and c.closingdate <= ?dateinput) ";
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.status = '" + status + "' ";
                }
                query = query + " order by b.comp, b.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (dateinput.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(dateinput, ukDtfi);
                    cmd.Parameters.Add("?dateinput", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modCashFlowHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modCashFlowHdr.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modCashFlowHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modCashFlowHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modCashFlowHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modCashFlowHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modCashFlowHdr.GetSetbankpaymentreceiptamount = replaceDoubleZero(dataReader, "bankpaymentreceiptamount");
                    modCashFlowHdr.GetSetcashpaymentreceiptamount = replaceDoubleZero(dataReader, "cashpaymentreceiptamount");
                    modCashFlowHdr.GetSetbankpaymentpaidamount = replaceDoubleZero(dataReader, "bankpaymentpaidamount");
                    modCashFlowHdr.GetSetcashpaymentpaidamount = replaceDoubleZero(dataReader, "cashpaymentpaidamount");
                    modCashFlowHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modCashFlowHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modCashFlowHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modCashFlowHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modCashFlowHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modCashFlowHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modCashFlowHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCashFlowHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modCashFlowHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modCashFlowHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modCashFlowHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modCashFlowHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashFlowLastHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modCashFlowHdr;
    }

    public ArrayList getCashFlowDetailsList(String comp, String cashflowno, String cashflowtype)
    {
        ArrayList lsCashFlowDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT cashflow_details.comp, cashflow_details.cashflowno, cashflow_details.cashflowtype, ";
                query = query + "        cashflow_details.paymentno, date_format(cashflow_details.paymentdate,'%d-%m-%Y') paymentdate, date_format(cashflow_details.paymentconfirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, cashflow_details.paymenttype, ";
                query = query + "        cashflow_details.bpid, cashflow_details.bpdesc, ";
                query = query + "        cashflow_details.paydetno, cashflow_details.lineno, ";
                query = query + "        cashflow_details.paytype, cashflow_details.payrefno, ";
                query = query + "        cashflow_details.payremarks, cashflow_details.payamount ";
                query = query + " from   cashflow_details ";
                query = query + " WHERE  cashflow_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.comp = '" + comp + "' ";
                }
                if (cashflowno.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.cashflowno = '" + cashflowno + "' ";
                }
                if (cashflowtype.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.cashflowtype = '" + cashflowtype + "' ";
                }
                query = query + " order by cashflow_details.comp, cashflow_details.cashflowno, cashflow_details.paydetno, cashflow_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCashFlowDet = new MainModel();
                    modCashFlowDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modCashFlowDet.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modCashFlowDet.GetSetcashflowtype = replaceNull(dataReader, "cashflowtype");
                    modCashFlowDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modCashFlowDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modCashFlowDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modCashFlowDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modCashFlowDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modCashFlowDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modCashFlowDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modCashFlowDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modCashFlowDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modCashFlowDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modCashFlowDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                    lsCashFlowDetMod.Add(modCashFlowDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashFlowDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCashFlowDetMod;
    }

    public MainModel getCashFlowDetailsDetails(String comp, String cashflowno, String cashflowtype)
    {
        MainModel modCashFlowDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT cashflow_details.comp, cashflow_details.cashflowno, cashflow_details.cashflowtype, ";
                query = query + "        cashflow_details.paymentno, date_format(cashflow_details.paymentdate,'%d-%m-%Y') paymentdate, date_format(cashflow_details.paymentconfirmeddate,'%d-%m-%Y %H:%i:%s') paymentconfirmeddate, cashflow_details.paymenttype, ";
                query = query + "        cashflow_details.bpid, cashflow_details.bpdesc, ";
                query = query + "        cashflow_details.paydetno, cashflow_details.lineno, ";
                query = query + "        cashflow_details.paytype, cashflow_details.payrefno, ";
                query = query + "        cashflow_details.payremarks, cashflow_details.payamount ";
                query = query + " from   cashflow_details ";
                query = query + " WHERE  cashflow_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.comp = '" + comp + "' ";
                }
                if (cashflowno.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.cashflowno = '" + cashflowno + "' ";
                }
                if (cashflowtype.Trim().Length > 0)
                {
                    query = query + " and  cashflow_details.cashflowtype = '" + cashflowtype + "' ";
                }
                query = query + " order by cashflow_details.comp, cashflow_details.cashflowno, cashflow_details.paydetno, cashflow_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modCashFlowDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modCashFlowDet.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modCashFlowDet.GetSetcashflowtype = replaceNull(dataReader, "cashflowtype");
                    modCashFlowDet.GetSetpaymentno = replaceNull(dataReader, "paymentno");
                    modCashFlowDet.GetSetpaymentdate = replaceNull(dataReader, "paymentdate");
                    modCashFlowDet.GetSetpaymentconfirmeddate = replaceNull(dataReader, "paymentconfirmeddate");
                    modCashFlowDet.GetSetpaymenttype = replaceNull(dataReader, "paymenttype");
                    modCashFlowDet.GetSetbpid = replaceNull(dataReader, "bpid");
                    modCashFlowDet.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modCashFlowDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modCashFlowDet.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modCashFlowDet.GetSetpayrefno = replaceNull(dataReader, "payrefno");
                    modCashFlowDet.GetSetpayremarks = replaceNull(dataReader, "payremarks");
                    modCashFlowDet.GetSetpayamount = replaceDoubleZero(dataReader, "payamount");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashFlowDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modCashFlowDet;
    }
    
    public String insertCashFlowHeader(MainModel oModCashFlow)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO cashflow_header (comp, cashflowno, openingdate, openingtype, bankopeningamount, cashopeningamount, bankpaymentreceiptamount, cashpaymentreceiptamount, bankpaymentpaidamount, cashpaymentpaidamount, closingdate, closingtype, bankclosingamount, cashclosingamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?cashflowno, ?openingdate, ?openingtype, ?bankopeningamount, ?cashopeningamount, ?bankpaymentreceiptamount, ?cashpaymentreceiptamount, ?bankpaymentpaidamount, ?cashpaymentpaidamount, ?closingdate, ?closingtype, ?bankclosingamount, ?cashclosingamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcomp;
                cmd.Parameters.Add("?cashflowno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcashflowno;
                if (oModCashFlow.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetopeningtype;
                cmd.Parameters.Add("?bankopeningamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankopeningamount;
                cmd.Parameters.Add("?cashopeningamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashopeningamount;
                cmd.Parameters.Add("?bankpaymentreceiptamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankpaymentreceiptamount;
                cmd.Parameters.Add("?cashpaymentreceiptamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashpaymentreceiptamount;
                cmd.Parameters.Add("?bankpaymentpaidamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankpaymentpaidamount;
                cmd.Parameters.Add("?cashpaymentpaidamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashpaymentpaidamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetclosingtype;
                if (oModCashFlow.GetSetclosingtype.Length > 0)
                {
                    if (oModCashFlow.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?bankclosingamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankclosingamount;
                cmd.Parameters.Add("?cashclosingamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashclosingamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModCashFlow.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCashFlow.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcreatedby;
                if (oModCashFlow.GetSetcreatedby.Length > 0)
                {
                    if (oModCashFlow.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetconfirmedby;
                if (oModCashFlow.GetSetconfirmedby.Length > 0)
                {
                    if (oModCashFlow.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcancelledby;
                if (oModCashFlow.GetSetcancelledby.Length > 0)
                {
                    if (oModCashFlow.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertCashFlowHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateCashFlowHeader(MainModel oModCashFlow)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE cashflow_header ";
                query = query + " SET    openingdate = ?openingdate, openingtype = ?openingtype, ";
                query = query + "        bankopeningamount = ?bankopeningamount, cashopeningamount = ?cashopeningamount, ";
                query = query + "        bankpaymentreceiptamount = ?bankpaymentreceiptamount, cashpaymentreceiptamount = ?cashpaymentreceiptamount, ";
                query = query + "        bankpaymentpaidamount = ?bankpaymentpaidamount, cashpaymentpaidamount = ?cashpaymentpaidamount, ";
                query = query + "        closingdate = ?closingdate, closingtype = ?closingtype, ";
                query = query + "        bankclosingamount = ?bankclosingamount, cashclosingamount = ?cashclosingamount, ";
                query = query + "        remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND cashflowno = ?cashflowno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcomp;
                cmd.Parameters.Add("?cashflowno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcashflowno;
                if (oModCashFlow.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetopeningtype;
                cmd.Parameters.Add("?bankopeningamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankopeningamount;
                cmd.Parameters.Add("?cashopeningamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashopeningamount;
                cmd.Parameters.Add("?bankpaymentreceiptamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankpaymentreceiptamount;
                cmd.Parameters.Add("?cashpaymentreceiptamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashpaymentreceiptamount;
                cmd.Parameters.Add("?bankpaymentpaidamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankpaymentpaidamount;
                cmd.Parameters.Add("?cashpaymentpaidamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashpaymentpaidamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetclosingtype;
                if (oModCashFlow.GetSetclosingtype.Length > 0)
                {
                    if (oModCashFlow.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?bankclosingamount", MySqlDbType.Double).Value = oModCashFlow.GetSetbankclosingamount;
                cmd.Parameters.Add("?cashclosingamount", MySqlDbType.Double).Value = oModCashFlow.GetSetcashclosingamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModCashFlow.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCashFlow.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcreatedby;
                if (oModCashFlow.GetSetcreatedby.Length > 0)
                {
                    if (oModCashFlow.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetconfirmedby;
                if (oModCashFlow.GetSetconfirmedby.Length > 0)
                {
                    if (oModCashFlow.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcancelledby;
                if (oModCashFlow.GetSetcancelledby.Length > 0)
                {
                    if (oModCashFlow.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateCashFlowHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertCashFlowDetails(MainModel oModCashFlow)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO cashflow_details (comp, cashflowno, cashflowtype, paymentno, paymentdate, paymentconfirmeddate, paymenttype, bpid, bpdesc, paydetno, lineno, paytype, payrefno, payremarks, payamount) ";
                query = query + " VALUES (?comp, ?cashflowno, ?cashflowtype, ?paymentno, ?paymentdate, ?paymentconfirmeddate, ?paymenttype, ?bpid, ?bpdesc, ?paydetno, ?lineno, ?paytype, ?payrefno, ?payremarks, ?payamount) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcomp;
                cmd.Parameters.Add("?cashflowno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcashflowno;
                cmd.Parameters.Add("?cashflowtype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetcashflowtype;
                cmd.Parameters.Add("?paymentno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpaymentno;
                if (oModCashFlow.GetSetpaymentdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetpaymentdate, ukDtfi);
                    cmd.Parameters.Add("?paymentdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?paymentdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                if (oModCashFlow.GetSetpaymentconfirmeddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModCashFlow.GetSetpaymentconfirmeddate, ukDtfi);
                    cmd.Parameters.Add("?paymentconfirmeddate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?paymentconfirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?paymenttype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpaymenttype;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModCashFlow.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModCashFlow.GetSetbpdesc;
                cmd.Parameters.Add("?paydetno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpaydetno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModCashFlow.GetSetlineno;
                cmd.Parameters.Add("?paytype", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpaytype;
                cmd.Parameters.Add("?payrefno", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpayrefno;
                cmd.Parameters.Add("?payremarks", MySqlDbType.VarChar).Value = oModCashFlow.GetSetpayremarks;
                cmd.Parameters.Add("?payamount", MySqlDbType.Double).Value = oModCashFlow.GetSetpayamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertCashFlowDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR CASH FLOW ***/

    /*** BEGIN FOR STOCK STATEMENT ***/

    public ArrayList getStockStateHeaderList(String comp, String stockstateno, String openingdate, String openingtype, String closingdate, String closingtype, String status)
    {
        ArrayList lsStockStateHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT stockstate_header.comp, stockstate_header.stockstateno, date_format(stockstate_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, stockstate_header.openingtype, ";
                query = query + "        stockstate_header.stockopeningamount, stockstate_header.stockinamount, stockstate_header.stockoutamount, ";
                query = query + "        date_format(stockstate_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, stockstate_header.closingtype, ";
                query = query + "        stockstate_header.stockclosingamount, stockstate_header.remarks, stockstate_header.status, stockstate_header.createdby, stockstate_header.createddate, ";
                query = query + "        stockstate_header.confirmedby, stockstate_header.confirmeddate, stockstate_header.cancelledby, stockstate_header.cancelleddate  ";
                query = query + " from   stockstate_header ";
                query = query + " WHERE  stockstate_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.comp = '" + comp + "' ";
                }
                if (stockstateno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.stockstateno = '" + stockstateno + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(stockstate_header.openingdate,'%d-%m-%Y') = '" + openingdate + "' ";
                }
                if (openingtype.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.openingtype = '" + openingtype + "' ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(stockstate_header.closingdate,'%d-%m-%Y') = '" + closingdate + "' ";
                }
                if (closingtype.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.closingtype = '" + closingtype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.status = '" + status + "' ";
                }
                query = query + " order by stockstate_header.comp, stockstate_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modStockStateHdr = new MainModel();
                    modStockStateHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modStockStateHdr.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modStockStateHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modStockStateHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modStockStateHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modStockStateHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modStockStateHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modStockStateHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modStockStateHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modStockStateHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modStockStateHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modStockStateHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modStockStateHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modStockStateHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modStockStateHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modStockStateHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modStockStateHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modStockStateHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsStockStateHdrMod.Add(modStockStateHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsStockStateHdrMod;
    }

    public MainModel getStockStateHeaderDetails(String comp, String stockstateno, String status)
    {
        MainModel modStockStateHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT stockstate_header.comp, stockstate_header.stockstateno, date_format(stockstate_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, stockstate_header.openingtype, ";
                query = query + "        stockstate_header.stockopeningamount, stockstate_header.stockinamount, stockstate_header.stockoutamount, ";
                query = query + "        date_format(stockstate_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, stockstate_header.closingtype, ";
                query = query + "        stockstate_header.stockclosingamount, stockstate_header.remarks, stockstate_header.status, stockstate_header.createdby, stockstate_header.createddate, ";
                query = query + "        stockstate_header.confirmedby, stockstate_header.confirmeddate, stockstate_header.cancelledby, stockstate_header.cancelleddate  ";
                query = query + " from   stockstate_header ";
                query = query + " WHERE  stockstate_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.comp = '" + comp + "' ";
                }
                if (stockstateno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.stockstateno = '" + stockstateno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  stockstate_header.status = '" + status + "' ";
                }
                query = query + " order by stockstate_header.comp, stockstate_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modStockStateHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modStockStateHdr.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modStockStateHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modStockStateHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modStockStateHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modStockStateHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modStockStateHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modStockStateHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modStockStateHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modStockStateHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modStockStateHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modStockStateHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modStockStateHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modStockStateHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modStockStateHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modStockStateHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modStockStateHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modStockStateHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateHeaderDetails: " + e.Message.ToString());
        }
        return modStockStateHdr;
    }

    public MainModel getStockStateLastHeaderDetails(String comp, String dateinput, String status)
    {
        MainModel modStockStateHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT b.comp, b.stockstateno, date_format(b.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, b.openingtype, ";
                query = query + "        b.stockopeningamount, b.stockinamount, b.stockoutamount, ";
                query = query + "        date_format(b.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, b.closingtype, ";
                query = query + "        b.stockclosingamount, b.remarks, b.status, b.createdby, b.createddate, ";
                query = query + "        b.confirmedby, b.confirmeddate, b.cancelledby, b.cancelleddate  ";
                query = query + " from   stockstate_header b ";
                query = query + " WHERE  b.comp = '" + comp + "' ";
                query = query + " and    b.closingdate = (select max(c.closingdate) from stockstate_header c where c.comp = b.comp and c.status = b.status and c.closingdate <= ?dateinput) ";
                if (status.Trim().Length > 0)
                {
                    query = query + " and  b.status = '" + status + "' ";
                }
                query = query + " order by b.comp, b.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (dateinput.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(dateinput, ukDtfi);
                    cmd.Parameters.Add("?dateinput", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modStockStateHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modStockStateHdr.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modStockStateHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modStockStateHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modStockStateHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modStockStateHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modStockStateHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modStockStateHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modStockStateHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modStockStateHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modStockStateHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modStockStateHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modStockStateHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modStockStateHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modStockStateHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modStockStateHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modStockStateHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modStockStateHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modStockStateHdr;
    }

    public ArrayList getStockStateDetailsList(String comp, String stockstateno, String stockstatetype)
    {
        ArrayList lsStockStateDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT stockstate_details.comp, stockstate_details.stockstateno, stockstate_details.stockstatetype, ";
                query = query + "        stockstate_details.transno, stockstate_details.trans_lineno, date_format(stockstate_details.transdate,'%d-%m-%Y') str_transdate, stockstate_details.transtype, ";
                query = query + "        stockstate_details.itemno, stockstate_details.itemdesc, ";
                query = query + "        stockstate_details.location, date_format(stockstate_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        stockstate_details.orderno, stockstate_details.order_lineno, ";
                query = query + "        stockstate_details.transprice, stockstate_details.transqty ";
                query = query + " from   stockstate_details ";
                query = query + " WHERE  stockstate_details.comp is not NULL ";
                query = query + " and    stockstate_details.comp = '" + comp + "' ";
                if (stockstateno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_details.stockstateno = '" + stockstateno + "' ";
                }
                if (stockstatetype.Trim().Length > 0)
                {
                    query = query + " and  stockstate_details.stockstatetype = '" + stockstatetype + "' ";
                }
                query = query + " order by stockstate_details.comp, stockstate_details.stockstateno, stockstate_details.transno, stockstate_details.trans_lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modStockStateDet = new MainModel();
                    modStockStateDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modStockStateDet.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modStockStateDet.GetSetstockstatetype = replaceNull(dataReader, "stockstatetype");
                    modStockStateDet.GetSettransno = replaceNull(dataReader, "transno");
                    modStockStateDet.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modStockStateDet.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modStockStateDet.GetSettranstype = replaceNull(dataReader, "transtype");
                    modStockStateDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modStockStateDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modStockStateDet.GetSetlocation = replaceNull(dataReader, "location");
                    modStockStateDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modStockStateDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modStockStateDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modStockStateDet.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    modStockStateDet.GetSettransqty = replaceZero(dataReader, "transqty");
                    lsStockStateDetMod.Add(modStockStateDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsStockStateDetMod;
    }

    public MainModel getStockStateDetailsDetails(String comp, String stockstateno, String stockstatetype)
    {
        MainModel modStockStateDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT stockstate_details.comp, stockstate_details.stockstateno, stockstate_details.stockstatetype, ";
                query = query + "        stockstate_details.transno, stockstate_details.trans_lineno, date_format(stockstate_details.transdate,'%d-%m-%Y') str_transdate, stockstate_details.transtype, ";
                query = query + "        stockstate_details.itemno, stockstate_details.itemdesc, ";
                query = query + "        stockstate_details.location, date_format(stockstate_details.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ";
                query = query + "        stockstate_details.orderno, stockstate_details.order_lineno, ";
                query = query + "        stockstate_details.transprice, stockstate_details.transqty ";
                query = query + " from   stockstate_details ";
                query = query + " WHERE  stockstate_details.comp is not NULL ";
                query = query + " and    stockstate_details.comp = '" + comp + "' ";
                if (stockstateno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_details.stockstateno = '" + stockstateno + "' ";
                }
                if (stockstatetype.Trim().Length > 0)
                {
                    query = query + " and  stockstate_details.stockstatetype = '" + stockstatetype + "' ";
                }
                query = query + " order by stockstate_details.comp, stockstate_details.stockstateno, stockstate_details.transno, stockstate_details.trans_lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modStockStateDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modStockStateDet.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modStockStateDet.GetSetstockstatetype = replaceNull(dataReader, "stockstatetype");
                    modStockStateDet.GetSettransno = replaceNull(dataReader, "transno");
                    modStockStateDet.GetSettrans_lineno = replaceZero(dataReader, "trans_lineno");
                    modStockStateDet.GetSettransdate = replaceNull(dataReader, "str_transdate");
                    modStockStateDet.GetSettranstype = replaceNull(dataReader, "transtype");
                    modStockStateDet.GetSetitemno = replaceNull(dataReader, "itemno");
                    modStockStateDet.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modStockStateDet.GetSetlocation = replaceNull(dataReader, "location");
                    modStockStateDet.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modStockStateDet.GetSetorderno = replaceNull(dataReader, "orderno");
                    modStockStateDet.GetSetorder_lineno = replaceZero(dataReader, "order_lineno");
                    modStockStateDet.GetSettransprice = replaceDoubleZero(dataReader, "transprice");
                    modStockStateDet.GetSettransqty = replaceZero(dataReader, "transqty");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modStockStateDet;
    }

    public ArrayList getStockStateSOHList(String comp, String stockstateno, String itemno, String location, String datesoh)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT stockstate_soh.comp, stockstate_soh.stockstateno, stockstate_soh.itemno, stockstate_soh.itemdesc, stockstate_soh.location, ";
                query = query + "        date_format(stockstate_soh.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, stockstate_soh.qtysoh, stockstate_soh.costsoh ";
                query = query + " from   stockstate_soh ";
                query = query + " WHERE  stockstate_soh.comp is not NULL ";
                query = query + " and    stockstate_soh.comp = '" + comp + "' ";
                if (stockstateno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_soh.stockstateno = '" + stockstateno + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  stockstate_soh.itemno = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  stockstate_soh.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(stockstate_soh.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " order by stockstate_soh.comp, stockstate_soh.itemno, stockstate_soh.location, stockstate_soh.datesoh ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateSOHList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsItemMod;
    }

    public List<MainModel> getStockStateLastSOHList(String comp, String stockstateno, String lastdate, String itemno, String location, String datesoh, String status)
    {
        List<MainModel> lsItemMod = new List<MainModel>();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        select x.comp, ifnull(y.stockstateno,'') stockstateno, ifnull(y.openingdate,'') openingdate, ifnull(y.openingtype,'') openingtype, 
	                           ifnull(y.stockopeningamount,0) stockopeningamount, ifnull(y.stockinamount,0) stockinamount, ifnull(y.stockoutamount,0) stockoutamount, ifnull(y.stockclosingamount,0) stockclosingamount, ifnull(y.closingdate,'') closingdate,  
                               ifnull(y.closingtype,'') closingtype, ifnull(y.remarks,'') remarks, ifnull(y.status,'') status,
	                           x.itemno, x.itemdesc, x.location, date_format(x.datesoh,'%d-%m-%Y %H:%i:%s') str_datesoh, ifnull(y.qtysoh,0) qtysoh, ifnull(y.costsoh,0) costsoh
                        from  item_stock x
                        left join (
                        SELECT b.comp, b.stockstateno, b.openingdate, b.openingtype, b.stockopeningamount, b.stockinamount, b.stockoutamount, b.stockclosingamount, b.closingdate,  b.closingtype, b.remarks, b.status,
	                           a.itemno, a.itemdesc, a.location, a.datesoh, a.qtysoh, a.costsoh
                        FROM stockstate_soh a, stockstate_header b
                        where a.comp = b.comp
                        and   a.stockstateno = b.stockstateno
                        and   b.status = '" + status + @"'
                        and   b.closingdate = ?lastdate and a.datesoh <= b.closingdate
                        and   b.comp = '" + comp + @"') as y on x.comp = y.comp and x.itemno = y.itemno and x.location = y.location and x.datesoh = y.datesoh
                        where x.comp = '" + comp + "' ";

                if (itemno.Trim().Length > 0)
                {
                    query = query + " and   x.itemno = = '" + itemno + "' ";
                }
                if (location.Trim().Length > 0)
                {
                    query = query + " and  x.location = '" + location + "' ";
                }
                if (datesoh.Trim().Length > 0)
                {
                    query = query + " and  date_format(x.datesoh,'%d-%m-%Y %H:%i:%s') = '" + datesoh + "' ";
                }
                query = query + " order by x.comp, x.itemno ";
                //WriteToLogFile("MainController-getStockStateLastSOHList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                if (lastdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(lastdate, ukDtfi);
                    cmd.Parameters.Add("?lastdate", MySqlDbType.DateTime).Value = datetime;
                }
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modItem.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modItem.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modItem.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modItem.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modItem.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modItem.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modItem.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modItem.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modItem.GetSetremarks = replaceNull(dataReader, "remarks");
                    modItem.GetSetstatus = replaceNull(dataReader, "status");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetlocation = replaceNull(dataReader, "location");
                    modItem.GetSetdatesoh = replaceNull(dataReader, "str_datesoh");
                    modItem.GetSetqtysoh = replaceZero(dataReader, "qtysoh");
                    modItem.GetSetcostsoh = replaceDoubleZero(dataReader, "costsoh");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getStockStateLastSOHList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsItemMod;
    }

    public String insertStockStateHeader(MainModel oModHeader)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO stockstate_header (comp, stockstateno, openingdate, openingtype, stockopeningamount, stockinamount, stockoutamount, closingdate, closingtype, stockclosingamount, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?stockstateno, ?openingdate, ?openingtype, ?stockopeningamount, ?stockinamount, ?stockoutamount, ?closingdate, ?closingtype, ?stockclosingamount, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModHeader.GetSetcomp;
                cmd.Parameters.Add("?stockstateno", MySqlDbType.VarChar).Value = oModHeader.GetSetstockstateno;
                if (oModHeader.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModHeader.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModHeader.GetSetopeningtype;
                cmd.Parameters.Add("?stockopeningamount", MySqlDbType.Double).Value = oModHeader.GetSetstockopeningamount;
                cmd.Parameters.Add("?stockinamount", MySqlDbType.Double).Value = oModHeader.GetSetstockinamount;
                cmd.Parameters.Add("?stockoutamount", MySqlDbType.Double).Value = oModHeader.GetSetstockoutamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModHeader.GetSetclosingtype;
                if (oModHeader.GetSetclosingtype.Length > 0)
                {
                    if (oModHeader.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?stockclosingamount", MySqlDbType.Double).Value = oModHeader.GetSetstockclosingamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModHeader.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModHeader.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModHeader.GetSetcreatedby;
                if (oModHeader.GetSetcreatedby.Length > 0)
                {
                    if (oModHeader.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModHeader.GetSetconfirmedby;
                if (oModHeader.GetSetconfirmedby.Length > 0)
                {
                    if (oModHeader.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModHeader.GetSetcancelledby;
                if (oModHeader.GetSetcancelledby.Length > 0)
                {
                    if (oModHeader.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertStockStateHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateStockStateHeader(MainModel oModHeader)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE stockstate_header ";
                query = query + " SET    openingdate = ?openingdate, openingtype = ?openingtype, ";
                query = query + "        stockopeningamount = ?stockopeningamount, stockinamount = ?stockinamount, stockoutamount = ?stockoutamount, ";
                query = query + "        closingdate = ?closingdate, closingtype = ?closingtype, ";
                query = query + "        stockclosingamount = ?stockclosingamount, ";
                query = query + "        remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND stockstateno = ?stockstateno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModHeader.GetSetcomp;
                cmd.Parameters.Add("?stockstateno", MySqlDbType.VarChar).Value = oModHeader.GetSetstockstateno;
                if (oModHeader.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModHeader.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModHeader.GetSetopeningtype;
                cmd.Parameters.Add("?stockopeningamount", MySqlDbType.Double).Value = oModHeader.GetSetstockopeningamount;
                cmd.Parameters.Add("?stockinamount", MySqlDbType.Double).Value = oModHeader.GetSetstockinamount;
                cmd.Parameters.Add("?stockoutamount", MySqlDbType.Double).Value = oModHeader.GetSetstockoutamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModHeader.GetSetclosingtype;
                if (oModHeader.GetSetclosingtype.Length > 0)
                {
                    if (oModHeader.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?stockclosingamount", MySqlDbType.Double).Value = oModHeader.GetSetstockclosingamount;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModHeader.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModHeader.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModHeader.GetSetcreatedby;
                if (oModHeader.GetSetcreatedby.Length > 0)
                {
                    if (oModHeader.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModHeader.GetSetconfirmedby;
                if (oModHeader.GetSetconfirmedby.Length > 0)
                {
                    if (oModHeader.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModHeader.GetSetcancelledby;
                if (oModHeader.GetSetcancelledby.Length > 0)
                {
                    if (oModHeader.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModHeader.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateStockStateHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertStockStateDetails(MainModel oModDetails)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO stockstate_details (comp, stockstateno, stockstatetype, transno, trans_lineno, transdate, transtype, itemno, itemdesc, datesoh, location, orderno, order_lineno, transprice, transqty) ";
                query = query + " VALUES (?comp, ?stockstateno, ?stockstatetype, ?transno, ?trans_lineno, ?transdate, ?transtype, ?itemno, ?itemdesc, ?datesoh, ?location, ?orderno, ?order_lineno, ?transprice, ?transqty) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDetails.GetSetcomp;
                cmd.Parameters.Add("?stockstateno", MySqlDbType.VarChar).Value = oModDetails.GetSetstockstateno;
                cmd.Parameters.Add("?stockstatetype", MySqlDbType.VarChar).Value = oModDetails.GetSetstockstatetype;
                cmd.Parameters.Add("?transno", MySqlDbType.VarChar).Value = oModDetails.GetSettransno;
                cmd.Parameters.Add("?trans_lineno", MySqlDbType.Int16).Value = oModDetails.GetSettrans_lineno;
                if (oModDetails.GetSettransdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDetails.GetSettransdate, ukDtfi);
                    cmd.Parameters.Add("?transdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?transdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?transtype", MySqlDbType.VarChar).Value = oModDetails.GetSettranstype;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDetails.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDetails.GetSetitemdesc;
                if (oModDetails.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDetails.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDetails.GetSetlocation;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModDetails.GetSetorderno;
                cmd.Parameters.Add("?order_lineno", MySqlDbType.Int16).Value = oModDetails.GetSetorder_lineno;
                cmd.Parameters.Add("?transprice", MySqlDbType.VarChar).Value = oModDetails.GetSettransprice;
                cmd.Parameters.Add("?transqty", MySqlDbType.Int16).Value = oModDetails.GetSettransqty;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertStockStateDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertStockStateSOH(MainModel oModDetails)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO stockstate_soh (comp, stockstateno, itemno, itemdesc, location, datesoh, qtysoh, costsoh) ";
                query = query + " VALUES (?comp, ?stockstateno, ?itemno, ?itemdesc, ?location, ?datesoh, ?qtysoh, ?costsoh) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModDetails.GetSetcomp;
                cmd.Parameters.Add("?stockstateno", MySqlDbType.VarChar).Value = oModDetails.GetSetstockstateno;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModDetails.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModDetails.GetSetitemdesc;
                cmd.Parameters.Add("?location", MySqlDbType.VarChar).Value = oModDetails.GetSetlocation;
                if (oModDetails.GetSetdatesoh.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModDetails.GetSetdatesoh, ukDtfi);
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?datesoh", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?qtysoh", MySqlDbType.Int16).Value = oModDetails.GetSetqtysoh;
                cmd.Parameters.Add("?costsoh", MySqlDbType.Double).Value = oModDetails.GetSetcostsoh;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertStockStateSOH: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR STOCK STATEMENT ***/

    /*** BEGIN FOR ZAKAT CALCULATION ***/

    public ArrayList getZakatCalculationHeaderList(String comp, String zakatcalculationno, String openingdate, String openingtype, String closingdate, String closingtype, String status)
    {
        ArrayList lsZakatCalculationHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT zakatcalculation_header.comp, zakatcalculation_header.zakatcalculationno, date_format(zakatcalculation_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, zakatcalculation_header.openingtype, ";
                query = query + "        zakatcalculation_header.bankopeningamount, zakatcalculation_header.cashopeningamount, zakatcalculation_header.stockopeningamount, zakatcalculation_header.stockinamount, zakatcalculation_header.stockoutamount, ";
                query = query + "        zakatcalculation_header.pendingreceiptamount, zakatcalculation_header.pendingpaidamount, ";
                query = query + "        date_format(zakatcalculation_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, zakatcalculation_header.closingtype, ";
                query = query + "        zakatcalculation_header.bankclosingamount, zakatcalculation_header.cashclosingamount, zakatcalculation_header.stockclosingamount, ";
                query = query + "        zakatcalculation_header.remarks, zakatcalculation_header.status, zakatcalculation_header.createdby, zakatcalculation_header.createddate, ";
                query = query + "        zakatcalculation_header.confirmedby, zakatcalculation_header.confirmeddate, zakatcalculation_header.cancelledby, zakatcalculation_header.cancelleddate  ";
                query = query + " from   zakatcalculation_header ";
                query = query + " WHERE  zakatcalculation_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.comp = '" + comp + "' ";
                }
                if (zakatcalculationno.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.zakatcalculationno = '" + zakatcalculationno + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(zakatcalculation_header.openingdate,'%d-%m-%Y') = '" + openingdate + "' ";
                }
                if (openingtype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.openingtype = '" + openingtype + "' ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(zakatcalculation_header.closingdate,'%d-%m-%Y') = '" + closingdate + "' ";
                }
                if (closingtype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.closingtype = '" + closingtype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.status = '" + status + "' ";
                }
                query = query + " order by zakatcalculation_header.comp, zakatcalculation_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modZakatCalculationHdr = new MainModel();
                    modZakatCalculationHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modZakatCalculationHdr.GetSetzakatcalculationno = replaceNull(dataReader, "zakatcalculationno");
                    modZakatCalculationHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modZakatCalculationHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modZakatCalculationHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modZakatCalculationHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modZakatCalculationHdr.GetSetpendingreceiptamount = replaceDoubleZero(dataReader, "pendingreceiptamount");
                    modZakatCalculationHdr.GetSetpendingpaidamount = replaceDoubleZero(dataReader, "pendingpaidamount");
                    modZakatCalculationHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modZakatCalculationHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modZakatCalculationHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modZakatCalculationHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modZakatCalculationHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modZakatCalculationHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modZakatCalculationHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modZakatCalculationHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modZakatCalculationHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modZakatCalculationHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modZakatCalculationHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modZakatCalculationHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modZakatCalculationHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modZakatCalculationHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modZakatCalculationHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modZakatCalculationHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsZakatCalculationHdrMod.Add(modZakatCalculationHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getZakatCalculationHeaderList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsZakatCalculationHdrMod;
    }

    public ArrayList getZakatCalculationHeaderList2(String comp, String zakatcalculationno, String openingdate, String openingtype, String closingdate, String closingtype, String status)
    {
        ArrayList lsZakatCalculationHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT zakatcalculation_header.comp, zakatcalculation_header.zakatcalculationno, date_format(zakatcalculation_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, zakatcalculation_header.openingtype, ";
                query = query + "        zakatcalculation_header.bankopeningamount, zakatcalculation_header.cashopeningamount, zakatcalculation_header.stockopeningamount, zakatcalculation_header.stockinamount, zakatcalculation_header.stockoutamount, ";
                query = query + "        zakatcalculation_header.pendingreceiptamount, zakatcalculation_header.pendingpaidamount, ";
                query = query + "        date_format(zakatcalculation_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, zakatcalculation_header.closingtype, ";
                query = query + "        zakatcalculation_header.bankclosingamount, zakatcalculation_header.cashclosingamount, zakatcalculation_header.stockclosingamount, ";
                query = query + "        (zakatcalculation_header.bankclosingamount + zakatcalculation_header.cashclosingamount + zakatcalculation_header.stockclosingamount) totalamountasset, ";
                query = query + "        (select sum(totalamount) from zakatcalculation_details where zakatcalculation_details.comp = zakatcalculation_header.comp and zakatcalculation_details.zakatcalculationno = zakatcalculation_header.zakatcalculationno and zakatcalculation_details.adjustmenttype = 'ZAKAT_ADDITION') totalamountaddition, ";
                query = query + "        (select sum(totalamount) from zakatcalculation_details where zakatcalculation_details.comp = zakatcalculation_header.comp and zakatcalculation_details.zakatcalculationno = zakatcalculation_header.zakatcalculationno and zakatcalculation_details.adjustmenttype = 'ZAKAT_SUBTRACTION') totalamountsubtraction, ";
                query = query + "        zakatcalculation_header.zakatnisabamount, zakatcalculation_header.zakatrate, zakatcalculation_header.sharepercentage, ";
                query = query + "        zakatcalculation_header.remarks, zakatcalculation_header.status, zakatcalculation_header.createdby, zakatcalculation_header.createddate, ";
                query = query + "        zakatcalculation_header.confirmedby, zakatcalculation_header.confirmeddate, zakatcalculation_header.cancelledby, zakatcalculation_header.cancelleddate  ";
                query = query + " from   zakatcalculation_header ";
                query = query + " WHERE  zakatcalculation_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.comp = '" + comp + "' ";
                }
                if (zakatcalculationno.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.zakatcalculationno = '" + zakatcalculationno + "' ";
                }
                if (openingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(zakatcalculation_header.openingdate,'%d-%m-%Y') = '" + openingdate + "' ";
                }
                if (openingtype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.openingtype = '" + openingtype + "' ";
                }
                if (closingdate.Trim().Length > 0)
                {
                    query = query + " and  date_format(zakatcalculation_header.closingdate,'%d-%m-%Y') = '" + closingdate + "' ";
                }
                if (closingtype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.closingtype = '" + closingtype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.status = '" + status + "' ";
                }
                query = query + " order by zakatcalculation_header.comp, zakatcalculation_header.openingdate ";
                //WriteToLogFile("MainController-getZakatCalculationHeaderList2: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modZakatCalculationHdr = new MainModel();
                    modZakatCalculationHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modZakatCalculationHdr.GetSetzakatcalculationno = replaceNull(dataReader, "zakatcalculationno");
                    modZakatCalculationHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modZakatCalculationHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modZakatCalculationHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modZakatCalculationHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modZakatCalculationHdr.GetSetpendingreceiptamount = replaceDoubleZero(dataReader, "pendingreceiptamount");
                    modZakatCalculationHdr.GetSetpendingpaidamount = replaceDoubleZero(dataReader, "pendingpaidamount");
                    modZakatCalculationHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modZakatCalculationHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modZakatCalculationHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modZakatCalculationHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modZakatCalculationHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modZakatCalculationHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modZakatCalculationHdr.GetSetadjustmentsubtractionamount = replaceDoubleZero(dataReader, "totalamountsubtraction");
                    modZakatCalculationHdr.GetSetadjustmentadditionamount = replaceDoubleZero(dataReader, "totalamountaddition");
                    modZakatCalculationHdr.GetSetstatus = replaceNull(dataReader, "status");

                    modZakatCalculationHdr.GetSettotalamountforzakat1 = modZakatCalculationHdr.GetSetbankclosingamount + modZakatCalculationHdr.GetSetcashclosingamount + modZakatCalculationHdr.GetSetstockclosingamount + modZakatCalculationHdr.GetSetadjustmentadditionamount - modZakatCalculationHdr.GetSetadjustmentsubtractionamount;
                    if (modZakatCalculationHdr.GetSetstatus.Equals("CLOSED"))
                    {
                        modZakatCalculationHdr.GetSetzakatnisabamount = replaceDoubleZero(dataReader, "zakatnisabamount");
                    }
                    else
                    {
                        modZakatCalculationHdr.GetSetzakatnisabamount = double.Parse(getParamDetails("000", "", "ZAKAT_NISAB", "ZAKAT_NISAB").GetSetparamdesc);
                    }
                    if(modZakatCalculationHdr.GetSettotalamountforzakat1 > modZakatCalculationHdr.GetSetzakatnisabamount)
                    {
                        modZakatCalculationHdr.GetSettotalamountforzakat2 = modZakatCalculationHdr.GetSettotalamountforzakat1;
                    }else
                    {
                        modZakatCalculationHdr.GetSettotalamountforzakat2 = 0;
                    }
                    modZakatCalculationHdr.GetSetsharepercentage = replaceDoubleZero(dataReader, "sharepercentage");
                    if(modZakatCalculationHdr.GetSetsharepercentage > 0)
                    {
                        modZakatCalculationHdr.GetSettotalamountforzakat3 = modZakatCalculationHdr.GetSettotalamountforzakat2 * modZakatCalculationHdr.GetSetsharepercentage / 100;
                    }
                    else
                    {
                        modZakatCalculationHdr.GetSettotalamountforzakat3 = modZakatCalculationHdr.GetSettotalamountforzakat2;
                    }
                    if (modZakatCalculationHdr.GetSetstatus.Equals("CLOSED"))
                    {
                        modZakatCalculationHdr.GetSetzakatrate = replaceDoubleZero(dataReader, "zakatrate");
                    }
                    else
                    {
                        modZakatCalculationHdr.GetSetzakatrate = double.Parse(getParamDetails("000", "", "ZAKAT_RATE", "ZAKAT_RATE").GetSetparamdesc);
                    }
                    modZakatCalculationHdr.GetSettotalamountpayzakat = modZakatCalculationHdr.GetSettotalamountforzakat3 * modZakatCalculationHdr.GetSetzakatrate / 100;

                    modZakatCalculationHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modZakatCalculationHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modZakatCalculationHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modZakatCalculationHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modZakatCalculationHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modZakatCalculationHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modZakatCalculationHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modZakatCalculationHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modZakatCalculationHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                    lsZakatCalculationHdrMod.Add(modZakatCalculationHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getZakatCalculationHeaderList2: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsZakatCalculationHdrMod;
    }

    public MainModel getZakatCalculationHeaderDetails(String comp, String zakatcalculationno, String status)
    {
        MainModel modZakatCalculationHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = query + " SELECT zakatcalculation_header.comp, zakatcalculation_header.zakatcalculationno, date_format(zakatcalculation_header.openingdate,'%d-%m-%Y %H:%i:%s') openingdate, zakatcalculation_header.openingtype, ";
                query = query + "        zakatcalculation_header.bankopeningamount, zakatcalculation_header.cashopeningamount, zakatcalculation_header.stockopeningamount, zakatcalculation_header.stockinamount, zakatcalculation_header.stockoutamount, ";
                query = query + "        zakatcalculation_header.pendingreceiptamount, zakatcalculation_header.pendingpaidamount, ";
                query = query + "        date_format(zakatcalculation_header.closingdate,'%d-%m-%Y %H:%i:%s') closingdate, zakatcalculation_header.closingtype, ";
                query = query + "        zakatcalculation_header.bankclosingamount, zakatcalculation_header.cashclosingamount, zakatcalculation_header.stockclosingamount, ";
                query = query + "        zakatcalculation_header.zakatnisabamount, zakatcalculation_header.zakatrate, zakatcalculation_header.sharepercentage, ";
                query = query + "        zakatcalculation_header.remarks, zakatcalculation_header.status, zakatcalculation_header.createdby, zakatcalculation_header.createddate, ";
                query = query + "        zakatcalculation_header.confirmedby, zakatcalculation_header.confirmeddate, zakatcalculation_header.cancelledby, zakatcalculation_header.cancelleddate  ";
                query = query + " from   zakatcalculation_header ";
                query = query + " WHERE  zakatcalculation_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.comp = '" + comp + "' ";
                }
                if (zakatcalculationno.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.zakatcalculationno = '" + zakatcalculationno + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_header.status = '" + status + "' ";
                }
                query = query + " order by zakatcalculation_header.comp, zakatcalculation_header.openingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modZakatCalculationHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modZakatCalculationHdr.GetSetzakatcalculationno = replaceNull(dataReader, "zakatcalculationno");
                    modZakatCalculationHdr.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    modZakatCalculationHdr.GetSetopeningtype = replaceNull(dataReader, "openingtype");
                    modZakatCalculationHdr.GetSetbankopeningamount = replaceDoubleZero(dataReader, "bankopeningamount");
                    modZakatCalculationHdr.GetSetcashopeningamount = replaceDoubleZero(dataReader, "cashopeningamount");
                    modZakatCalculationHdr.GetSetpendingreceiptamount = replaceDoubleZero(dataReader, "pendingreceiptamount");
                    modZakatCalculationHdr.GetSetpendingpaidamount = replaceDoubleZero(dataReader, "pendingpaidamount");
                    modZakatCalculationHdr.GetSetbankclosingamount = replaceDoubleZero(dataReader, "bankclosingamount");
                    modZakatCalculationHdr.GetSetcashclosingamount = replaceDoubleZero(dataReader, "cashclosingamount");
                    modZakatCalculationHdr.GetSetstockopeningamount = replaceDoubleZero(dataReader, "stockopeningamount");
                    modZakatCalculationHdr.GetSetstockinamount = replaceDoubleZero(dataReader, "stockinamount");
                    modZakatCalculationHdr.GetSetstockoutamount = replaceDoubleZero(dataReader, "stockoutamount");
                    modZakatCalculationHdr.GetSetstockclosingamount = replaceDoubleZero(dataReader, "stockclosingamount");
                    modZakatCalculationHdr.GetSetclosingdate = replaceNull(dataReader, "closingdate");
                    modZakatCalculationHdr.GetSetclosingtype = replaceNull(dataReader, "closingtype");
                    modZakatCalculationHdr.GetSetzakatnisabamount = replaceDoubleZero(dataReader, "zakatnisabamount");
                    modZakatCalculationHdr.GetSetzakatrate = replaceDoubleZero(dataReader, "zakatrate");
                    modZakatCalculationHdr.GetSetsharepercentage = replaceDoubleZero(dataReader, "sharepercentage");
                    modZakatCalculationHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                    modZakatCalculationHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modZakatCalculationHdr.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modZakatCalculationHdr.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modZakatCalculationHdr.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modZakatCalculationHdr.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modZakatCalculationHdr.GetSetcancelledby = replaceNull(dataReader, "cancelledby");
                    modZakatCalculationHdr.GetSetcancelleddate = replaceNull(dataReader, "cancelleddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getZakatCalculationHeaderDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modZakatCalculationHdr;
    }
    
    public ArrayList getZakatCalculationDetailsList(String comp, String zakatcalculationno, String adjustmenttype)
    {
        ArrayList lszakatcalculationDetMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT zakatcalculation_details.comp, zakatcalculation_details.zakatcalculationno, zakatcalculation_details.adjustmenttype, ";
                query = query + "        zakatcalculation_details.adjustmentno, parameters.paramdesc, zakatcalculation_details.lineno, date_format(zakatcalculation_details.confirmeddate,'%d-%m-%Y %H:%i:%s') confirmeddate, ";
                query = query + "        zakatcalculation_details.remarks, zakatcalculation_details.totalamount ";
                query = query + " from   zakatcalculation_details, parameters ";
                query = query + " WHERE  zakatcalculation_details.comp is not NULL ";
                query = query + " AND    zakatcalculation_details.adjustmentno = parameters.paramid ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.comp = '" + comp + "' ";
                }
                if (zakatcalculationno.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.zakatcalculationno = '" + zakatcalculationno + "' ";
                }
                if (adjustmenttype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.adjustmenttype = '" + adjustmenttype + "' ";
                }
                query = query + " order by zakatcalculation_details.comp, zakatcalculation_details.zakatcalculationno, zakatcalculation_details.adjustmenttype, zakatcalculation_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modDet = new MainModel();
                    modDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modDet.GetSetzakatcalculationno = replaceNull(dataReader, "zakatcalculationno");
                    modDet.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modDet.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                    modDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modDet.GetSetadjustmenttype = replaceNull(dataReader, "adjustmenttype");
                    modDet.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modDet.GetSetremarks = replaceNull(dataReader, "remarks");
                    lszakatcalculationDetMod.Add(modDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getZakatCalculationDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lszakatcalculationDetMod;
    }

    public MainModel getZakatCalculationDetailsDetails(String comp, String zakatcalculationno, String adjustmenttype)
    {
        MainModel modDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT zakatcalculation_details.comp, zakatcalculation_details.zakatcalculationno, zakatcalculation_details.adjustmenttype, ";
                query = query + "        zakatcalculation_details.adjustmentno, zakatcalculation_details.lineno, date_format(zakatcalculation_details.confirmeddate,'%d-%m-%Y %H:%i:%s') confirmeddate, ";
                query = query + "        zakatcalculation_details.remarks, zakatcalculation_details.totalamount ";
                query = query + " from   zakatcalculation_details ";
                query = query + " WHERE  zakatcalculation_details.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.comp = '" + comp + "' ";
                }
                if (zakatcalculationno.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.zakatcalculationno = '" + zakatcalculationno + "' ";
                }
                if (adjustmenttype.Trim().Length > 0)
                {
                    query = query + " and  zakatcalculation_details.adjustmenttype = '" + adjustmenttype + "' ";
                }
                query = query + " order by zakatcalculation_details.comp, zakatcalculation_details.zakatcalculationno, zakatcalculation_details.adjustmenttype, zakatcalculation_details.lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modDet.GetSetzakatcalculationno = replaceNull(dataReader, "zakatcalculationno");
                    modDet.GetSetadjustmentno = replaceNull(dataReader, "adjustmentno");
                    modDet.GetSetlineno = replaceZero(dataReader, "lineno");
                    modDet.GetSetadjustmenttype = replaceNull(dataReader, "adjustmenttype");
                    modDet.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modDet.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    modDet.GetSetremarks = replaceNull(dataReader, "remarks");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getZakatCalculationDetailsDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modDet;
    }

    public String insertZakatCalculationHeader(MainModel oModZakatCalculation)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO zakatcalculation_header (comp, zakatcalculationno, openingdate, openingtype, bankopeningamount, cashopeningamount, ";
                query = query + "                                      bankpaymentreceiptamount, cashpaymentreceiptamount, bankpaymentpaidamount, cashpaymentpaidamount, bankclosingamount, cashclosingamount, ";
                query = query + "                                      stockopeningamount, stockinamount, stockoutamount, stockclosingamount, pendingreceiptamount, pendingpaidamount, zakatnisabamount, zakatrate, sharepercentage, ";
                query = query + "                                      closingdate, closingtype, remarks, status, createdby, createddate, confirmedby, confirmeddate, cancelledby, cancelleddate) ";
                query = query + " VALUES (?comp, ?zakatcalculationno, ?openingdate, ?openingtype, ?bankopeningamount, ?cashopeningamount, ";
                query = query + "                                      ?bankpaymentreceiptamount, ?cashpaymentreceiptamount, ?bankpaymentpaidamount, ?cashpaymentpaidamount, ?bankclosingamount, ?cashclosingamount, ";
                query = query + "                                      ?stockopeningamount, ?stockinamount, ?stockoutamount, ?stockclosingamount, ?pendingreceiptamount, ?pendingpaidamount, ?zakatnisabamount, ?zakatrate, ?sharepercentage, ";
                query = query + "                                      ?closingdate, ?closingtype, ?remarks, ?status, ?createdby, ?createddate, ?confirmedby, ?confirmeddate, ?cancelledby, ?cancelleddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcomp;
                cmd.Parameters.Add("?zakatcalculationno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetzakatcalculationno;
                if (oModZakatCalculation.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetopeningtype;
                cmd.Parameters.Add("?bankopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankopeningamount;
                cmd.Parameters.Add("?cashopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashopeningamount;
                cmd.Parameters.Add("?bankpaymentreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankpaymentreceiptamount;
                cmd.Parameters.Add("?cashpaymentreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashpaymentreceiptamount;
                cmd.Parameters.Add("?bankpaymentpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankpaymentpaidamount;
                cmd.Parameters.Add("?cashpaymentpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashpaymentpaidamount;
                cmd.Parameters.Add("?bankclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankclosingamount;
                cmd.Parameters.Add("?cashclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashclosingamount;
                cmd.Parameters.Add("?stockopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockopeningamount;
                cmd.Parameters.Add("?stockinamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockinamount;
                cmd.Parameters.Add("?stockoutamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockoutamount;
                cmd.Parameters.Add("?stockclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockclosingamount;
                cmd.Parameters.Add("?pendingreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetpendingreceiptamount;
                cmd.Parameters.Add("?pendingpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetpendingpaidamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetclosingtype;
                if (oModZakatCalculation.GetSetclosingtype.Length > 0)
                {
                    if (oModZakatCalculation.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?zakatnisabamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetzakatnisabamount;
                cmd.Parameters.Add("?zakatrate", MySqlDbType.Double).Value = oModZakatCalculation.GetSetzakatrate;
                cmd.Parameters.Add("?sharepercentage", MySqlDbType.Double).Value = oModZakatCalculation.GetSetsharepercentage;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcreatedby;
                if (oModZakatCalculation.GetSetcreatedby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetconfirmedby;
                if (oModZakatCalculation.GetSetconfirmedby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcancelledby;
                if (oModZakatCalculation.GetSetcancelledby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertZakatCalculationHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateZakatCalculationHeader(MainModel oModZakatCalculation)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE zakatcalculation_header ";
                query = query + " SET    openingdate = ?openingdate, openingtype = ?openingtype, ";
                query = query + "        bankopeningamount = ?bankopeningamount, cashopeningamount = ?cashopeningamount, stockopeningamount = ?stockopeningamount, stockinamount = ?stockinamount, stockoutamount = ?stockoutamount, ";
                query = query + "        bankpaymentreceiptamount = ?bankpaymentreceiptamount, cashpaymentreceiptamount = ?cashpaymentreceiptamount, ";
                query = query + "        bankpaymentpaidamount = ?bankpaymentpaidamount, cashpaymentpaidamount = ?cashpaymentpaidamount, ";
                query = query + "        pendingreceiptamount = ?pendingreceiptamount, pendingpaidamount = ?pendingpaidamount, ";
                query = query + "        closingdate = ?closingdate, closingtype = ?closingtype, ";
                query = query + "        bankclosingamount = ?bankclosingamount, cashclosingamount = ?cashclosingamount, stockclosingamount = ?stockclosingamount, ";
                query = query + "        zakatnisabamount = ?zakatnisabamount, zakatrate = ?zakatrate, sharepercentage = ?sharepercentage, ";
                query = query + "        remarks = ?remarks, status = ?status, createdby = ?createdby, createddate = ?createddate, confirmedby = ?confirmedby, confirmeddate = ?confirmeddate, cancelledby = ?cancelledby, cancelleddate = ?cancelleddate ";
                query = query + " WHERE  comp = ?comp AND zakatcalculationno = ?zakatcalculationno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcomp;
                cmd.Parameters.Add("?zakatcalculationno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetzakatcalculationno;
                if (oModZakatCalculation.GetSetopeningdate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetopeningdate, ukDtfi);
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                }
                cmd.Parameters.Add("?openingtype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetopeningtype;
                cmd.Parameters.Add("?bankopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankopeningamount;
                cmd.Parameters.Add("?cashopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashopeningamount;
                cmd.Parameters.Add("?bankpaymentreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankpaymentreceiptamount;
                cmd.Parameters.Add("?cashpaymentreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashpaymentreceiptamount;
                cmd.Parameters.Add("?bankpaymentpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankpaymentpaidamount;
                cmd.Parameters.Add("?cashpaymentpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashpaymentpaidamount;
                cmd.Parameters.Add("?bankclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetbankclosingamount;
                cmd.Parameters.Add("?cashclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetcashclosingamount;
                cmd.Parameters.Add("?pendingreceiptamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetpendingreceiptamount;
                cmd.Parameters.Add("?pendingpaidamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetpendingpaidamount;
                cmd.Parameters.Add("?closingtype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetclosingtype;
                if (oModZakatCalculation.GetSetclosingtype.Length > 0)
                {
                    if (oModZakatCalculation.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?stockopeningamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockopeningamount;
                cmd.Parameters.Add("?stockinamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockinamount;
                cmd.Parameters.Add("?stockoutamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockoutamount;
                cmd.Parameters.Add("?stockclosingamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetstockclosingamount;
                cmd.Parameters.Add("?zakatnisabamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSetzakatnisabamount;
                cmd.Parameters.Add("?zakatrate", MySqlDbType.Double).Value = oModZakatCalculation.GetSetzakatrate;
                cmd.Parameters.Add("?sharepercentage", MySqlDbType.Double).Value = oModZakatCalculation.GetSetsharepercentage;
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetremarks;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcreatedby;
                if (oModZakatCalculation.GetSetcreatedby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?confirmedby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetconfirmedby;
                if (oModZakatCalculation.GetSetconfirmedby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetconfirmeddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetconfirmeddate);
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?cancelledby", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcancelledby;
                if (oModZakatCalculation.GetSetcancelledby.Length > 0)
                {
                    if (oModZakatCalculation.GetSetcancelleddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetcancelleddate);
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?cancelleddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateZakatCalculationHeader: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String insertZakatCalculationDetails(MainModel oModZakatCalculation)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO zakatcalculation_details (comp, zakatcalculationno, adjustmenttype, adjustmentno, lineno, confirmeddate, remarks, totalamount) ";
                query = query + " VALUES (?comp, ?zakatcalculationno, ?adjustmenttype, ?adjustmentno, ?lineno, ?confirmeddate, ?remarks, ?totalamount) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcomp;
                cmd.Parameters.Add("?zakatcalculationno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetzakatcalculationno;
                cmd.Parameters.Add("?adjustmenttype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetadjustmenttype;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetadjustmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModZakatCalculation.GetSetlineno;
                if (oModZakatCalculation.GetSetconfirmeddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetconfirmeddate);
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetremarks;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSettotalamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertZakatCalculationDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateZakatCalculationDetails(MainModel oModZakatCalculation)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE zakatcalculation_details ";
                query = query + " SET    adjustmenttype = ?adjustmenttype, confirmeddate = ?confirmeddate, remarks = ?remarks, totalamount = ?totalamount ";
                query = query + " WHERE comp = ?comp AND zakatcalculationno = ?zakatcalculationno AND adjustmentno = ?adjustmentno AND lineno = ?lineno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetcomp;
                cmd.Parameters.Add("?zakatcalculationno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetzakatcalculationno;
                cmd.Parameters.Add("?adjustmenttype", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetadjustmenttype;
                cmd.Parameters.Add("?adjustmentno", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetadjustmentno;
                cmd.Parameters.Add("?lineno", MySqlDbType.Int16).Value = oModZakatCalculation.GetSetlineno;
                if (oModZakatCalculation.GetSetconfirmeddate.Trim().Length > 0)
                {
                    DateTime datetime = Convert.ToDateTime(oModZakatCalculation.GetSetconfirmeddate);
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = datetime;
                }
                else
                {
                    cmd.Parameters.Add("?confirmeddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?remarks", MySqlDbType.VarChar).Value = oModZakatCalculation.GetSetremarks;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModZakatCalculation.GetSettotalamount;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateZakatCalculationDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    /*** END FOR ZAKAT CALCULATION ***/

    #region/*** BEGIN FOR GENERAL ***/

    public ArrayList getCompInfoList(String comp)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, comp_name, comp_id, comp_accountbank, comp_accountno, ";
                query = query + "        comp_address, comp_contact, comp_contactno, comp_website, comp_email, ";
                query = query + "        comp_icon, comp_logo1, comp_logo2, status, ";
                query = query + "        createdby, createddate, confirmedby, confirmeddate ";
                query = query + " FROM   comp_details ";
                query = query + " WHERE  comp IS NOT NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    comp = '" + comp + "' ";
                }               
                query = query + " ORDER  BY comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }

    public ArrayList getCompInfoListForClosing(String comp, String closingdate)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp_details.comp, stockstate_header.stockstateno, comp_name, comp_id, comp_accountbank, comp_accountno, ";
                query = query + "        comp_address, comp_contact, comp_contactno, comp_website, comp_email, ";
                query = query + "        comp_icon, comp_logo1, comp_logo2, comp_details.status, ";
                query = query + "        comp_details.createdby, comp_details.createddate, comp_details.confirmedby, comp_details.confirmeddate ";
                query = query + " FROM   comp_details, stockstate_header ";
                query = query + " WHERE  comp_details.comp IS NOT NULL ";
                query = query + " AND    comp_details.comp = stockstate_header.comp ";
                query = query + " AND    stockstate_header.status = 'IN-PROGRESS' ";
                query = query + " and    stockstate_header.openingdate <= ?closingdate ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    comp_details.comp = '" + comp + "' ";
                }
                query = query + " ORDER  BY comp_details.comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetstockstateno = replaceNull(dataReader, "stockstateno");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoListForClosing: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }

    public ArrayList getCompInfoListForCashClosing(String comp, String closingdate)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, b.cashflowno, a.comp_name, a.comp_id, a.comp_accountbank, a.comp_accountno, ";
                query = query + "        a.comp_address, a.comp_contact, a.comp_contactno, a.comp_website, a.comp_email, ";
                query = query + "        a.comp_icon, a.comp_logo1, a.comp_logo2, b.status, ";
                query = query + "        b.createdby, b.createddate, b.confirmedby, b.confirmeddate ";
                query = query + " FROM   comp_details a, cashflow_header b ";
                query = query + " WHERE  a.comp IS NOT NULL ";
                query = query + " AND    a.comp = b.comp ";
                query = query + " AND    b.status = 'IN-PROGRESS' ";
                query = query + " and    b.openingdate <= ?closingdate ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    a.comp = '" + comp + "' ";
                }
                query = query + " ORDER  BY a.comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                DateTime datetime = Convert.ToDateTime(closingdate, ukDtfi);
                cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = datetime;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcashflowno = replaceNull(dataReader, "cashflowno");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoListForCashClosing: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }

    public ArrayList getCompInfoList(String comp, String userid)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct comp_details.comp, comp_name, comp_id, comp_accountbank, comp_accountno, ";
                query = query + "        comp_address, comp_contact, comp_contactno, comp_website, comp_email, ";
                query = query + "        comp_icon, comp_logo1, comp_logo2, status, ";
                query = query + "        createdby, createddate, confirmedby, confirmeddate ";
                query = query + " FROM   comp_details inner join user_role on comp_details.comp = user_role.comp ";
                query = query + " WHERE  comp_details.comp IS NOT NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    comp_details.comp = '" + comp + "' ";
                }
                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    (createdby = '" + userid + "' or user_role.userid = '" + userid + "') ";
                }
                query = query + " ORDER  BY comp_details.comp ";
                //WriteToLogFile("MainController-getCompInfoList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }
    
    public ArrayList getCompInfoList(String comp, String userid, String except)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT distinct comp, comp_name, comp_id, comp_accountbank, comp_accountno, ";
                query = query + "        comp_address, comp_contact, comp_contactno, comp_website, comp_email, ";
                query = query + "        comp_icon, comp_logo1, comp_logo2, status, ";
                query = query + "        createdby, createddate, confirmedby, confirmeddate ";
                query = query + " FROM   comp_details ";
                query = query + " WHERE  comp IS NOT NULL ";
                /*
                if (except.Trim().Length > 0)
                {
                    query = query + " AND comp <> '" + except + "'";
                }
                */
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    comp = '" + comp + "' ";
                }
                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    createdby IN (select comp_details.createdby from comp_details, user_role where comp_details.comp = user_role.comp and user_role.userid = '" + userid + "' " + (except.Trim().Length > 0 ? " AND comp_details.comp <> '" + except + "'" : "") + ") ";
                }
                query = query + " ORDER  BY comp ";
                //WriteToLogFile("MainController-getCompInfoList: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }

    public ArrayList getUserCompInfoList(String comp, String userid, String status)
    {
        ArrayList lsCompMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT user_role.userid, user_role.roleid, comp_details.comp, comp_details.comp_name, comp_details.comp_id, comp_details.comp_accountbank, comp_details.comp_accountno, ";
                query = query + "        comp_details.comp_address, comp_details.comp_contact, comp_details.comp_contactno, comp_details.comp_website, comp_details.comp_email, ";
                query = query + "        comp_details.comp_icon, comp_details.comp_logo1, comp_details.comp_logo2, comp_details.status, ";
                query = query + "        comp_details.createdby, comp_details.createddate, comp_details.confirmedby, comp_details.confirmeddate ";
                query = query + " FROM   comp_details, user_role ";
                query = query + " WHERE  comp_details.comp IS NOT NULL ";
                query = query + " AND    comp_details.comp = user_role.comp ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " AND    comp = '" + comp + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " AND    comp_details.status = '" + status + "' ";
                }
                query = query + " AND    user_role.userid = '" + userid + "' ";
                query = query + " ORDER  BY comp_details.comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modComp = new MainModel();
                    modComp.GetSetuserid = replaceNull(dataReader, "userid");
                    modComp.GetSetroleid = replaceNull(dataReader, "roleid");
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    lsCompMod.Add(modComp);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserCompInfoList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsCompMod;
    }

    public MainModel getCompInfoDetails(String comp)
    {
        MainModel modComp = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, comp_name, comp_id, comp_type, comp_accountbank, comp_accountno, ";
                query = query + "        comp_address, comp_contact, comp_contactno, comp_website, comp_email, ";
                query = query + "        comp_icon, comp_logo1, comp_logo2, status, comp_daerah,";
                query = query + "        comp_longitud, comp_latitud, comp_registrationno, comp_area, comp_landstatus, ";
                query = query + "        createdby, createddate, confirmedby, confirmeddate, comp_category ";
                query = query + " FROM   comp_details ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND    comp = '" + comp + "' ";
                query = query + " ORDER  BY comp ";
                //WriteToLogFile("MainController-getCompInfoDetails [SQL >]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modComp.GetSetcomp = replaceNull(dataReader, "comp");
                    modComp.GetSetcomp_name = replaceNull(dataReader, "comp_name");
                    modComp.GetSetcomp_id = replaceNull(dataReader, "comp_id");
                    modComp.GetSetcomp_type = replaceNull(dataReader, "comp_type");
                    modComp.GetSetcomp_accountbank = replaceNull(dataReader, "comp_accountbank");
                    modComp.GetSetcomp_accountno = replaceNull(dataReader, "comp_accountno");
                    modComp.GetSetcomp_address = replaceNull(dataReader, "comp_address");
                    modComp.GetSetcomp_daerah = replaceNull(dataReader, "comp_daerah");
                    modComp.GetSetcomp_contact = replaceNull(dataReader, "comp_contact");
                    modComp.GetSetcomp_contactno = replaceNull(dataReader, "comp_contactno");
                    modComp.GetSetcomp_website = replaceNull(dataReader, "comp_website");
                    modComp.GetSetcomp_email = replaceNull(dataReader, "comp_email");
                    modComp.GetSetcomp_icon = replaceNull(dataReader, "comp_icon");
                    modComp.GetSetcomp_logo1 = replaceNull(dataReader, "comp_logo1");
                    modComp.GetSetcomp_logo2 = replaceNull(dataReader, "comp_logo2");
                    modComp.GetSetstatus = replaceNull(dataReader, "status");
                    modComp.GetSetcomp_longitud = replaceNull(dataReader, "comp_longitud");
                    modComp.GetSetcomp_latitud = replaceNull(dataReader, "comp_latitud");
                    modComp.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modComp.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modComp.GetSetconfirmedby = replaceNull(dataReader, "confirmedby");
                    modComp.GetSetconfirmeddate = replaceNull(dataReader, "confirmeddate");
                    modComp.GetSetcomp_registerno = replaceNull(dataReader, "comp_registrationno");
                    modComp.GetSetcomp_area = replaceNull(dataReader, "comp_area");
                    modComp.GetSetcomp_landstatus = replaceNull(dataReader, "comp_landstatus");
                    modComp.GetSetcomp_cat = replaceNull(dataReader, "comp_category");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompInfoDetails: " + e.Message.ToString());
        }
        return modComp;
    }

    public int createCompany(String comp, String comp_name, String comp_id, String comp_accountbank, String comp_accountno, String comp_address, String comp_contact, String comp_contactno, String comp_website, String comp_email, String comp_icon, String comp_logo1, String comp_logo2, String status, String createdby, String confirmedby, String year)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        SELECT createcompany(?param_comp,  ?param_comp_name,  ?param_comp_id, ?param_comp_accountbank,
							  ?param_comp_accountno, ?param_comp_address, ?param_comp_contact, ?param_comp_contactno, 
                              ?param_comp_website, ?param_comp_email, ?param_comp_icon, ?param_comp_logo1, 
                              ?param_comp_logo2, ?param_status, ?param_createdby, ?param_confirmedby, ?param_year) result;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?param_comp_name", MySqlDbType.VarChar).Value = comp_name;
                cmd.Parameters.Add("?param_comp_id", MySqlDbType.VarChar).Value = comp_id;
                cmd.Parameters.Add("?param_comp_accountbank", MySqlDbType.VarChar).Value = comp_accountbank;
                cmd.Parameters.Add("?param_comp_accountno", MySqlDbType.VarChar).Value = comp_accountno;
                cmd.Parameters.Add("?param_comp_address", MySqlDbType.VarChar).Value = comp_address;
                cmd.Parameters.Add("?param_comp_contact", MySqlDbType.VarChar).Value = comp_contact;
                cmd.Parameters.Add("?param_comp_contactno", MySqlDbType.VarChar).Value = comp_contactno;
                cmd.Parameters.Add("?param_comp_website", MySqlDbType.VarChar).Value = comp_website;
                cmd.Parameters.Add("?param_comp_email", MySqlDbType.VarChar).Value = comp_email;
                cmd.Parameters.Add("?param_comp_icon", MySqlDbType.VarChar).Value = comp_icon;
                cmd.Parameters.Add("?param_comp_logo1", MySqlDbType.VarChar).Value = comp_logo1;
                cmd.Parameters.Add("?param_comp_logo2", MySqlDbType.VarChar).Value = comp_logo2;
                cmd.Parameters.Add("?param_status", MySqlDbType.VarChar).Value = status;
                cmd.Parameters.Add("?param_createdby", MySqlDbType.VarChar).Value = createdby;
                cmd.Parameters.Add("?param_confirmedby", MySqlDbType.VarChar).Value = confirmedby;
                cmd.Parameters.Add("?param_year", MySqlDbType.VarChar).Value = year;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-createCompany: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int updateCompany(String comp, String comp_name, String comp_id, String comp_accountbank, String comp_accountno, String comp_address, String comp_contact, String comp_contactno, String comp_website, String comp_email, String comp_icon, String comp_logo1, String comp_logo2, String status)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        UPDATE comp_details
                        SET   comp_name = ?param_comp_name,  comp_id = ?param_comp_id, comp_accountbank = ?param_comp_accountbank,
							  comp_accountno = ?param_comp_accountno, comp_address = ?param_comp_address, comp_contact = ?param_comp_contact, comp_contactno = ?param_comp_contactno, 
                              comp_website = ?param_comp_website, comp_email = ?param_comp_email, comp_icon = ?param_comp_icon, comp_logo1 = ?param_comp_logo1, 
                              comp_logo2 = ?param_comp_logo2, status = ?param_status
                        WHERE comp = ?param_comp;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?param_comp_name", MySqlDbType.VarChar).Value = comp_name;
                cmd.Parameters.Add("?param_comp_id", MySqlDbType.VarChar).Value = comp_id;
                cmd.Parameters.Add("?param_comp_accountbank", MySqlDbType.VarChar).Value = comp_accountbank;
                cmd.Parameters.Add("?param_comp_accountno", MySqlDbType.VarChar).Value = comp_accountno;
                cmd.Parameters.Add("?param_comp_address", MySqlDbType.VarChar).Value = comp_address;
                cmd.Parameters.Add("?param_comp_contact", MySqlDbType.VarChar).Value = comp_contact;
                cmd.Parameters.Add("?param_comp_contactno", MySqlDbType.VarChar).Value = comp_contactno;
                cmd.Parameters.Add("?param_comp_website", MySqlDbType.VarChar).Value = comp_website;
                cmd.Parameters.Add("?param_comp_email", MySqlDbType.VarChar).Value = comp_email;
                cmd.Parameters.Add("?param_comp_icon", MySqlDbType.VarChar).Value = comp_icon;
                cmd.Parameters.Add("?param_comp_logo1", MySqlDbType.VarChar).Value = comp_logo1;
                cmd.Parameters.Add("?param_comp_logo2", MySqlDbType.VarChar).Value = comp_logo2;
                cmd.Parameters.Add("?param_status", MySqlDbType.VarChar).Value = status;
                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCompany: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public ArrayList getCompUserProfileList(String sComp, String sUserId)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT user_role.comp, user_role.roleid, userprofile.userid, userprofile.username, userprofile.usertype, userprofile.userstatus ";
                query = query + " FROM   userprofile, user_role ";
                query = query + " WHERE  user_role.comp is not NULL ";
                query = query + " AND    user_role.userid = userprofile.userid ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  user_role.comp = '" + sComp + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  user_role.userid = '" + sUserId.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    UserProfileModel oModUserProfile = new UserProfileModel();
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserroleid = replaceNull(dataReader, "roleid");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                    lsArrayList.Add(oModUserProfile);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompUserProfileList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    public int deleteCompUser(String sComp, String sUserId)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        SELECT deleteuser(?comp, ?userid) result;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = sComp;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = sUserId;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteCompUser: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int createfiscalyeardashboard(String comp, String year)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        SELECT createfiscalyeardashboard(?param_comp, ?param_year) result;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?param_year", MySqlDbType.VarChar).Value = year;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-createfiscalyeardashboard: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public String getNextRunningNo(String comp, String type, String status)
    {
        String nextrunno = "";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT running_number.comp, running_number.type, running_number.initial, ";
                query = query + " 	     running_number.year, running_number.runno, running_number.status ";
                query = query + " from   running_number ";
                query = query + " WHERE  running_number.comp is not NULL ";
                query = query + " and  running_number.comp = '" + comp + "' ";
                query = query + " and  running_number.type = '" + type + "' ";
                if (status.Trim().Length > 0)
                {
                    query = query + " and  running_number.status = '" + status + "' ";
                }
                query = query + " order by running_number.comp, running_number.type ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modRunNo = new MainModel();
                    modRunNo.GetSetcomp = replaceNull(dataReader, "comp");
                    modRunNo.GetSettype = replaceNull(dataReader, "type");
                    modRunNo.GetSetinitial = replaceNull(dataReader, "initial");
                    modRunNo.GetSetyear = replaceNull(dataReader, "year");
                    modRunNo.GetSetrunno = replaceZero(dataReader, "runno") + 1;
                    modRunNo.GetSetstatus = replaceNull(dataReader, "status");
                    nextrunno = modRunNo.GetSetinitial + modRunNo.GetSetyear + modRunNo.GetSetrunno.ToString().PadLeft(4,'0');
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextRunningNo: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return nextrunno;
    }

    public String getNextRunningNo(String comp, String type, String status, String initial, String year)
    {
        String nextrunno = "";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT running_number.comp, running_number.type, running_number.initial, ";
                query = query + " 	     running_number.year, running_number.runno, running_number.status ";
                query = query + " from   running_number ";
                query = query + " WHERE  running_number.comp is not NULL ";
                query = query + " and  running_number.comp = '" + comp + "' ";
                query = query + " and  running_number.type = '" + type + "' ";
                if (status.Trim().Length > 0)
                {
                    query = query + " and  running_number.status = '" + status + "' ";
                }
                query = query + " and  running_number.year = '" + year + "' ";
                query = query + " order by running_number.comp, running_number.type ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modRunNo = new MainModel();
                    modRunNo.GetSetcomp = replaceNull(dataReader, "comp");
                    modRunNo.GetSettype = replaceNull(dataReader, "type");
                    modRunNo.GetSetinitial = replaceNull(dataReader, "initial");
                    modRunNo.GetSetyear = replaceNull(dataReader, "year");
                    modRunNo.GetSetrunno = replaceZero(dataReader, "runno") + 1;
                    modRunNo.GetSetstatus = replaceNull(dataReader, "status");
                    nextrunno = modRunNo.GetSetinitial + modRunNo.GetSetyear + modRunNo.GetSetrunno.ToString().PadLeft(4, '0');
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextRunningNo: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return nextrunno;
    }

    public String getNextRunningNo(String comp, String type, String status, String transfermode)
    {
        String nextrunno = "";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT running_number.comp, running_number.type, running_number.initial, ";
                query = query + " 	     running_number.year, running_number.runno, running_number.status ";
                query = query + " from   running_number ";
                query = query + " WHERE  running_number.comp is not NULL ";
                query = query + " and  running_number.comp = '" + comp + "' ";
                query = query + " and  running_number.type = '" + type + "' ";
                if (status.Trim().Length > 0)
                {
                    query = query + " and  running_number.status = '" + status + "' ";
                }
                query = query + " order by running_number.comp, running_number.type ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modRunNo = new MainModel();
                    modRunNo.GetSetcomp = replaceNull(dataReader, "comp");
                    modRunNo.GetSettype = replaceNull(dataReader, "type");
                    modRunNo.GetSetinitial = replaceNull(dataReader, "initial");
                    modRunNo.GetSetyear = replaceNull(dataReader, "year");
                    modRunNo.GetSetrunno = replaceZero(dataReader, "runno") + 1;
                    modRunNo.GetSetstatus = replaceNull(dataReader, "status");
                    if (transfermode.Equals("1"))
                    {
                        nextrunno = modRunNo.GetSetinitial + modRunNo.GetSetyear + modRunNo.GetSetrunno.ToString().PadLeft(4, '0') + "-" + modRunNo.GetSetcomp;
                    }
                    else
                    {
                        nextrunno = modRunNo.GetSetinitial + modRunNo.GetSetyear + modRunNo.GetSetrunno.ToString().PadLeft(4, '0');
                    }
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextRunningNo: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return nextrunno;
    }

    public void updateNextRunningNo(String comp, String type, String status)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE running_number ";
                query = query + " SET runno = runno + 1 ";
                query = query + " WHERE comp = ?comp ";
                query = query + " AND type = ?type ";
                query = query + " AND status = ?status ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?type", MySqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = status;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateNextRunningNo: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
    }

    public void updateNextRunningNo(String comp, String type, String status, String year)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE running_number ";
                query = query + " SET runno = runno + 1 ";
                query = query + " WHERE comp = ?comp ";
                query = query + " AND type = ?type ";
                query = query + " AND status = ?status ";
                query = query + " AND year = ?year ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?type", MySqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = status;
                cmd.Parameters.Add("?year", MySqlDbType.VarChar).Value = year;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateNextRunningNo: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
    }

    public String updateDateSameAsConfirmedDate(String tablename, String columnDate, String columnConfirmedDate, String comp, String columnnoname, String columnnovalue)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE " + tablename;
                query = query + " SET    " + columnDate + " = " + columnConfirmedDate;
                query = query + " WHERE  comp = '" + comp + "' AND " + columnnoname + " = '" + columnnovalue + "' ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateDateSameAsConfirmedDate: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public MainModel getTaxDetails(String comp, String taxcode)
    {
        MainModel modTaxDet = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT tax.comp, tax.taxcode, tax.taxrate ";
                query = query + " FROM   tax ";
                query = query + " WHERE  tax.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  tax.comp = '" + comp + "' ";
                }
                if (taxcode.Trim().Length > 0)
                {
                    query = query + " and  tax.taxcode = '" + taxcode + "' ";
                }
                query = query + " ORDER  BY tax.comp, tax.taxcode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    modTaxDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modTaxDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modTaxDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTaxDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modTaxDet;
    }

    public ArrayList getTaxList(String comp)
    {
        ArrayList lsTax = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT tax.comp, tax.taxcode, tax.taxrate ";
                query = query + " FROM   tax ";
                query = query + " WHERE  tax.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  tax.comp = '" + comp + "' ";
                }
                query = query + " ORDER  BY tax.comp, tax.taxcode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modTaxDet = new MainModel();
                    modTaxDet.GetSetcomp = replaceNull(dataReader, "comp");
                    modTaxDet.GetSettaxcode = replaceNull(dataReader, "taxcode");
                    modTaxDet.GetSettaxrate = replaceDoubleZero(dataReader, "taxrate");
                    lsTax.Add(modTaxDet);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTaxList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsTax;
    }

    public MainModel getAlertMessage(String message)
    {
        MainModel oAlertMssg = new MainModel();
        if (message.Length > 0)
        {
            ArrayList lsAlertMssg = tokenString(message, "|");
            if (lsAlertMssg.Count > 0)
            {
                oAlertMssg.GetSetalertstatus = lsAlertMssg[0].ToString();
                oAlertMssg.GetSetalertmessage = lsAlertMssg[1].ToString();
            }
        }
        return oAlertMssg;
    }

    public ArrayList getCompRoleList()
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT roleid, rolename, roledesc, rolestatus FROM role ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel oModRole = new MainModel();
                    oModRole.GetSetroleid = replaceNull(dataReader, "roleid");
                    oModRole.GetSetrolename = replaceNull(dataReader, "rolename");
                    oModRole.GetSetroledesc = replaceNull(dataReader, "roledesc");
                    oModRole.GetSetrolestatus = replaceNull(dataReader, "rolestatus");
                    lsArrayList.Add(oModRole);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCompRoleList: " + e.Message.ToString());
        }
        return lsArrayList;
    }

    public String updateUserRoleSubModule(String comp, String roleid, String[] module, String[] submodule)
    {
        String RoleSubModule = "";

        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                //delete all access
                query = "";
                query = query + " DELETE FROM role_submodule ";
                query = query + " WHERE  comp = ?comp AND roleid = ?roleid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();

                query = "";
                query = query + " DELETE FROM role_module ";
                query = query + " WHERE  comp = ?comp AND roleid = ?roleid ";
                cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();

                query = "";
                query = query + " DELETE FROM role_screen ";
                query = query + " WHERE  comp = ?comp AND roleid = ?roleid ";
                cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();

                //assigned selected access

                for (int i = 0; i < submodule.Length; i++)
                {
                    //role_screen, submodule
                    query = "";
                    query = query + " INSERT INTO role_submodule(roleid, moduleid, submoduleid, comp) ";
                    query = query + " VALUES(?roleid, ?moduleid,?submoduleid,?comp ) ";
                    cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                    cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = module[i];
                    cmd.Parameters.Add("?submoduleid", MySqlDbType.VarChar).Value = submodule[i];
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                    cmd.ExecuteNonQuery();

                    query = "";
                    query = query + " INSERT INTO role_screen(roleid,screenid,comp) ";
                    query = query + " VALUES(?roleid, ?screenid,?comp ) ";
                    cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                    cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = submodule[i];
                    cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                    cmd.ExecuteNonQuery();

                }
                ArrayList moduleCheck = new ArrayList();

                for (int i = 0; i < module.Length; i++)
                {
                    //module
                    if (!moduleCheck.Contains(module[i]))
                    {
                        moduleCheck.Add(module[i]);
                        query = "";
                        query = query + " INSERT INTO role_module(roleid, moduleid, comp) ";
                        query = query + " VALUES(?roleid,?moduleid,?comp ) ";
                        cmd = new MySqlCommand(query, dbConnect.connection);
                        cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                        cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = module[i];
                        cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                        cmd.ExecuteNonQuery();
                    }
                }


                WriteToLogFile("MainController-updateUserRoleSubModule: " + ":roleid-" + roleid + ":comp-" + comp + ":module-" + module[0] + ":submodule-" + submodule[0]);

            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateUserRoleSubModule: " + e.Message.ToString());
        }
        return RoleSubModule;
    }

    public ArrayList getRoleSubModule(String comp, String roleid)
    {
        ArrayList lsRoleSubModule1 = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT role_submodule.submoduleid, role_submodule.comp, role.roleid FROM role, role_module, role_submodule";
                query = query + " WHERE role.roleid is not NULL  ";
                query = query + " AND role.roleid = role_module.roleid ";
                query = query + " AND role_module.roleid = role_submodule.roleid ";
                query = query + " AND role_module.moduleid = role_submodule.moduleid ";
                query = query + " AND role_module.comp = role_submodule.comp ";

                if (comp.Length > 0)
                {
                    query = query + " AND    role_module.comp = '" + comp + "' ";
                }
                if (roleid.Trim().Length > 0)
                {
                    query = query + " and  role_module.roleid = '" + roleid + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();
                    oMainMod.GetSetcomp = replaceNull(dataReader, "comp");
                    oMainMod.GetSetroleid = replaceNull(dataReader, "roleid");
                    oMainMod.GetSetsubmoduleid = replaceNull(dataReader, "submoduleid");
                    lsRoleSubModule1.Add(oMainMod);
                }


                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserRoleSreen: " + e.Message.ToString());
        }
        return lsRoleSubModule1;
    }

    public ArrayList getUserRoleModule(String userid, String comp)
    {
        ArrayList lsUserRoleMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT role_module.moduleid FROM user_role, role_module ";
                query = query + " WHERE  user_role.userid is not NULL ";
                query = query + " AND    user_role.roleid = role_module.roleid ";
                query = query + " AND    user_role.comp = role_module.comp ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " and  user_role.userid = '" + userid + "' ";
                }
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  user_role.comp = '" + comp + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    String moduleid = replaceNull(dataReader, "moduleid");
                    lsUserRoleMod.Add(moduleid);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserRoleModule: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsUserRoleMod;
    }

    public ArrayList getModule()
    {
        ArrayList lsMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT module.moduleid, module.modulename, module.moduledesc, module.modulestatus, module.moduleicon FROM module ";
                query = query + " WHERE  module.moduleid is not NULL ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetmodulename = replaceNull(dataReader, "modulename");
                    oMainMod.GetSetmoduledesc = replaceNull(dataReader, "moduledesc");
                    oMainMod.GetSetmodulestatus = replaceNull(dataReader, "modulestatus");
                    oMainMod.GetSetmoduleicon = replaceNull(dataReader, "moduleicon");
                    lsMod.Add(oMainMod);

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getModule: " + e.Message.ToString());
        }
        return lsMod;
    }

    public ArrayList getModule(string status)
    {
        ArrayList lsMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT module.moduleid, module.modulename, module.moduledesc, module.modulestatus, module.moduleicon FROM module ";
                query = query + " WHERE  module.moduleid is not NULL and modulestatus = '"+status+"' ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetmodulename = replaceNull(dataReader, "modulename");
                    oMainMod.GetSetmoduledesc = replaceNull(dataReader, "moduledesc");
                    oMainMod.GetSetmodulestatus = replaceNull(dataReader, "modulestatus");
                    oMainMod.GetSetmoduleicon = replaceNull(dataReader, "moduleicon");
                    lsMod.Add(oMainMod);

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getModule: " + e.Message.ToString());
        }
        return lsMod;
    }

    public MainModel getModuleDetails(String moduleid)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                query = "";
                query = query + " SELECT module.moduleid, module.modulename, module.moduledesc, module.modulestatus, module.moduleicon FROM module ";
                query = query + " WHERE  module.moduleid is not NULL ";

                if (moduleid.Trim().Length > 0)
                {
                    query = query + " and  module.moduleid = '" + moduleid + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                if (dataReader.Read())
                {
                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetmodulename = replaceNull(dataReader, "modulename");
                    oMainMod.GetSetmoduledesc = replaceNull(dataReader, "moduledesc");
                    oMainMod.GetSetmodulestatus = replaceNull(dataReader, "modulestatus");
                    oMainMod.GetSetmoduleicon = replaceNull(dataReader, "moduleicon");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getModuleDetails: " + e.Message.ToString());
        }
        return oMainMod;
    }

    public ArrayList getRole()
    {
        ArrayList lsMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT roleid, rolename, roledesc, rolestatus FROM bioappdb.role ";
                query = query + " WHERE  roleid is not NULL ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetroleid = replaceNull(dataReader, "roleid");
                    oMainMod.GetSetrolename = replaceNull(dataReader, "rolename");
                    oMainMod.GetSetroledesc = replaceNull(dataReader, "roledesc");
                    oMainMod.GetSetrolestatus = replaceNull(dataReader, "rolestatus");

                    lsMod.Add(oMainMod);

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getRole: " + e.Message.ToString());
        }
        return lsMod;
    }

    public MainModel getRoleDetails(String roleid)
    {
        MainModel oMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT roleid, rolename, roledesc, rolestatus FROM bioappdb.role ";
                query = query + " WHERE  roleid is not NULL ";

                if (roleid.Trim().Length > 0)
                {
                    query = query + " and  roleid = '" + roleid + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                if (dataReader.Read())
                {
                    oMod.GetSetroleid = replaceNull(dataReader, "roleid");
                    oMod.GetSetrolename = replaceNull(dataReader, "rolename");
                    oMod.GetSetroledesc = replaceNull(dataReader, "roledesc");
                    oMod.GetSetrolestatus = replaceNull(dataReader, "rolestatus");
                }

                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getRoleDetails: " + e.Message.ToString());
        }
        return oMod;
    }

    public ArrayList getScreen()
    {
        ArrayList lsMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT screenid, screenfilename, screendesc, screenstatus FROM bioappdb.screen ";
                query = query + " WHERE  screenid is not NULL ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oMainMod.GetSetscreenfilename = replaceNull(dataReader, "screenfilename");
                    oMainMod.GetSetscreendesc = replaceNull(dataReader, "screendesc");
                    oMainMod.GetSetscreenstatus = replaceNull(dataReader, "screenstatus");

                    lsMod.Add(oMainMod);

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getScreen: " + e.Message.ToString());
        }
        return lsMod;
    }

    public MainModel getScreenDetails(String screenid)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT screenid, screenfilename, screendesc, screenstatus FROM bioappdb.screen ";
                query = query + " WHERE  screenid is not NULL ";

                if (screenid.Trim().Length > 0)
                {
                    query = query + " and  screenid = '" + screenid + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                if (dataReader.Read())
                {
                    oMainMod.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oMainMod.GetSetscreenfilename = replaceNull(dataReader, "screenfilename");
                    oMainMod.GetSetscreendesc = replaceNull(dataReader, "screendesc");
                    oMainMod.GetSetscreenstatus = replaceNull(dataReader, "screenstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getScreenDetails: " + e.Message.ToString());
        }
        return oMainMod;
    }

    public ArrayList getSubModule(string moduleid)
    {
        ArrayList lsSubMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT submodule.submoduleid, submodule.moduleid, submodule.submodulename, submodule.submoduledesc, submodule.submodulestatus FROM submodule ";
                query = query + " WHERE submodule.submoduleid IS NOT NULL ";

                if (moduleid.Trim().Length > 0)
                {
                    query = query + " and  submodule.moduleid = '" + moduleid + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetsubmoduleid = replaceNull(dataReader, "submoduleid");
                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetsubmodulename = replaceNull(dataReader, "submodulename");
                    oMainMod.GetSetsubmoduledesc = replaceNull(dataReader, "submoduledesc");
                    oMainMod.GetSetsubmodulestatus = replaceNull(dataReader, "submodulestatus");

                    lsSubMod.Add(oMainMod);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getSubModule: " + e.Message.ToString());
        }
        return lsSubMod;
    }

    public ArrayList getSubModule(string moduleid, string status)
    {
        ArrayList lsSubMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT submodule.submoduleid, submodule.moduleid, submodule.submodulename, submodule.submoduledesc, submodule.submodulestatus FROM submodule ";
                query = query + " WHERE submodule.submoduleid IS NOT NULL and submodulestatus = '"+status+"' ";

                if (moduleid.Trim().Length > 0)
                {
                    query = query + " and  submodule.moduleid = '" + moduleid + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();

                    oMainMod.GetSetsubmoduleid = replaceNull(dataReader, "submoduleid");
                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetsubmodulename = replaceNull(dataReader, "submodulename");
                    oMainMod.GetSetsubmoduledesc = replaceNull(dataReader, "submoduledesc");
                    oMainMod.GetSetsubmodulestatus = replaceNull(dataReader, "submodulestatus");

                    lsSubMod.Add(oMainMod);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getSubModule: " + e.Message.ToString());
        }
        return lsSubMod;
    }

    public MainModel getSubModuleDetails(string submodule)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT submodule.submoduleid, submodule.moduleid, submodule.submodulename, submodule.submoduledesc, submodule.submodulestatus FROM submodule ";
                query = query + " WHERE submodule.submoduleid IS NOT NULL ";

                if (submodule.Trim().Length > 0)
                {
                    query = query + " and  submodule.submoduleid = '" + submodule + "' ";
                }

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();

                if (dataReader.Read())
                {
                    oMainMod.GetSetsubmoduleid = replaceNull(dataReader, "submoduleid");
                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetsubmodulename = replaceNull(dataReader, "submodulename");
                    oMainMod.GetSetsubmoduledesc = replaceNull(dataReader, "submoduledesc");
                    oMainMod.GetSetsubmodulestatus = replaceNull(dataReader, "submodulestatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getSubModuleDetails: " + e.Message.ToString());
        }
        return oMainMod;
    }

    public int updateRole(MainModel oModRole)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE role ";
                query = query + " SET  ";
                query = query + "     rolename = ?rolename, ";
                query = query + "     roledesc = ?roledesc, ";
                query = query + "     rolestatus = ?rolestatus ";
                query = query + " WHERE roleid=?roleid";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = oModRole.GetSetroleid;
                cmd.Parameters.Add("?rolename", MySqlDbType.VarChar).Value = oModRole.GetSetrolename;
                cmd.Parameters.Add("?roledesc", MySqlDbType.VarChar).Value = oModRole.GetSetroledesc;
                cmd.Parameters.Add("?rolestatus", MySqlDbType.VarChar).Value = oModRole.GetSetrolestatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateRole: " + e.Message.ToString());
        }
        return success;
    }

    public int updateModule(MainModel oModModule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                WriteToLogFile("MainController-updatemodule: " + oModModule.GetSetmoduleid);
                query = "";
                query = query + " UPDATE module ";
                query = query + " SET  ";
                query = query + "     modulename = ?modulename, ";
                query = query + "     moduledesc = ?moduledesc, ";
                query = query + "     modulestatus = ?modulestatus, ";
                query = query + "     moduleicon = ?moduleicon ";
                query = query + " WHERE moduleid=?moduleid";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?modulename", MySqlDbType.VarChar).Value = oModModule.GetSetmodulename;
                cmd.Parameters.Add("?moduledesc", MySqlDbType.VarChar).Value = oModModule.GetSetmoduledesc;
                cmd.Parameters.Add("?modulestatus", MySqlDbType.VarChar).Value = oModModule.GetSetmodulestatus;
                cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = oModModule.GetSetmoduleid;
                cmd.Parameters.Add("?moduleicon", MySqlDbType.VarChar).Value = oModModule.GetSetmoduleicon;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateModule: " + e.Message.ToString());
        }
        return success;
    }

    public int updateSubmodule(MainModel oModSubmodule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE submodule ";
                query = query + " SET  ";
                query = query + "     moduleid = ?moduleid, ";
                query = query + "     submodulename = ?submodulename, ";
                query = query + "     submoduledesc = ?submoduledesc, ";
                query = query + "     submodulestatus = ?submodulestatus ";
                query = query + " WHERE submoduleid=?submoduleid";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?submoduleid", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmoduleid;
                cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = oModSubmodule.GetSetmoduleid;
                cmd.Parameters.Add("?submodulename", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmodulename;
                cmd.Parameters.Add("?submoduledesc", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmoduledesc;
                cmd.Parameters.Add("?submodulestatus", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmodulestatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateSubmodule: " + e.Message.ToString());
        }
        return success;
    }

    public int updateScreen(MainModel oModScreen)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE screen ";
                query = query + " SET  ";
                query = query + "     screenfilename = ?screenfilename, ";
                query = query + "     screendesc = ?screendesc, ";
                query = query + "     screenstatus = ?screenstatus ";
                query = query + " WHERE screenid=?screenid";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenid;
                cmd.Parameters.Add("?screenfilename", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenfilename;
                cmd.Parameters.Add("?screendesc", MySqlDbType.VarChar).Value = oModScreen.GetSetscreendesc;
                cmd.Parameters.Add("?screenstatus", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateScreen: " + e.Message.ToString());
        }
        return success;
    }

    public int insertRole(MainModel oModRole)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO role(roleid, rolename, roledesc, rolestatus) ";
                query = query + " VALUES(?roleid, ?rolename, ?roledesc, ?rolestatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = oModRole.GetSetroleid;
                cmd.Parameters.Add("?rolename", MySqlDbType.VarChar).Value = oModRole.GetSetrolename;
                cmd.Parameters.Add("?roledesc", MySqlDbType.VarChar).Value = oModRole.GetSetroledesc;
                cmd.Parameters.Add("?rolestatus", MySqlDbType.VarChar).Value = oModRole.GetSetrolestatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertRole: " + e.Message.ToString());
        }
        return success;
    }

    public int insertModule(MainModel oModModule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO module(moduleid, modulename, moduledesc, modulestatus, moduleicon) ";
                query = query + " VALUES(?moduleid, ?modulename, ?moduledesc, ?modulestatus, ?moduleicon) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = oModModule.GetSetmoduleid;
                cmd.Parameters.Add("?modulename", MySqlDbType.VarChar).Value = oModModule.GetSetmodulename;
                cmd.Parameters.Add("?moduledesc", MySqlDbType.VarChar).Value = oModModule.GetSetmoduledesc;
                cmd.Parameters.Add("?modulestatus", MySqlDbType.VarChar).Value = oModModule.GetSetmodulestatus;
                cmd.Parameters.Add("?moduleicon", MySqlDbType.VarChar).Value = oModModule.GetSetmoduleicon;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertModule: " + e.Message.ToString());
        }
        return success;
    }

    public int insertSubmodule(MainModel oModSubmodule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO submodule(submoduleid, moduleid, submodulename, submoduledesc ,submodulestatus) ";
                query = query + " VALUES(?submoduleid, ?moduleid, ?submodulename, ?submoduledesc ,?submodulestatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?submoduleid", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmoduleid;
                cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = oModSubmodule.GetSetmoduleid;
                cmd.Parameters.Add("?submodulename", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmodulename;
                cmd.Parameters.Add("?submoduledesc", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmoduledesc;
                cmd.Parameters.Add("?submodulestatus", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmodulestatus;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertSubmodule: " + e.Message.ToString());
        }
        return success;
    }

    public int insertScreen(MainModel oModScreen)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO screen(screenid, screenfilename, screendesc, screenstatus) ";
                query = query + " VALUES(?screenid, ?screenfilename, ?screendesc, ?screenstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenid;
                cmd.Parameters.Add("?screenfilename", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenfilename;
                cmd.Parameters.Add("?screendesc", MySqlDbType.VarChar).Value = oModScreen.GetSetscreendesc;
                cmd.Parameters.Add("?screenstatus", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenstatus;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertScreen: " + e.Message.ToString());
        }
        return success;
    }

    public int deleteRole(MainModel oModRole)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM role ";
                query = query + " WHERE roleid = ?roleid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = oModRole.GetSetroleid;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteRole: " + e.Message.ToString());
        }
        return success;

    }
    public int deleteScreen(MainModel oModScreen)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM screen ";
                query = query + " WHERE screenid = ?screenid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = oModScreen.GetSetscreenid;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteScreen: " + e.Message.ToString());
        }
        return success;
    }
    public int deleteModule(MainModel oModModule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM module ";
                query = query + " WHERE moduleid = ?moduleid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?moduleid", MySqlDbType.VarChar).Value = oModModule.GetSetmoduleid;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteModule: " + e.Message.ToString());
        }
        return success;
    }
    public int deleteSubmodule(MainModel oModSubmodule)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM submodule ";
                query = query + " WHERE submoduleid = ?submoduleid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?submoduleid", MySqlDbType.VarChar).Value = oModSubmodule.GetSetsubmoduleid;

                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteSubmodule: " + e.Message.ToString());
        }
        return success;
    }

    public ArrayList getUserRoleSubModule(String userid, String comp)
    {
        ArrayList lsUserRoleSubMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT role_submodule.submoduleid FROM user_role, role_module, role_submodule ";
                query = query + " WHERE  user_role.userid is not NULL ";
                query = query + " AND    user_role.roleid = role_module.roleid ";
                query = query + " AND    user_role.comp = role_module.comp ";
                query = query + " AND    role_module.roleid = role_submodule.roleid ";
                query = query + " AND    role_module.moduleid = role_submodule.moduleid ";
                query = query + " AND    role_module.comp = role_submodule.comp ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " and  user_role.userid = '" + userid + "' ";
                }
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  user_role.comp = '" + comp + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    String submoduleid = replaceNull(dataReader, "submoduleid");
                    lsUserRoleSubMod.Add(submoduleid);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserRoleSubModule: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsUserRoleSubMod;
    }

    public MainModel getUserRoleSreen(String userid, String comp, String screnid)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select user_role.comp, user_role.userid, user_role.roleid, role_submodule.moduleid ,role_submodule.submoduleid, role_screen.screenid, screen.screenfilename ";
                query = query + " from   user_role, role_submodule, role_screen, screen ";
                query = query + " where  user_role.roleid = role_submodule.roleid ";
                query = query + " and	   user_role.comp = role_submodule.comp ";
                query = query + " and	   role_submodule.roleid = role_screen.roleid ";
                query = query + " and	   role_submodule.submoduleid = role_screen.screenid ";
                query = query + " and	   role_submodule.comp = role_screen.comp ";
                query = query + " and	   role_screen.screenid = screen.screenid ";
                if (userid.Length > 0)
                {
                    query = query + " AND    user_role.userid = '"+userid+"' ";
                }
                if (screnid.Length > 0)
                {
                    query = query + " AND    screen.screenid = '" + screnid + "' ";
                }
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  user_role.comp = '" + comp + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    oMainMod.GetSetcomp = replaceNull(dataReader, "comp");
                    oMainMod.GetSetuserid = replaceNull(dataReader, "userid");
                    oMainMod.GetSetroleid = replaceNull(dataReader, "roleid");
                    oMainMod.GetSetmoduleid = replaceNull(dataReader, "moduleid");
                    oMainMod.GetSetsubmoduleid = replaceNull(dataReader, "submoduleid");
                    oMainMod.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oMainMod.GetSetscreenfilename = replaceNull(dataReader, "screenfilename");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserRoleSreen: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oMainMod;
    }
    
    public int insertCompDetails(String comp, String compno, String compdesc, String complatitude, String complongitude, String compstatus)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO buscompany(comp, compno, compdesc, complatitude, complongitude, compstatus) ";
                query = query + " VALUES(?comp, ?compno, ?compdesc, ?complatitude, ?complongitude, ?compstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?compno", MySqlDbType.VarChar).Value = compno;
                cmd.Parameters.Add("?compdesc", MySqlDbType.VarChar).Value = compdesc;
                cmd.Parameters.Add("?complatitude", MySqlDbType.Double).Value = complatitude;
                cmd.Parameters.Add("?complongitude", MySqlDbType.Double).Value = complongitude;
                cmd.Parameters.Add("?compstatus", MySqlDbType.VarChar).Value = compstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertCompDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int updateCompDetails(String comp, String compno, String compdesc, String complatitude, String complongitude, String compstatus)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE buscompany ";
                query = query + " SET compno = ?compno, ";
                query = query + "     compdesc = ?compdesc, ";
                query = query + "     complatitude = ?complatitude, ";
                query = query + "     complongitude = ?complongitude, ";
                query = query + "     compstatus = ?compstatus ";
                query = query + " WHERE comp = ?comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?compno", MySqlDbType.VarChar).Value = compno;
                cmd.Parameters.Add("?compdesc", MySqlDbType.VarChar).Value = compdesc;
                cmd.Parameters.Add("?complatitude", MySqlDbType.Double).Value = complatitude;
                cmd.Parameters.Add("?complongitude", MySqlDbType.Double).Value = complongitude;
                cmd.Parameters.Add("?compstatus", MySqlDbType.VarChar).Value = compstatus;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCompDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int updateCompDetails1(String comp, String compdesc, String compregisterno, String compcontact, String compcontactno, String compaddress, String comparea, String landstatus, String compstatus)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                WriteToLogFile("MainController-updateCompDetails1: " + comp + compdesc + compregisterno + compcontact + compcontactno + compaddress + "Daerah: " + comparea + landstatus + " : " + compstatus);


                query = "";
                query = query + " UPDATE comp_details ";
                query = query + " SET comp_name = ?compdesc, ";
                query = query + "     comp_registrationno = ?compregisterno, ";
                query = query + "     comp_contact = ?compcontact, ";
                query = query + "     comp_contactno = ?compcontactno, ";
                query = query + "     comp_address = ?compaddress, ";
                query = query + "     comp_daerah = ?comparea, ";
                query = query + "     comp_landstatus = ?landstatus, ";
                query = query + "     status = ?compstatus ";
                query = query + " WHERE comp = ?comp ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?compdesc", MySqlDbType.VarChar).Value = compdesc;
                cmd.Parameters.Add("?compregisterno", MySqlDbType.VarChar).Value = compregisterno;
                cmd.Parameters.Add("?compcontact", MySqlDbType.VarChar).Value = compcontact;
                cmd.Parameters.Add("?compcontactno", MySqlDbType.VarChar).Value = compcontactno;
                cmd.Parameters.Add("?compaddress", MySqlDbType.VarChar).Value = compaddress;
                cmd.Parameters.Add("?comparea", MySqlDbType.VarChar).Value = comparea;
                cmd.Parameters.Add("?landstatus", MySqlDbType.VarChar).Value = landstatus;
                cmd.Parameters.Add("?compstatus", MySqlDbType.VarChar).Value = compstatus;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCompDetails1: " + e.Message.ToString());
        }
        return success;
    }

    public MainModel getReportFYRYearMonth(String comp, String financeyear, String financemonth, String actualyear, String actualmonth)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select comp, financeyear, financemonth, actualyear, actualmonth ";
                query = query + " from   fiscalperiod ";
                query = query + " where  comp is not null ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + comp + "' ";
                }
                if (financeyear.Length > 0)
                {
                    query = query + " AND    financeyear = '" + financeyear + "' ";
                }
                if (financemonth.Length > 0)
                {
                    query = query + " AND    financemonth = '" + financemonth + "' ";
                }
                if (actualyear.Length > 0)
                {
                    query = query + " AND    actualyear = '" + actualyear + "' ";
                }
                if (actualmonth.Length > 0)
                {
                    query = query + " AND    actualmonth = '" + actualmonth + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    oMainMod.GetSetcomp = replaceNull(dataReader, "comp");
                    oMainMod.GetSetfinanceyear = replaceNull(dataReader, "financeyear");
                    oMainMod.GetSetfinancemonth = replaceNull(dataReader, "financemonth");
                    oMainMod.GetSetactualyear = replaceNull(dataReader, "actualyear");
                    oMainMod.GetSetactualmonth = replaceNull(dataReader, "actualmonth");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportYearMonth: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oMainMod;
    }

    public MainModel getReportFYRDetailsSummary(String comp, String fyr, String type, String tablename)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select comp, type, sum(MON01) sum_MON01, sum(MON02) sum_MON02, sum(MON03) sum_MON03, sum(MON04) sum_MON04, sum(MON05) sum_MON05, sum(MON06) sum_MON06, sum(MON07) sum_MON07, sum(MON08) sum_MON08, sum(MON09) sum_MON09, sum(MON10) sum_MON10, sum(MON11) sum_MON11, sum(MON12) sum_MON12, ";
                query = query + "        MON01desc, MON02desc, MON03desc, MON04desc, MON05desc, MON06desc, MON07desc, MON08desc, MON09desc, MON10desc, MON11desc, MON12desc, ";
                query = query + "        (sum(MON01) + sum(MON02) + sum(MON03) + sum(MON04) + sum(MON05) + sum(MON06) + sum(MON07) + sum(MON08) + sum(MON09) + sum(MON10) + sum(MON11) + sum(MON12)) sum_TODATE ";
                query = query + " from   " + tablename;
                query = query + " where  comp = '" + comp + "' ";
                if (fyr.Trim().Length > 0)
                {
                    query = query + " AND    fyr = '" + fyr + "' ";
                }
                query = query + " and  type = '" + type + "' ";
                query = query + " group by comp, type, MON01desc, MON02desc, MON03desc, MON04desc, MON05desc, MON06desc, MON07desc, MON08desc, MON09desc, MON10desc, MON11desc, MON12desc ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    oMainMod.GetSetcomp = replaceNull(dataReader, "comp");
                    oMainMod.GetSetfyr = fyr;
                    oMainMod.GetSettype = replaceNull(dataReader, "type");
                    oMainMod.GetSetMON01 = replaceDoubleZero(dataReader, "sum_MON01");
                    oMainMod.GetSetMON02 = replaceDoubleZero(dataReader, "sum_MON02");
                    oMainMod.GetSetMON03 = replaceDoubleZero(dataReader, "sum_MON03");
                    oMainMod.GetSetMON04 = replaceDoubleZero(dataReader, "sum_MON04");
                    oMainMod.GetSetMON05 = replaceDoubleZero(dataReader, "sum_MON05");
                    oMainMod.GetSetMON06 = replaceDoubleZero(dataReader, "sum_MON06");
                    oMainMod.GetSetMON07 = replaceDoubleZero(dataReader, "sum_MON07");
                    oMainMod.GetSetMON08 = replaceDoubleZero(dataReader, "sum_MON08");
                    oMainMod.GetSetMON09 = replaceDoubleZero(dataReader, "sum_MON09");
                    oMainMod.GetSetMON10 = replaceDoubleZero(dataReader, "sum_MON10");
                    oMainMod.GetSetMON11 = replaceDoubleZero(dataReader, "sum_MON11");
                    oMainMod.GetSetMON12 = replaceDoubleZero(dataReader, "sum_MON12");
                    oMainMod.GetSetMON01desc = replaceNull(dataReader, "MON01desc");
                    oMainMod.GetSetMON02desc = replaceNull(dataReader, "MON02desc");
                    oMainMod.GetSetMON03desc = replaceNull(dataReader, "MON03desc");
                    oMainMod.GetSetMON04desc = replaceNull(dataReader, "MON04desc");
                    oMainMod.GetSetMON05desc = replaceNull(dataReader, "MON05desc");
                    oMainMod.GetSetMON06desc = replaceNull(dataReader, "MON06desc");
                    oMainMod.GetSetMON07desc = replaceNull(dataReader, "MON07desc");
                    oMainMod.GetSetMON08desc = replaceNull(dataReader, "MON08desc");
                    oMainMod.GetSetMON09desc = replaceNull(dataReader, "MON09desc");
                    oMainMod.GetSetMON10desc = replaceNull(dataReader, "MON10desc");
                    oMainMod.GetSetMON11desc = replaceNull(dataReader, "MON11desc");
                    oMainMod.GetSetMON12desc = replaceNull(dataReader, "MON12desc");
                    oMainMod.GetSetTODATE = replaceDoubleZero(dataReader, "sum_TODATE");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportFYRDetailsSummary: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oMainMod;
    }

    public MainModel getReportFYRDetails(String comp, String fyr, String type, String tablename)
    {
        MainModel oMainMod = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select comp, fyr, type, MON01, MON02, MON03, MON04, MON05, MON06, MON07, MON08, MON09, MON10, MON11, MON12, ";
                query = query + "        MON01desc, MON02desc, MON03desc, MON04desc, MON05desc, MON06desc, MON07desc, MON08desc, MON09desc, MON10desc, MON11desc, MON12desc, ";
                query = query + "        (MON01 + MON02 + MON03 + MON04 + MON05 + MON06 + MON07 + MON08 + MON09 + MON10 + MON11 + MON12) TODATE ";
                query = query + " from   " + tablename;
                query = query + " where  comp = '" + comp + "' ";
                query = query + " AND    fyr = '" + fyr + "' ";
                query = query + " and  type = '" + type + "' ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    oMainMod.GetSetcomp = replaceNull(dataReader, "comp");
                    oMainMod.GetSetfyr = replaceNull(dataReader, "fyr");
                    oMainMod.GetSettype = replaceNull(dataReader, "type");
                    oMainMod.GetSetMON01 = replaceDoubleZero(dataReader, "MON01");
                    oMainMod.GetSetMON02 = replaceDoubleZero(dataReader, "MON02");
                    oMainMod.GetSetMON03 = replaceDoubleZero(dataReader, "MON03");
                    oMainMod.GetSetMON04 = replaceDoubleZero(dataReader, "MON04");
                    oMainMod.GetSetMON05 = replaceDoubleZero(dataReader, "MON05");
                    oMainMod.GetSetMON06 = replaceDoubleZero(dataReader, "MON06");
                    oMainMod.GetSetMON07 = replaceDoubleZero(dataReader, "MON07");
                    oMainMod.GetSetMON08 = replaceDoubleZero(dataReader, "MON08");
                    oMainMod.GetSetMON09 = replaceDoubleZero(dataReader, "MON09");
                    oMainMod.GetSetMON10 = replaceDoubleZero(dataReader, "MON10");
                    oMainMod.GetSetMON11 = replaceDoubleZero(dataReader, "MON11");
                    oMainMod.GetSetMON12 = replaceDoubleZero(dataReader, "MON12");
                    oMainMod.GetSetMON01desc = replaceNull(dataReader, "MON01desc");
                    oMainMod.GetSetMON02desc = replaceNull(dataReader, "MON02desc");
                    oMainMod.GetSetMON03desc = replaceNull(dataReader, "MON03desc");
                    oMainMod.GetSetMON04desc = replaceNull(dataReader, "MON04desc");
                    oMainMod.GetSetMON05desc = replaceNull(dataReader, "MON05desc");
                    oMainMod.GetSetMON06desc = replaceNull(dataReader, "MON06desc");
                    oMainMod.GetSetMON07desc = replaceNull(dataReader, "MON07desc");
                    oMainMod.GetSetMON08desc = replaceNull(dataReader, "MON08desc");
                    oMainMod.GetSetMON09desc = replaceNull(dataReader, "MON09desc");
                    oMainMod.GetSetMON10desc = replaceNull(dataReader, "MON10desc");
                    oMainMod.GetSetMON11desc = replaceNull(dataReader, "MON11desc");
                    oMainMod.GetSetMON12desc = replaceNull(dataReader, "MON12desc");
                    oMainMod.GetSetTODATE = replaceDoubleZero(dataReader, "TODATE");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportFYRDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oMainMod;
    }

    //get revenue actual
    /*
    public Double getReportRevenue(String comp, String actualyear, String actualmonth, String status)
    {
        Double dRevenueAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(invoice_header.totalamount) revenue ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + " and  (invoice_header.invoicecat = 'SALES_INVOICE' or invoice_header.invoicecat = 'TRANSFER_INVOICE' or (invoice_header.invoicecat = 'RECEIPT_VOUCHER' and invoice_header.invoicetype = 'OTHER_INCOME') or (invoice_header.invoicecat = 'JOURNAL_VOUCHER' and invoice_header.invoicetype = 'OTHER_INCOME')) ";
                //query = query + " AND    invoice_header.invoicetype in ('SALES_INVOICE','OTHER_INCOME') ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                //WriteToLogFile("MainController-getReportRevenue-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dRevenueAmount = replaceDoubleZero(dataReader, "revenue");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportRevenue: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dRevenueAmount;
    }
    */
    /*
    public Double getReportRevenue(String comp, String actualyear, String actualmonth, String status)
    {
        Double dRevenueAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList revenuecat = new ArrayList();
                revenuecat.Add("SALES_INVOICE");
                revenuecat.Add("RECEIPT_VOUCHER");
                ArrayList revenuetype = new ArrayList();
                revenuetype.Add("OTHER_INCOME");

                String additionalquery = " and  (invoice_header.invoicecat in ('RECEIPT_VOUCHER','JOURNAL_VOUCHER') ";
                String exptyp = "";
                for (int i = 0; i < revenuetype.Count; i++)
                {
                    String str = (String)revenuetype[i];
                    if (i.Equals(0))
                    {
                        exptyp = "'" + str + "'";
                    }
                    else
                    {
                        exptyp = exptyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  invoice_header.invoicetype in (" + exptyp + ")) ";

                query = "select sum(revenue) sum_revenue ";
                query = query + " from ( ";
                query = query + " SELECT SUM(invoice_header.totalamount) revenue ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalinvoice) revenue ";
                query = query + " from   invoice_details, invoice_header ";
                query = query + " where  invoice_details.comp = invoice_header.comp and invoice_details.invoiceno = invoice_header.invoiceno ";
                query = query + " and    invoice_header.invoicecat in ('SALES_INVOICE','TRANSFER_INVOICE') ";
                query = query + " and    invoice_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";

                //WriteToLogFile("MainController-getReportRevenue-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dRevenueAmount = replaceDoubleZero(dataReader, "sum_revenue");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportRevenue: " + e.Message.ToString());
        }
        return dRevenueAmount;
    }
    */

    public Double getReportRevenue(String comp, String actualyear, String actualmonth, String status)
    {
        Double dRevenueAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList revenuecat = new ArrayList();
                revenuecat.Add("SALES_INVOICE");
                revenuecat.Add("RECEIPT_VOUCHER");
                /*
                ArrayList revenuetype = new ArrayList();
                revenuetype.Add("SUPPLY_EXPENSES");
                revenuetype.Add("SALARIES_WAGES");
                revenuetype.Add("TRAVEL_EXPENSES");
                revenuetype.Add("ENTERTAINMENT_EXPENSES");
                revenuetype.Add("MARKETING_ADVERTISING");
                revenuetype.Add("RENTAL_LEASING");
                revenuetype.Add("REPAIR_MAINTENANCE");
                revenuetype.Add("DEPRECIATION_EXPENSES");
                revenuetype.Add("BAD_DEBT_EXPENSES");
                revenuetype.Add("SUBSCRIPTION_REGISTRATION");
                revenuetype.Add("INSURANCE_SECURITY");
                revenuetype.Add("PROFESSIONAL_STATUTORY");
                revenuetype.Add("BILL_UTILITIES");
                revenuetype.Add("TAXATION");
                revenuetype.Add("SELLING_SERVICES");
                revenuetype.Add("OTHER_INCOME");
                */
                ArrayList lsParamType = getParametertype("INCOME");
                ArrayList revenuetype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    revenuetype.Add(modParam.GetSetparamttype);
                }

                String additionalquery = " and  (invoice_header.invoicecat in ('RECEIPT_VOUCHER','JOURNAL_VOUCHER') ";
                String revtyp = "";
                for (int i = 0; i < revenuetype.Count; i++)
                {
                    String str = (String)revenuetype[i];
                    if (i.Equals(0))
                    {
                        revtyp = "'" + str + "'";
                    }
                    else
                    {
                        revtyp = revtyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  invoice_header.invoicetype in (" + revtyp + ")) ";

                query = "select sum(revenue) sum_revenue ";
                query = query + " from ( ";
                query = query + " SELECT SUM(invoice_header.totalamount) revenue ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalinvoice) revenue ";
                query = query + " from   invoice_details, invoice_header ";
                query = query + " where  invoice_details.comp = invoice_header.comp and invoice_details.invoiceno = invoice_header.invoiceno ";
                query = query + " and    invoice_header.invoicecat in ('SALES_INVOICE','TRANSFER_INVOICE') ";
                //query = query + " and    invoice_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";

                //WriteToLogFile("MainController-getReportRevenue-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dRevenueAmount = replaceDoubleZero(dataReader, "sum_revenue");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportRevenue: " + e.Message.ToString());
        }
        return dRevenueAmount;
    }


    //get revenue actual Exclude JV
    public Double getReportRevenueExcludeJV(String comp, String actualyear, String actualmonth, String status)
    {
        Double dRevenueAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                ArrayList lsParamType = getParametertype("INCOME");
                ArrayList revenuetype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    revenuetype.Add(modParam.GetSetparamttype);
                }

                String additionalquery = " and  (invoice_header.invoicecat in ('RECEIPT_VOUCHER') ";
                String revtyp = "";
                for (int i = 0; i < revenuetype.Count; i++)
                {
                    String str = (String)revenuetype[i];
                    if (i.Equals(0))
                    {
                        revtyp = "'" + str + "'";
                    }
                    else
                    {
                        revtyp = revtyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  invoice_header.invoicetype in (" + revtyp + ")) ";

                query = "select sum(revenue) sum_revenue ";
                query = query + " from ( ";
                query = query + " SELECT SUM(invoice_header.totalamount) revenue ";
                query = query + " from   invoice_header ";
                query = query + " WHERE  invoice_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalinvoice) revenue ";
                query = query + " from   invoice_details, invoice_header ";
                query = query + " where  invoice_details.comp = invoice_header.comp and invoice_details.invoiceno = invoice_header.invoiceno ";
                query = query + " and    invoice_header.invoicecat in ('SALES_INVOICE','TRANSFER_INVOICE') ";
                //query = query + " and    invoice_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  invoice_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";

                //WriteToLogFile("MainController-getReportRevenue-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dRevenueAmount = replaceDoubleZero(dataReader, "sum_revenue");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportRevenueExcludeJV: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dRevenueAmount;
    }

    //get expenses actual
    /*
    public Double getReportExpenses(String comp, String actualyear, String actualmonth, String status)
    {
        Double dExpensesAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList expensescat = new ArrayList();
                expensescat.Add("PURCHASE_INVOICE");
                expensescat.Add("PAYMENT_VOUCHER");
                ArrayList expensestype = new ArrayList();
                expensestype.Add("SUPPLY_EXPENSES");
                expensestype.Add("SALARIES_WAGES");
                expensestype.Add("TRAVEL_EXPENSES");
                expensestype.Add("ENTERTAINMENT_EXPENSES");
                expensestype.Add("MARKETING_ADVERTISING");
                expensestype.Add("RENTAL_LEASING");
                expensestype.Add("REPAIR_MAINTENANCE");
                expensestype.Add("DEPRECIATION_EXPENSES");
                expensestype.Add("BAD_DEBT_EXPENSES");
                expensestype.Add("SUBSCRIPTION_REGISTRATION");
                expensestype.Add("INSURANCE_SECURITY");
                expensestype.Add("PROFESSIONAL_STATUTORY");
                expensestype.Add("BILL_UTILITIES");
                expensestype.Add("TAXATION");
                expensestype.Add("SELLING_SERVICES");
                expensestype.Add("OTHER_EXPENSES");
                String additionalquery = " and  (expenses_header.expensescat in ('PAYMENT_VOUCHER','JOURNAL_VOUCHER') ";
                String exptyp = "";
                for (int i = 0; i < expensestype.Count; i++)
                {
                    String str = (String)expensestype[i];
                    if (i.Equals(0))
                    {
                        exptyp = "'" + str + "'";
                    }
                    else
                    {
                        exptyp = exptyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  expenses_header.expensestype in (" + exptyp + ")) ";

                query = "select sum(expenses) sum_expenses ";
                query = query + " from ( ";
                query = query + " SELECT SUM(expenses_header.totalamount) expenses ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalexpenses) expenses ";
                query = query + " from   expenses_details, expenses_header ";
                query = query + " where  expenses_details.comp = expenses_header.comp and expenses_details.expensesno = expenses_header.expensesno ";
                query = query + " and    expenses_header.expensescat in ('PURCHASE_INVOICE','TRANSFER_INVOICE') ";
                query = query + " and    expenses_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dExpensesAmount = replaceDoubleZero(dataReader, "sum_expenses");
                }               
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportExpenses: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dExpensesAmount;
    }
    */
    public Double getReportExpenses(String comp, String actualyear, String actualmonth, String status)
    {
        Double dExpensesAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList expensescat = new ArrayList();
                expensescat.Add("PURCHASE_INVOICE");
                expensescat.Add("PAYMENT_VOUCHER");

                /*
                ArrayList expensestype = new ArrayList();
                expensestype.Add("SUPPLY_EXPENSES");
                expensestype.Add("SALARIES_WAGES");
                expensestype.Add("TRAVEL_EXPENSES");
                expensestype.Add("ENTERTAINMENT_EXPENSES");
                expensestype.Add("MARKETING_ADVERTISING");
                expensestype.Add("RENTAL_LEASING");
                expensestype.Add("REPAIR_MAINTENANCE");
                expensestype.Add("DEPRECIATION_EXPENSES");
                expensestype.Add("BAD_DEBT_EXPENSES");
                expensestype.Add("SUBSCRIPTION_REGISTRATION");
                expensestype.Add("INSURANCE_SECURITY");
                expensestype.Add("PROFESSIONAL_STATUTORY");
                expensestype.Add("BILL_UTILITIES");
                expensestype.Add("TAXATION");
                expensestype.Add("SELLING_SERVICES");
                expensestype.Add("OTHER_EXPENSES");
                */
                ArrayList lsParamType = getParametertype("EXPENSES");
                ArrayList expensestype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    expensestype.Add(modParam.GetSetparamttype);
                }

                String additionalquery = " and  (expenses_header.expensescat in ('PAYMENT_VOUCHER','JOURNAL_VOUCHER') ";
                String exptyp = "";
                for (int i = 0; i < expensestype.Count; i++)
                {
                    String str = (String)expensestype[i];
                    if (i.Equals(0))
                    {
                        exptyp = "'" + str + "'";
                    }
                    else
                    {
                        exptyp = exptyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  expenses_header.expensestype in (" + exptyp + ")) ";

                query = "select sum(expenses) sum_expenses ";
                query = query + " from ( ";
                query = query + " SELECT SUM(expenses_header.totalamount) expenses ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalexpenses) expenses ";
                query = query + " from   expenses_details, expenses_header ";
                query = query + " where  expenses_details.comp = expenses_header.comp and expenses_details.expensesno = expenses_header.expensesno ";
                query = query + " and    expenses_header.expensescat in ('PURCHASE_INVOICE','TRANSFER_INVOICE') ";
                query = query + " and    expenses_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dExpensesAmount = replaceDoubleZero(dataReader, "sum_expenses");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportExpenses: " + e.Message.ToString());
        }
        return dExpensesAmount;
    }

    //get expenses actual Exclude JV
    public Double getReportExpensesExcludeJV(String comp, String actualyear, String actualmonth, String status)
    {
        Double dExpensesAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {

                ArrayList lsParamType = getParametertype("EXPENSES");
                ArrayList expensestype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    expensestype.Add(modParam.GetSetparamttype);
                }

                String additionalquery = " and  (expenses_header.expensescat in ('PAYMENT_VOUCHER') ";
                String exptyp = "";
                for (int i = 0; i < expensestype.Count; i++)
                {
                    String str = (String)expensestype[i];
                    if (i.Equals(0))
                    {
                        exptyp = "'" + str + "'";
                    }
                    else
                    {
                        exptyp = exptyp + ",'" + str + "'";
                    }
                }
                additionalquery = additionalquery + " and  expenses_header.expensestype in (" + exptyp + ")) ";

                query = "select sum(expenses) sum_expenses ";
                query = query + " from ( ";
                query = query + " SELECT SUM(expenses_header.totalamount) expenses ";
                query = query + " from   expenses_header ";
                query = query + " WHERE  expenses_header.comp is not NULL ";
                query = query + additionalquery;
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " union ";
                query = query + " select sum(totalexpenses) expenses ";
                query = query + " from   expenses_details, expenses_header ";
                query = query + " where  expenses_details.comp = expenses_header.comp and expenses_details.expensesno = expenses_header.expensesno ";
                query = query + " and    expenses_header.expensescat in ('PURCHASE_INVOICE','TRANSFER_INVOICE') ";
                query = query + " and    expenses_details.itemno in (SELECT itemno FROM item where comp='" + comp + "' and itemcat not in ('INVENTORY','ASSET')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  expenses_header.status = '" + status + "' ";
                }
                query = query + " ) as listing ";
                
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dExpensesAmount = replaceDoubleZero(dataReader, "sum_expenses");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportExpensesExcludeJV: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dExpensesAmount;
    }

    //get collection actual
    public Double getReportCollection(String comp, String actualyear, String actualmonth, String status)
    {
        Double dCollectionAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(payrcpt_details.payrcptprice) collection ";
                query = query + " from   payrcpt_header, payrcpt_details, invoice_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp = payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno = payrcpt_details.payrcptno ";
                query = query + " AND    payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND    payrcpt_details.invoiceno = invoice_header.invoiceno ";
                query = query + " and  (invoice_header.invoicecat = 'SALES_INVOICE' or invoice_header.invoicecat = 'TRANSFER_INVOICE' or (invoice_header.invoicecat = 'RECEIPT_VOUCHER' and invoice_header.invoicetype = 'OTHER_INCOME')) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(payrcpt_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(payrcpt_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                //WriteToLogFile("MainController-getReportCollection-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dCollectionAmount = replaceDoubleZero(dataReader, "collection");
                }               
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportCollection: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dCollectionAmount;
    }

    //get collection actual
    public Double getReportCollectionBasedOnInvoice(String comp, String actualyear, String actualmonth, String status)
    {
        Double dCollectionAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                ArrayList lsParamType = getParametertype("INCOME");
                ArrayList revenuetype = new ArrayList();
                for (int i = 0; i < lsParamType.Count; i++)
                {
                    MainModel modParam = (MainModel)lsParamType[i];
                    revenuetype.Add(modParam.GetSetparamttype);
                }
                String revtyp = "";
                for (int i = 0; i < revenuetype.Count; i++)
                {
                    String str = (String)revenuetype[i];
                    if (i.Equals(0))
                    {
                        revtyp = "'" + str + "'";
                    }
                    else
                    {
                        revtyp = revtyp + ",'" + str + "'";
                    }
                }

                query = "";
                query = query + " SELECT SUM(payrcpt_details.payrcptprice) collection ";
                query = query + " from   payrcpt_header, payrcpt_details, invoice_header ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp = payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno = payrcpt_details.payrcptno ";
                query = query + " AND    payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND    payrcpt_details.invoiceno = invoice_header.invoiceno ";
                query = query + " and  (invoice_header.invoicecat in ('SALES_INVOICE','TRANSFER_INVOICE') or (invoice_header.invoicecat = 'RECEIPT_VOUCHER' and invoice_header.invoicetype in (" + revtyp + "))) ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length == 0)
                {
                    query = query + " and  date_format(invoice_header.confirmeddate,'%Y') = '" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                //WriteToLogFile("MainController-getReportCollection-SQL: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dCollectionAmount = replaceDoubleZero(dataReader, "collection");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportCollectionBasedOnInvoice: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dCollectionAmount;
    }

    //get payment receipt actual
    public Double getReportPaymentReceipt(String comp, String actualyear, String actualmonth, String paytype, String status)
    {
        Double dPaymentReceipt = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(payrcpt_details.payrcptprice) paymentreceipt ";
                query = query + " from   payrcpt_header, payrcpt_details ";
                query = query + " WHERE  payrcpt_header.comp is not NULL ";
                query = query + " AND    payrcpt_header.comp = payrcpt_details.comp ";
                query = query + " AND    payrcpt_header.payrcptno = payrcpt_details.payrcptno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (paytype.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_details.paytype = '" + paytype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  payrcpt_header.status = '" + status + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dPaymentReceipt = replaceDoubleZero(dataReader, "paymentreceipt");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportPaymentReceipt: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dPaymentReceipt;
    }

    //get payment paid actual
    public Double getReportPaymentPaid(String comp, String actualyear, String actualmonth, String paytype, String status)
    {
        Double dPaymentPaid = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(paypaid_details.paypaidprice) paymentpaid ";
                query = query + " from   paypaid_header, paypaid_details ";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp = paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno = paypaid_details.paypaidno ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(confirmeddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (paytype.Trim().Length > 0)
                {
                    query = query + " and  paypaid_details.paytype = '" + paytype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  paypaid_header.status = '" + status + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dPaymentPaid = replaceDoubleZero(dataReader, "paymentpaid");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportPaymentPaid: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dPaymentPaid;
    }

    //get sales actual
    public Double getReportSales(String comp, String actualyear, String actualmonth, String status)
    {
        Double dSalesAmount = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(order_header.totalamount) sales ";
                query = query + " from   order_header ";
                query = query + " WHERE  order_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(orderapproveddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dSalesAmount = replaceDoubleZero(dataReader, "sales");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportSales: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dSalesAmount;
    }

    //get Slot actual
    public Double getReportSlot(String comp, String actualyear, String actualmonth, String status)
    {
        Double dSlotAllocated = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT SUM(order_header.totalamount) sales ";
                query = query + " from   order_header ";
                query = query + " WHERE  order_header.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  order_header.comp = '" + comp + "' ";
                }
                if (actualyear.Trim().Length > 0 && actualmonth.Trim().Length > 0)
                {
                    query = query + " and  date_format(orderapproveddate,'%m-%Y') = '" + actualmonth + "-" + actualyear + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " and  order_header.orderstatus = '" + status + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    dSlotAllocated = replaceDoubleZero(dataReader, "sales");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getReportSlot: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return dSlotAllocated;
    }

    public int updateReportFYRDetails(String comp, String fyr, String type, String tablename, String month, Double reportvalue)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE " + tablename;
                query = query + " SET " + month + " = " + reportvalue;
                //query = query + " SET   MON01 = ?MON01, MON01desc = ?MON01desc, MON02 = ?MON02, MON02desc = ?MON02desc, MON03 = ?MON03, MON03desc = ?MON03desc, MON04 = ?MON04, MON04desc = ?MON04desc, MON05 = ?MON05, MON05desc = ?MON05desc, MON06 = ?MON06, MON06desc = ?MON06desc, MON07 = ?MON07, MON07desc = ?MON07desc, MON08 = ?MON08, MON08desc = ?MON08desc, MON09 = ?MON09, MON09desc = ?MON09desc, MON10 = ?MON10, MON10desc = ?MON10desc, MON11 = ?MON11, MON11desc = ?MON11desc, MON12 = ?MON12, MON12desc = ?MON12desc, status = ?status ";
                query = query + " WHERE comp = ?comp  AND fyr = ?fyr AND type = ?type ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?fyr", MySqlDbType.VarChar).Value = fyr;
                cmd.Parameters.Add("?type", MySqlDbType.VarChar).Value = type;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateReportFYRDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    #endregion/*** END FOR GENERAL ***/

    /*** BEGIN FOR PARAMETERS ***/

    public ArrayList getParamList(String comp, String paramid, String paramtype, String paramcode)
    {
        ArrayList lsParamMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                query = query + "        parameters.createdby, parameters.createddate ";
                query = query + " FROM   parameters ";
                query = query + " WHERE  parameters.comp = '" + comp + "' ";
                if (paramid.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramid = '" + paramid + "' ";
                }
                if (paramtype.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramtype = '" + paramtype + "' ";
                }
                if (paramcode.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramcode = '" + paramcode + "' ";
                }
                query = query + " ORDER  BY parameters.paramcode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modParam = new MainModel();
                    modParam.GetSetcomp = replaceNull(dataReader, "comp");
                    modParam.GetSetparamid = replaceNull(dataReader, "paramid");
                    modParam.GetSetparamtype = replaceNull(dataReader, "paramtype");
                    modParam.GetSetparamcode = replaceNull(dataReader, "paramcode");
                    modParam.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                    modParam.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                    lsParamMod.Add(modParam);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getParamList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsParamMod;
    }

    public MainModel getParamDetails(String comp, String paramid, String paramtype, String paramcode)
    {
        MainModel modParam = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT parameters.comp, parameters.paramid, parameters.paramtype, parameters.paramcode, parameters.paramdesc, parameters.paramstatus, ";
                query = query + "        parameters.createdby, parameters.createddate ";
                query = query + " FROM   parameters ";
                query = query + " WHERE  parameters.comp = '" + comp + "' ";
                if (paramid.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramid = '" + paramid + "' ";
                }
                if (paramtype.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramtype = '" + paramtype + "' ";
                }
                if (paramcode.Trim().Length > 0)
                {
                    query = query + " AND    parameters.paramcode = '" + paramcode + "' ";
                }
                query = query + " ORDER  BY parameters.paramcode ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modParam.GetSetcomp = replaceNull(dataReader, "comp");
                    modParam.GetSetparamid = replaceNull(dataReader, "paramid");
                    modParam.GetSetparamtype = replaceNull(dataReader, "paramtype");
                    modParam.GetSetparamcode = replaceNull(dataReader, "paramcode");
                    modParam.GetSetparamdesc = replaceNull(dataReader, "paramdesc");
                    modParam.GetSetparamstatus = replaceNull(dataReader, "paramstatus");

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getParamList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return modParam;
    }

    /*** END FOR PARAMETERS ***/
    #region/*** BEGIN FOR USER PROFILES ***/
    //for user profile
    public ArrayList getUserProfileList(String sComp, String sUserId, String sUserPwd, String sUserType)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM userprofile ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  comp = '000' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  userid = '" + sUserId.Trim() + "' ";
                }
                if (sUserPwd.Trim().Length > 0)
                {
                    query = query + " and  userpwd = '" + sUserPwd.Trim() + "' ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  usertype = '" + sUserType.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    UserProfileModel oModUserProfile = new UserProfileModel();
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    lsArrayList.Add(oModUserProfile);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserProfileList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    public ArrayList getUserProfileList(String sComp, String sUserId, String sUserPwd, String sUserType, String sCreatedBy)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM userprofile ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  userid = '" + sUserId.Trim() + "' ";
                }
                if (sUserPwd.Trim().Length > 0)
                {
                    query = query + " and  userpwd = '" + sUserPwd.Trim() + "' ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  usertype = '" + sUserType.Trim() + "' ";
                }
                if (sCreatedBy.Trim().Length > 0)
                {
                    query = query + " and  createdby = '" + sCreatedBy.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    UserProfileModel oModUserProfile = new UserProfileModel();
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuseradd = replaceNull(dataReader, "useradd");
                    oModUserProfile.GetSetusertelno = replaceNull(dataReader, "usertelno");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                    lsArrayList.Add(oModUserProfile);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserProfileList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    //for user profile
    public ArrayList searchUserProfileList(String sComp, String sSearchUser, String sUserType)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM userprofile ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  comp = '000' ";
                }
                if (sSearchUser.Trim().Length > 0)
                {
                    query = query + " and  (userid like '%" + sSearchUser.Trim() + "%' or username like '%" + sSearchUser.Trim() + "%') ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  usertype = '" + sUserType.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    UserProfileModel oModUserProfile = new UserProfileModel();
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                    lsArrayList.Add(oModUserProfile);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-searchUserProfileList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    public UserProfileModel getUserProfile(String sComp, String sUserId, String sUserPwd, String sUserType)
    {
        UserProfileModel oModUserProfile = new UserProfileModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM userprofile ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  userid = '" + sUserId.Trim() + "' ";
                }
                if (sUserPwd.Trim().Length > 0)
                {
                    query = query + " and  userpwd = '" + sUserPwd.Trim() + "' ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  usertype = '" + sUserType.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuseradd = replaceNull(dataReader, "useradd");
                    oModUserProfile.GetSetusertelno = replaceNull(dataReader, "usertelno");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserProfile: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModUserProfile;
    }

    public UserProfileModel getUserProfile2(String sComp, String sUserId, String sUserPwd, String sUserType)
    {
        UserProfileModel oModUserProfile = new UserProfileModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.screenid, a.userid, a.username, a.useradd, a.usertelno, a.userpwd, a.usertype, a.userstatus, b.roleid FROM userprofile a, user_role b ";
                query = query + " WHERE  a.comp is not NULL ";
                query = query + " AND    a.comp = b.comp AND a.userid = b.userid ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + sComp + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  a.userid = '" + sUserId.Trim() + "' ";
                }
                if (sUserPwd.Trim().Length > 0)
                {
                    query = query + " and  a.userpwd = '" + sUserPwd.Trim() + "' ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  a.usertype = '" + sUserType.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuseradd = replaceNull(dataReader, "useradd");
                    oModUserProfile.GetSetusertelno = replaceNull(dataReader, "usertelno");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserroleid = replaceNull(dataReader, "roleid");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserProfile: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModUserProfile;
    }

    public UserProfileModel getUserProfile3(String sComp, String sUserId, String sUserPwd, String sUserType)
    {
        UserProfileModel oModUserProfile = new UserProfileModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM userprofile ";
                query = query + " WHERE  userid is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  EXISTS (select * from user_role where comp = '" + sComp + "' and userid = '" + sUserId.Trim() + "') ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  userid = '" + sUserId.Trim() + "' ";
                }
                if (sUserPwd.Trim().Length > 0)
                {
                    query = query + " and  userpwd = '" + sUserPwd.Trim() + "' ";
                }
                if (sUserType.Trim().Length > 0)
                {
                    query = query + " and  usertype = '" + sUserType.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    if (sComp.Trim().Length > 0)
                        oModUserProfile.GetSetcomp = sComp;
                    else
                        oModUserProfile.GetSetcomp = replaceNull(dataReader, "comp");
                    oModUserProfile.GetSetscreenid = replaceNull(dataReader, "screenid");
                    oModUserProfile.GetSetuserid = replaceNull(dataReader, "userid");
                    oModUserProfile.GetSetusername = replaceNull(dataReader, "username");
                    oModUserProfile.GetSetuseradd = replaceNull(dataReader, "useradd");
                    oModUserProfile.GetSetusertelno = replaceNull(dataReader, "usertelno");
                    oModUserProfile.GetSetuserpwd = replaceNull(dataReader, "userpwd");
                    oModUserProfile.GetSetusertype = replaceNull(dataReader, "usertype");
                    oModUserProfile.GetSetuserstatus = replaceNull(dataReader, "userstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getUserProfile: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModUserProfile;
    }

    public int insertUserDetails(String comp, String userid, String userpwd, String username, String usertype, String userstatus)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO userprofile(comp, userid, userpwd, username, usertype, userstatus) ";
                query = query + " VALUES(?comp, ?userid, ?userpwd, ?username, ?usertype, ?userstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                cmd.Parameters.Add("?userpwd", MySqlDbType.VarChar).Value = userpwd;
                cmd.Parameters.Add("?username", MySqlDbType.VarChar).Value = username;
                cmd.Parameters.Add("?usertype", MySqlDbType.VarChar).Value = usertype;
                cmd.Parameters.Add("?userstatus", MySqlDbType.VarChar).Value = userstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertUserDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int createUser(String comp, String userid, String userpwd, String username, String useradd, String usertelno, String usertype, String userstatus, String screenid, String roleid, String createdby)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        SELECT createuser(?comp, ?userid, ?userpwd, ?username, ?useradd, ?usertelno, ?usertype, ?userstatus, ?screenid, ?roleid, ?createdby) result;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                cmd.Parameters.Add("?userpwd", MySqlDbType.VarChar).Value = userpwd;
                cmd.Parameters.Add("?username", MySqlDbType.VarChar).Value = username;
                cmd.Parameters.Add("?useradd", MySqlDbType.VarChar).Value = useradd;
                cmd.Parameters.Add("?usertelno", MySqlDbType.VarChar).Value = usertelno;
                cmd.Parameters.Add("?usertype", MySqlDbType.VarChar).Value = usertype;
                cmd.Parameters.Add("?userstatus", MySqlDbType.VarChar).Value = userstatus;
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = screenid;
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = createdby;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-createUser: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int updateUserDetails(String comp, String usercomp, String userid, String userpwd, String username, String useradd, String usertelno, String usertype, String userstatus, String screenid)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE userprofile ";
                query = query + " SET comp = ?usercomp, userpwd = ?userpwd, ";
                query = query + "     username = ?username, ";
                query = query + "     useradd = ?useradd, ";
                query = query + "     usertelno = ?usertelno, ";
                query = query + "     usertype = ?usertype, ";
                query = query + "     userstatus = ?userstatus, ";
                query = query + "     screenid = ?screenid ";
                query = query + " WHERE comp = ?comp ";
                query = query + " AND userid = ?userid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?usercomp", MySqlDbType.VarChar).Value = usercomp;
                cmd.Parameters.Add("?userpwd", MySqlDbType.VarChar).Value = userpwd;
                cmd.Parameters.Add("?username", MySqlDbType.VarChar).Value = username;
                cmd.Parameters.Add("?useradd", MySqlDbType.VarChar).Value = useradd;
                cmd.Parameters.Add("?usertelno", MySqlDbType.VarChar).Value = usertelno;
                cmd.Parameters.Add("?usertype", MySqlDbType.VarChar).Value = usertype;
                cmd.Parameters.Add("?userstatus", MySqlDbType.VarChar).Value = userstatus;
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = screenid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateUserDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    public int updateUserDetails(String comp, String usercomp, String userid, String userpwd, String username, String useradd, String usertelno, String usertype, String userstatus, String screenid, String roleid)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        String query_role = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE userprofile ";
                query = query + " SET comp = ?usercomp, userpwd = ?userpwd, ";
                query = query + "     username = ?username, ";
                query = query + "     useradd = ?useradd, ";
                query = query + "     usertelno = ?usertelno, ";
                query = query + "     usertype = ?usertype, ";
                query = query + "     userstatus = ?userstatus, ";
                query = query + "     screenid = ?screenid ";
                query = query + " WHERE userid is not null ";
                query = query + " AND userid = ?userid ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?usercomp", MySqlDbType.VarChar).Value = usercomp;
                cmd.Parameters.Add("?userpwd", MySqlDbType.VarChar).Value = userpwd;
                cmd.Parameters.Add("?username", MySqlDbType.VarChar).Value = username;
                cmd.Parameters.Add("?useradd", MySqlDbType.VarChar).Value = useradd;
                cmd.Parameters.Add("?usertelno", MySqlDbType.VarChar).Value = usertelno;
                cmd.Parameters.Add("?usertype", MySqlDbType.VarChar).Value = usertype;
                cmd.Parameters.Add("?userstatus", MySqlDbType.VarChar).Value = userstatus;
                cmd.Parameters.Add("?screenid", MySqlDbType.VarChar).Value = screenid;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                cmd.ExecuteNonQuery();

                if (roleid.Trim().Length > 0)
                {
                    query_role = "";
                    query_role = query_role + " UPDATE user_role ";
                    query_role = query_role + " SET roleid = ?roleid ";
                    query_role = query_role + " WHERE comp = ?comp ";
                    query_role = query_role + " AND userid = ?userid ";
                    MySqlCommand cmd_role = new MySqlCommand(query_role, dbConnect.connection);
                    cmd_role.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                    cmd_role.Parameters.Add("?comp", MySqlDbType.VarChar).Value = usercomp;
                    cmd_role.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                    cmd_role.ExecuteNonQuery();
                }
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateUserDetails: " + e.Message.ToString());
        }
        return success;
    }

    public int insertUserRole(String comp, String userid, String roleid)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        SELECT insertuser(?comp, ?userid, ?roleid) result;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?userid", MySqlDbType.VarChar).Value = userid;
                cmd.Parameters.Add("?roleid", MySqlDbType.VarChar).Value = roleid;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                dataReader.Close();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertUserRole: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return success;
    }

    #endregion/*** END FOR USER PROFILES ***/
    /*** BEGIN FOR COUNTER ***/
    #region 
    public ArrayList getCounterMasterList(String sComp, String sStatus)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM counter_master ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  comp = '000' ";
                }
                if (sStatus.Trim().Length > 0)
                {
                    query = query + " and  status = '" + sStatus.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    CounterModel oModCounter = new CounterModel();
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetcountertranid = replaceNull(dataReader, "countertranid");
                    oModCounter.GetSetopeningbalance = replaceDoubleZero(dataReader, "openingbalance");
                    oModCounter.GetSetopeningby = replaceNull(dataReader, "openingby");
                    oModCounter.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    oModCounter.GetSetpos_bpid = replaceNull(dataReader, "pos_bpid");
                    oModCounter.GetSetpos_bpdesc = replaceNull(dataReader, "pos_bpdesc");
                    oModCounter.GetSetpos_ordercat = replaceNull(dataReader, "pos_ordercat");
                    oModCounter.GetSetpos_ordertype = replaceNull(dataReader, "pos_ordertype");
                    oModCounter.GetSetpos_orderactivity = replaceNull(dataReader, "pos_orderactivity");
                    oModCounter.GetSetpos_paytype = replaceNull(dataReader, "pos_paytype");
                    oModCounter.GetSetstatus = replaceNull(dataReader, "status");
                    oModCounter.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    oModCounter.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsArrayList.Add(oModCounter);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterMasterList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    public CounterModel getCounterMasterDetails(String sComp, String sStatus, String sCounterNo, String sCounterTranid)
    {
        CounterModel oModCounter = new CounterModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT * FROM counter_master ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  comp = '000' ";
                }
                if (sStatus.Trim().Length > 0)
                {
                    query = query + " and  status = '" + sStatus.Trim() + "' ";
                }
                if (sCounterNo.Trim().Length > 0)
                {
                    query = query + " and  counterno = '" + sCounterNo.Trim() + "' ";
                }
                if (sCounterTranid.Trim().Length > 0)
                {
                    query = query + " and  countertranid = '" + sCounterTranid.Trim() + "' ";
                }
                //WriteToLogFile("MainController-getCounterMasterDetails: [SQL] " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetcountertranid = replaceNull(dataReader, "countertranid");
                    oModCounter.GetSetopeningbalance = replaceDoubleZero(dataReader, "openingbalance");
                    oModCounter.GetSetopeningby = replaceNull(dataReader, "openingby");
                    oModCounter.GetSetopeningdate = replaceNull(dataReader, "openingdate");
                    oModCounter.GetSetpos_bpid = replaceNull(dataReader, "pos_bpid");
                    oModCounter.GetSetpos_bpdesc = replaceNull(dataReader, "pos_bpdesc");
                    oModCounter.GetSetpos_ordercat = replaceNull(dataReader, "pos_ordercat");
                    oModCounter.GetSetpos_ordertype = replaceNull(dataReader, "pos_ordertype");
                    oModCounter.GetSetpos_orderactivity = replaceNull(dataReader, "pos_orderactivity");
                    oModCounter.GetSetpos_paytype = replaceNull(dataReader, "pos_paytype");
                    oModCounter.GetSetstatus = replaceNull(dataReader, "status");
                    oModCounter.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    oModCounter.GetSetcreateddate = replaceNull(dataReader, "createddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterMasterDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModCounter;
    }

    public String insertCounterMaster(CounterModel oModCounterMaster)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO counter_master (comp, counterno, countertranid, openingbalance, openingby, openingdate, pos_bpid, pos_bpdesc, pos_ordercat, pos_ordertype, pos_orderactivity, pos_paytype, status, createdby, createddate) ";
                query = query + " VALUES (?comp, ?counterno, ?countertranid, ?openingbalance, ?openingby, ?openingdate, ?pos_bpid, ?pos_bpdesc, ?pos_ordercat, ?pos_ordertype, ?pos_orderactivity, ?pos_paytype, ?status, ?createdby, createddate) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcounterno;
                cmd.Parameters.Add("?countertranid", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcountertranid;
                cmd.Parameters.Add("?openingbalance", MySqlDbType.Double).Value = oModCounterMaster.GetSetopeningbalance;
                cmd.Parameters.Add("?openingby", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetopeningby;
                if (oModCounterMaster.GetSetopeningby.Length > 0)
                {
                    if (oModCounterMaster.GetSetopeningdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterMaster.GetSetopeningdate, ukDtfi);
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?pos_bpid", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_bpid;
                cmd.Parameters.Add("?pos_bpdesc", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_bpdesc;
                cmd.Parameters.Add("?pos_ordercat", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_ordercat;
                cmd.Parameters.Add("?pos_ordertype", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_ordertype;
                cmd.Parameters.Add("?pos_orderactivity", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_orderactivity;
                cmd.Parameters.Add("?pos_paytype", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_paytype;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcreatedby;
                if (oModCounterMaster.GetSetcreatedby.Length > 0)
                {
                    if (oModCounterMaster.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterMaster.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertCounterMaster: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateCounterMaster(CounterModel oModCounterMaster)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE counter_master ";
                query = query + " SET    countertranid = ?countertranid, openingbalance = ?openingbalance, openingby = ?openingby, openingdate = ?openingdate, pos_bpid = ?pos_bpid, pos_bpdesc = ?pos_bpdesc, pos_ordercat = ?pos_ordercat, pos_ordertype = ?pos_ordertype, ";
                query = query + "        pos_orderactivity = ?pos_orderactivity, pos_paytype = ?pos_paytype, status = ?status, createdby = ?createdby, createddate = ?createddate ";
                query = query + " WHERE  comp = ?comp AND counterno = ?counterno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcounterno;
                cmd.Parameters.Add("?countertranid", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcountertranid;
                cmd.Parameters.Add("?openingbalance", MySqlDbType.Double).Value = oModCounterMaster.GetSetopeningbalance;
                cmd.Parameters.Add("?openingby", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetopeningby;
                if (oModCounterMaster.GetSetopeningby.Length > 0)
                {
                    if (oModCounterMaster.GetSetopeningdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterMaster.GetSetopeningdate, ukDtfi);
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?pos_bpid", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_bpid;
                cmd.Parameters.Add("?pos_bpdesc", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_bpdesc;
                cmd.Parameters.Add("?pos_ordercat", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_ordercat;
                cmd.Parameters.Add("?pos_ordertype", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_ordertype;
                cmd.Parameters.Add("?pos_orderactivity", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_orderactivity;
                cmd.Parameters.Add("?pos_paytype", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetpos_paytype;
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetstatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = oModCounterMaster.GetSetcreatedby;
                if (oModCounterMaster.GetSetcreatedby.Length > 0)
                {
                    if (oModCounterMaster.GetSetcreateddate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterMaster.GetSetcreateddate);
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?createddate", MySqlDbType.DateTime).Value = null;
                }
                WriteToLogFile("MainController-updateCounterMaster: [SQL] " + query);
                WriteToLogFile("MainController-updateCounterMaster: [oModCounterMaster.GetSetcomp] " + oModCounterMaster.GetSetcomp);
                WriteToLogFile("MainController-updateCounterMaster: [oModCounterMaster.GetSetcounterno] " + oModCounterMaster.GetSetcounterno);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateCounterMaster: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getCounterTransList(String sComp, String sCounterNo, String sId, String sUserId, String sStatus)
    {
        ArrayList lsArrayList = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.id, a.comp, a.counterno, a.openingbalance, a.openingby, d.pos_bpid, d.pos_bpdesc, d.pos_ordercat, d.pos_ordertype, d.pos_orderactivity, d.pos_paytype, ";
                //query = query + "        (select b.username from userprofile b where b.comp = a.comp and b.userid = a.openingby) openingbyname, ";
                query = query + "        (select b.username from userprofile b where b.userid = a.openingby) openingbyname, ";
                query = query + "        date_format(a.openingdate,'%d-%m-%Y %H:%i:%s') str_openingdate, a.totalorderamount, a.totalinvoiceamount, a.totalpayrcptamount, a.closingbalance, a.closingby, ";
                //query = query + "        (select c.username from userprofile c where c.comp = a.comp and c.userid = a.closingby) closingbyname, ";
                query = query + "        (select c.username from userprofile c where c.userid = a.closingby) closingbyname, ";
                query = query + "        date_format(a.closingdate,'%d-%m-%Y %H:%i:%s') str_closingdate, a.status ";
                query = query + " FROM   counter_transaction a left join counter_master d on a.comp = d.comp AND    a.counterno = d.counterno AND    a.id = d.countertranid ";
                query = query + " WHERE  a.comp is not NULL ";
                //query = query + " AND    a.comp = d.comp ";
                //query = query + " AND    a.counterno = d.counterno ";
                //query = query + " AND    a.id = d.countertranid ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  a.comp = '000' ";
                }
                if (sCounterNo.Trim().Length > 0)
                {
                    query = query + " and  a.counterno = '" + sCounterNo.Trim() + "' ";
                }
                if (sId.Trim().Length > 0)
                {
                    query = query + " and  a.id = '" + sId.Trim() + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  a.openingby = '" + sUserId.Trim() + "' ";
                }
                if (sStatus.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + sStatus.Trim() + "' ";
                }
                query = query + " order by  a.comp, a.status desc, a.openingdate desc, a.closingdate ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                int rowno = 0;
                while (dataReader.Read())
                {
                    CounterModel oModCounter = new CounterModel();
                    rowno = rowno + 1;
                    oModCounter.GetSetrowno = rowno;
                    oModCounter.GetSetid = replaceNull(dataReader, "id");
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetopeningbalance = replaceDoubleZero(dataReader, "openingbalance");
                    oModCounter.GetSetopeningby = replaceNull(dataReader, "openingby");
                    oModCounter.GetSetopeningbyname = replaceNull(dataReader, "openingbyname");
                    oModCounter.GetSetpos_bpid = replaceNull(dataReader, "pos_bpid");
                    oModCounter.GetSetpos_bpdesc = replaceNull(dataReader, "pos_bpdesc");
                    oModCounter.GetSetpos_ordercat = replaceNull(dataReader, "pos_ordercat");
                    oModCounter.GetSetpos_ordertype = replaceNull(dataReader, "pos_ordertype");
                    oModCounter.GetSetpos_orderactivity = replaceNull(dataReader, "pos_orderactivity");
                    oModCounter.GetSetpos_paytype = replaceNull(dataReader, "pos_paytype");
                    oModCounter.GetSetopeningdate = replaceNull(dataReader, "str_openingdate");
                    oModCounter.GetSettotalorderamount = replaceDoubleZero(dataReader, "totalorderamount");
                    oModCounter.GetSettotalinvoiceamount = replaceDoubleZero(dataReader, "totalinvoiceamount");
                    oModCounter.GetSettotalpayrcptamount = replaceDoubleZero(dataReader, "totalpayrcptamount");
                    oModCounter.GetSetclosingbalance = replaceDoubleZero(dataReader, "closingbalance");
                    oModCounter.GetSetclosingby = replaceNull(dataReader, "closingby");
                    oModCounter.GetSetclosingbyname = replaceNull(dataReader, "closingbyname");
                    oModCounter.GetSetclosingdate = replaceNull(dataReader, "str_closingdate");
                    oModCounter.GetSetstatus = replaceNull(dataReader, "status");
                    lsArrayList.Add(oModCounter);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterTransList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsArrayList;
    }

    public CounterModel getCounterTrans(String sComp, String sCounterNo, String sId, String sUserId, String sStatus)
    {
        CounterModel oModCounter = new CounterModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.id, a.comp, a.counterno, a.openingbalance, a.openingby, d.pos_bpid, d.pos_bpdesc, d.pos_ordercat, d.pos_ordertype, d.pos_orderactivity, d.pos_paytype, ";
                //query = query + "        (select b.username from userprofile b where b.comp = a.comp and b.userid = a.openingby) openingbyname, ";
                query = query + "        (select b.username from userprofile b where b.userid = a.openingby) openingbyname, ";
                query = query + "        date_format(a.openingdate,'%d-%m-%Y %H:%i:%s') str_openingdate, a.totalorderamount, a.totalinvoiceamount, a.totalpayrcptamount, a.closingbalance, a.closingby, ";
                //query = query + "        (select c.username from userprofile c where c.comp = a.comp and c.userid = a.closingby) closingbyname, ";
                query = query + "        (select c.username from userprofile c where c.userid = a.closingby) closingbyname, ";
                query = query + "        date_format(a.closingdate,'%d-%m-%Y %H:%i:%s') str_closingdate, a.status ";
                query = query + " FROM   counter_transaction a left join counter_master d on a.comp = d.comp AND    a.counterno = d.counterno AND    a.id = d.countertranid ";
                query = query + " WHERE  a.comp is not NULL ";
                //query = query + " AND    a.comp = d.comp ";
                //query = query + " AND    a.counterno = d.counterno ";
                //query = query + " AND    a.id = d.countertranid ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  a.comp = '000' ";
                }
                if (sCounterNo.Trim().Length > 0)
                {
                    query = query + " and  a.counterno = '" + sCounterNo.Trim() + "' ";
                }
                if (sId.Trim().Length > 0)
                {
                    query = query + " and  a.id = '" + sId.Trim() + "' ";
                }
                if (sUserId.Trim().Length > 0)
                {
                    query = query + " and  a.openingby = '" + sUserId.Trim() + "' ";
                }
                if (sStatus.Trim().Length > 0)
                {
                    query = query + " and  a.status = '" + sStatus.Trim() + "' ";
                }
                //WriteToLogFile("MainController-getCounterTrans [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModCounter.GetSetid = replaceNull(dataReader, "id");
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetopeningbalance = replaceDoubleZero(dataReader, "openingbalance");
                    oModCounter.GetSetopeningby = replaceNull(dataReader, "openingby");
                    oModCounter.GetSetopeningbyname = replaceNull(dataReader, "openingbyname");
                    oModCounter.GetSetopeningdate = replaceNull(dataReader, "str_openingdate");
                    oModCounter.GetSetpos_bpid = replaceNull(dataReader, "pos_bpid");
                    oModCounter.GetSetpos_bpdesc = replaceNull(dataReader, "pos_bpdesc");
                    oModCounter.GetSetpos_ordercat = replaceNull(dataReader, "pos_ordercat");
                    oModCounter.GetSetpos_ordertype = replaceNull(dataReader, "pos_ordertype");
                    oModCounter.GetSetpos_orderactivity = replaceNull(dataReader, "pos_orderactivity");
                    oModCounter.GetSetpos_paytype = replaceNull(dataReader, "pos_paytype");
                    oModCounter.GetSettotalorderamount = replaceDoubleZero(dataReader, "totalorderamount");
                    oModCounter.GetSettotalinvoiceamount = replaceDoubleZero(dataReader, "totalinvoiceamount");
                    oModCounter.GetSettotalpayrcptamount = replaceDoubleZero(dataReader, "totalpayrcptamount");
                    oModCounter.GetSetclosingbalance = replaceDoubleZero(dataReader, "closingbalance");
                    oModCounter.GetSetclosingby = replaceNull(dataReader, "closingby");
                    oModCounter.GetSetclosingbyname = replaceNull(dataReader, "closingbyname");
                    oModCounter.GetSetclosingdate = replaceNull(dataReader, "str_closingdate");
                    oModCounter.GetSetstatus = replaceNull(dataReader, "status");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterTrans: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModCounter;
    }

    public String insertCounterTrans(CounterModel oModCounterTrans)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO counter_transaction (id, comp, counterno, openingbalance, openingby, openingdate, totalorderamount, totalinvoiceamount, totalpayrcptamount, closingbalance, closingby, closingdate, status) ";
                query = query + " VALUES (?id, ?comp, ?counterno, ?openingbalance, ?openingby, ?openingdate, ?totalorderamount, ?totalinvoiceamount, ?totalpayrcptamount, ?closingbalance, ?closingby, ?closingdate, ?status) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?id", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetcounterno;
                cmd.Parameters.Add("?openingbalance", MySqlDbType.Double).Value = oModCounterTrans.GetSetopeningbalance;
                cmd.Parameters.Add("?openingby", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetopeningby;
                if (oModCounterTrans.GetSetopeningby.Length > 0)
                {
                    if (oModCounterTrans.GetSetopeningdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTrans.GetSetopeningdate, ukDtfi);
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?totalorderamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalorderamount;
                cmd.Parameters.Add("?totalinvoiceamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalinvoiceamount;
                cmd.Parameters.Add("?totalpayrcptamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalpayrcptamount;
                cmd.Parameters.Add("?closingbalance", MySqlDbType.Double).Value = oModCounterTrans.GetSetclosingbalance;
                cmd.Parameters.Add("?closingby", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetclosingby;
                if (oModCounterTrans.GetSetclosingby.Length > 0)
                {
                    if (oModCounterTrans.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTrans.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetstatus;
                WriteToLogFile("MainController-insertCounterTrans [SQL]: " + query);
                WriteToLogFile("MainController-insertCounterTrans [SQL]: " + query);
                WriteToLogFile("MainController-insertCounterTrans [SQL]: " + query);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertCounterTrans: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateCounterTransInfo(MainModel oModCounterTransDet)
    {
        String result = "Y";

        CounterModel oModCounterTrans = new CounterModel();
        ArrayList lsCounterTransDet = new ArrayList();

        try
        {
            oModCounterTrans = getCounterTrans(oModCounterTransDet.GetSetcomp, oModCounterTransDet.GetSetcounterno, oModCounterTransDet.GetSetcountertranid, "", "");
            if (oModCounterTrans.GetSetid.Length > 0)
            {
                double totalorderamount = 0, totalinvoiceamount = 0, totalpayrcptamount = 0, closingbalance = 0;
                lsCounterTransDet = getCounterTransDetailsList(oModCounterTrans.GetSetcomp, oModCounterTrans.GetSetcounterno, oModCounterTrans.GetSetid, "", "", "");
                for (int i = 0; i < lsCounterTransDet.Count; i++)
                {
                    MainModel oModLineItem = (MainModel)lsCounterTransDet[i];

                    if (oModLineItem.GetSetrowinclude == true)
                    {
                        totalorderamount = totalorderamount + oModLineItem.GetSetsalesamount;
                        totalinvoiceamount = totalinvoiceamount + oModLineItem.GetSetinvoiceamount;
                        totalpayrcptamount = totalpayrcptamount + oModLineItem.GetSetpayrcptamount;
                    }
                }
                closingbalance = oModCounterTrans.GetSetopeningbalance + totalpayrcptamount;

                oModCounterTrans.GetSettotalorderamount = totalorderamount;
                oModCounterTrans.GetSettotalinvoiceamount = totalinvoiceamount;
                oModCounterTrans.GetSettotalpayrcptamount = totalpayrcptamount;
                oModCounterTrans.GetSetclosingbalance = closingbalance;

                //update Counter Trans Info
                result = updateCounterTrans(oModCounterTrans);
            }
            else
            {
                result = "N";
            }
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateCounterTransInfo: " + e.Message.ToString());
        }
        return result;
    }

    public String updateCounterTrans(CounterModel oModCounterTrans)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE counter_transaction ";
                query = query + " SET    openingbalance = ?openingbalance, openingby = ?openingby, openingdate = ?openingdate, totalorderamount = ?totalorderamount, totalinvoiceamount = ?totalinvoiceamount, ";
                query = query + "        totalpayrcptamount = ?totalpayrcptamount, closingbalance = ?closingbalance, closingby = ?closingby, closingdate = ?closingdate, status = ?status ";
                query = query + " WHERE  id = ?id and comp = ?comp AND counterno = ?counterno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?id", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetid;
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetcounterno;
                cmd.Parameters.Add("?openingbalance", MySqlDbType.Double).Value = oModCounterTrans.GetSetopeningbalance;
                cmd.Parameters.Add("?openingby", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetopeningby;
                if (oModCounterTrans.GetSetopeningby.Length > 0)
                {
                    if (oModCounterTrans.GetSetopeningdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTrans.GetSetopeningdate, ukDtfi);
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?openingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?openingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?totalorderamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalorderamount;
                cmd.Parameters.Add("?totalinvoiceamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalinvoiceamount;
                cmd.Parameters.Add("?totalpayrcptamount", MySqlDbType.Double).Value = oModCounterTrans.GetSettotalpayrcptamount;
                cmd.Parameters.Add("?closingbalance", MySqlDbType.Double).Value = oModCounterTrans.GetSetclosingbalance;
                cmd.Parameters.Add("?closingby", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetclosingby;
                if (oModCounterTrans.GetSetclosingby.Length > 0)
                {
                    if (oModCounterTrans.GetSetclosingdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTrans.GetSetclosingdate, ukDtfi);
                        cmd.Parameters.Add("?closingdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?closingdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?closingdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?status", MySqlDbType.VarChar).Value = oModCounterTrans.GetSetstatus;
                //WriteToLogFile("MainController-updateCounterTrans: [SQL] " + query);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateCounterTrans: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public ArrayList getCounterTransDetailsList(String sComp, String sCounterNo, String sCounterTransId, String sOrderNo, String sInvoiceNo, String sRowInclude)
    {
        ArrayList lsModCounterTran = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.counterno, a.countertranid, a.bpid, a.bpdesc, ";
                query = query + "        a.orderno, date_format(a.orderdate,'%d-%m-%Y %H:%i:%s') str_orderdate, a.orderamount, a.discamount, a.totalamount, a.taxamount, a.salesamount, a.orderstatus, ";
                query = query + "        a.shipmentno, date_format(a.shipmentdate,'%d-%m-%Y %H:%i:%s') str_shipmentdate, a.shipmentstatus, ";
                query = query + "        a.invoiceno, date_format(a.invoicedate,'%d-%m-%Y %H:%i:%s') str_invoicedate, a.invoiceamount, a.invoicestatus, ";
                query = query + "        a.payrcptno, date_format(a.payrcptdate,'%d-%m-%Y %H:%i:%s') str_payrcptdate, a.payrcptamount, a.payrcptstatus, a.paidamount, a.balanceamount, a.rowinclude ";
                query = query + " FROM   counter_transaction_details a ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  a.comp = '000' ";
                }
                if (sCounterNo.Trim().Length > 0)
                {
                    query = query + " and  a.counterno = '" + sCounterNo.Trim() + "' ";
                }
                if (sCounterTransId.Trim().Length > 0)
                {
                    query = query + " and  a.countertranid = '" + sCounterTransId.Trim() + "' ";
                }
                if (sOrderNo.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + sOrderNo.Trim() + "' ";
                }
                if (sInvoiceNo.Trim().Length > 0)
                {
                    query = query + " and  a.invoiceno = '" + sInvoiceNo.Trim() + "' ";
                }
                if (sRowInclude.Trim().Length > 0)
                {
                    query = query + " and  a.rowinclude = " + sRowInclude.Trim() + " ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                int rowno = 0;
                while (dataReader.Read())
                {
                    MainModel oModCounter = new MainModel();
                    rowno = rowno + 1;
                    oModCounter.GetSetrowno = rowno;
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetcountertranid = replaceNull(dataReader, "countertranid");
                    oModCounter.GetSetbpid = replaceNull(dataReader, "bpid");
                    oModCounter.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    oModCounter.GetSetorderno = replaceNull(dataReader, "orderno");
                    oModCounter.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    oModCounter.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    oModCounter.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    oModCounter.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    oModCounter.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    oModCounter.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    oModCounter.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    oModCounter.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    oModCounter.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    oModCounter.GetSetshipmentstatus = replaceNull(dataReader, "shipmentstatus");
                    oModCounter.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    oModCounter.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    oModCounter.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    oModCounter.GetSetinvoicestatus = replaceNull(dataReader, "invoicestatus");
                    oModCounter.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    oModCounter.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    oModCounter.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    oModCounter.GetSetpayrcptstatus = replaceNull(dataReader, "payrcptstatus");
                    oModCounter.GetSetpaidamount = replaceDoubleZero(dataReader, "paidamount");
                    oModCounter.GetSetbalanceamount = replaceDoubleZero(dataReader, "balanceamount");
                    oModCounter.GetSetrowinclude = (replaceZero(dataReader, "rowinclude") == 1 ? true : false);
                    lsModCounterTran.Add(oModCounter);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterTransDetailsList: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return lsModCounterTran;
    }

    public MainModel getCounterTransDetails(String sComp, String sCounterNo, String sCounterTransId, String sOrderNo)
    {
        MainModel oModCounter = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.counterno, a.countertranid, a.bpid, a.bpdesc, ";
                query = query + "        a.orderno, date_format(a.orderdate,'%d-%m-%Y %H:%i:%s') str_orderdate, a.orderamount, a.discamount, a.totalamount, a.taxamount, a.salesamount, a.orderstatus, ";
                query = query + "        a.shipmentno, date_format(a.shipmentdate,'%d-%m-%Y %H:%i:%s') str_shipmentdate, a.shipmentstatus, ";
                query = query + "        a.invoiceno, date_format(a.invoicedate,'%d-%m-%Y %H:%i:%s') str_invoicedate, a.invoiceamount, a.invoicestatus, ";
                query = query + "        a.payrcptno, date_format(a.payrcptdate,'%d-%m-%Y %H:%i:%s') str_payrcptdate, a.payrcptamount, a.payrcptstatus, a.paidamount, a.balanceamount, a.rowinclude ";
                query = query + " FROM   counter_transaction_details a ";
                query = query + " WHERE  comp is not NULL ";
                if (sComp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + sComp + "' ";
                }
                else
                {
                    query = query + " and  a.comp = '000' ";
                }
                if (sCounterNo.Trim().Length > 0)
                {
                    query = query + " and  a.counterno = '" + sCounterNo.Trim() + "' ";
                }
                if (sCounterTransId.Trim().Length > 0)
                {
                    query = query + " and  a.countertranid = '" + sCounterTransId.Trim() + "' ";
                }
                if (sOrderNo.Trim().Length > 0)
                {
                    query = query + " and  a.orderno = '" + sOrderNo.Trim() + "' ";
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    oModCounter.GetSetcomp = replaceNull(dataReader, "comp");
                    oModCounter.GetSetcounterno = replaceNull(dataReader, "counterno");
                    oModCounter.GetSetcountertranid = replaceNull(dataReader, "countertranid");
                    oModCounter.GetSetbpid = replaceNull(dataReader, "bpid");
                    oModCounter.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    oModCounter.GetSetorderno = replaceNull(dataReader, "orderno");
                    oModCounter.GetSetorderdate = replaceNull(dataReader, "str_orderdate");
                    oModCounter.GetSetorderamount = replaceDoubleZero(dataReader, "orderamount");
                    oModCounter.GetSetdiscamount = replaceDoubleZero(dataReader, "discamount");
                    oModCounter.GetSettotalamount = replaceDoubleZero(dataReader, "totalamount");
                    oModCounter.GetSettaxamount = replaceDoubleZero(dataReader, "taxamount");
                    oModCounter.GetSetsalesamount = replaceDoubleZero(dataReader, "salesamount");
                    oModCounter.GetSetorderstatus = replaceNull(dataReader, "orderstatus");
                    oModCounter.GetSetshipmentno = replaceNull(dataReader, "shipmentno");
                    oModCounter.GetSetshipmentdate = replaceNull(dataReader, "str_shipmentdate");
                    oModCounter.GetSetshipmentstatus = replaceNull(dataReader, "shipmentstatus");
                    oModCounter.GetSetinvoiceno = replaceNull(dataReader, "invoiceno");
                    oModCounter.GetSetinvoicedate = replaceNull(dataReader, "str_invoicedate");
                    oModCounter.GetSetinvoiceamount = replaceDoubleZero(dataReader, "invoiceamount");
                    oModCounter.GetSetinvoicestatus = replaceNull(dataReader, "invoicestatus");
                    oModCounter.GetSetpayrcptno = replaceNull(dataReader, "payrcptno");
                    oModCounter.GetSetpayrcptdate = replaceNull(dataReader, "str_payrcptdate");
                    oModCounter.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    oModCounter.GetSetpayrcptstatus = replaceNull(dataReader, "payrcptstatus");
                    oModCounter.GetSetpaidamount = replaceDoubleZero(dataReader, "paidamount");
                    oModCounter.GetSetbalanceamount = replaceDoubleZero(dataReader, "balanceamount");
                    oModCounter.GetSetrowinclude = (replaceZero(dataReader, "rowinclude") == 1 ? true : false);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCounterTransDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return oModCounter;
    }

    public String insertCounterTransDetails(MainModel oModCounterTransDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO counter_transaction_details (comp, counterno, countertranid, bpid, bpdesc, orderno, orderdate, orderamount, discamount, totalamount, taxamount, salesamount, orderstatus, rowinclude) ";
                query = query + " VALUES (?comp, ?counterno, ?countertranid, ?bpid, ?bpdesc, ?orderno, ?orderdate, ?orderamount, ?discamount, ?totalamount, ?taxamount, ?salesamount, ?orderstatus, ?rowinclude) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcounterno;
                cmd.Parameters.Add("?countertranid", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcountertranid;
                cmd.Parameters.Add("?bpid", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetbpid;
                cmd.Parameters.Add("?bpdesc", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetbpdesc;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetorderno;
                if (oModCounterTransDet.GetSetorderdate.Length > 0)
                {
                    if (oModCounterTransDet.GetSetorderdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTransDet.GetSetorderdate, ukDtfi);
                        cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?orderdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?orderdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetorderamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetdiscamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSettotalamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSettaxamount;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetsalesamount;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetorderstatus;
                cmd.Parameters.Add("?rowinclude", MySqlDbType.Int16).Value = (oModCounterTransDet.GetSetrowinclude == true ? 1 : 0);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertCounterTransDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }

    public String updateCounterTransDetails(MainModel oModCounterTransDet)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE counter_transaction_details ";
                query = query + " SET    orderamount = ?orderamount, discamount = ?discamount, totalamount = ?totalamount, taxamount = ?taxamount, salesamount = ?salesamount, orderstatus = ?orderstatus,";
                query = query + "        shipmentno = ?shipmentno, shipmentdate = ?shipmentdate, shipmentstatus = ?shipmentstatus, ";
                query = query + "        invoiceno = ?invoiceno, invoicedate = ?invoicedate, invoiceamount = ?invoiceamount, invoicestatus = ?invoicestatus, ";
                query = query + "        payrcptno = ?payrcptno, payrcptdate = ?payrcptdate, payrcptamount = ?payrcptamount, payrcptstatus = ?payrcptstatus, ";
                query = query + "        paidamount = ?paidamount, balanceamount = ?balanceamount, rowinclude = ?rowinclude ";
                query = query + " WHERE  comp = ?comp AND counterno = ?counterno and countertranid = ?countertranid and orderno = ?orderno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcomp;
                cmd.Parameters.Add("?counterno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcounterno;
                cmd.Parameters.Add("?countertranid", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetcountertranid;
                cmd.Parameters.Add("?orderno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetorderno;
                cmd.Parameters.Add("?orderamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetorderamount;
                cmd.Parameters.Add("?discamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetdiscamount;
                cmd.Parameters.Add("?totalamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSettotalamount;
                cmd.Parameters.Add("?taxamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSettaxamount;
                cmd.Parameters.Add("?salesamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetsalesamount;
                cmd.Parameters.Add("?orderstatus", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetorderstatus;
                cmd.Parameters.Add("?shipmentno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetshipmentno;
                if (oModCounterTransDet.GetSetshipmentdate.Length > 0)
                {
                    if (oModCounterTransDet.GetSetshipmentdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTransDet.GetSetshipmentdate, ukDtfi);
                        cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?shipmentdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?shipmentdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?shipmentstatus", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetshipmentstatus;
                cmd.Parameters.Add("?invoiceno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetinvoiceno;
                if (oModCounterTransDet.GetSetinvoicedate.Length > 0)
                {
                    if (oModCounterTransDet.GetSetinvoicedate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTransDet.GetSetinvoicedate, ukDtfi);
                        cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?invoicedate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?invoicedate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?invoiceamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetinvoiceamount;
                cmd.Parameters.Add("?invoicestatus", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetinvoicestatus;
                cmd.Parameters.Add("?payrcptno", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetpayrcptno;
                if (oModCounterTransDet.GetSetpayrcptdate.Length > 0)
                {
                    if (oModCounterTransDet.GetSetpayrcptdate.Trim().Length > 0)
                    {
                        DateTime datetime = Convert.ToDateTime(oModCounterTransDet.GetSetpayrcptdate, ukDtfi);
                        cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = datetime;
                    }
                    else
                    {
                        cmd.Parameters.Add("?payrcptdate", MySqlDbType.Date).Value = DateTime.Now;
                    }
                }
                else
                {
                    cmd.Parameters.Add("?payrcptdate", MySqlDbType.DateTime).Value = null;
                }
                cmd.Parameters.Add("?payrcptamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetpayrcptamount;
                cmd.Parameters.Add("?payrcptstatus", MySqlDbType.VarChar).Value = oModCounterTransDet.GetSetpayrcptstatus;
                cmd.Parameters.Add("?paidamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetpaidamount;
                cmd.Parameters.Add("?balanceamount", MySqlDbType.Double).Value = oModCounterTransDet.GetSetbalanceamount;
                cmd.Parameters.Add("?rowinclude", MySqlDbType.Int16).Value = (oModCounterTransDet.GetSetrowinclude == true ? 1 : 0);
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateCounterTransDetails: " + e.Message.ToString());
        }
        finally
        {
            if (dbConnect.connection.State.HasFlag(ConnectionState.Open))
            {
                dbConnect.CloseConnection();
            }
        }
        return result;
    }
    
    #endregion
    /*** END FOR COUNTER ***/
    #region CASHBOOK
    /***BEGIN CASHBOOK ***/

    public ArrayList getCashInOut(String comp, String sDateFrom, String sDateTo)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT Comp,payno,resno,Date, Amount,type,itemdesc,status, paytype";
                query = query + " FROM (";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno payno, expenses_header.expensesno resno, paypaid_header.confirmeddate Date, paypaid_details.paypaidprice Amount, 'expenses' type, itemdesc, paypaid_header.status,paypaid_details.paytype";
                query = query + " from   paypaid_header, paypaid_details, expenses_header, expenses_details";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	 paypaid_details.comp = expenses_header.comp  ";
                query = query + " AND    paypaid_details.expensesno = expenses_header.expensesno";
                query = query + " AND    expenses_details.expensesno = expenses_header.expensesno ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_details.comp = '" + comp + "' ";
                query = query + " AND    expenses_details.comp = '" + comp + "' ";

                query = query + " UNION ALL";

                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno payno, invoice_header.invoiceno resno, payrcpt_header.confirmeddate Date, payrcpt_details.payrcptprice Amount, 'income' type, invoice_details.itemdesc itemdesc, payrcpt_header.status, payrcpt_details.paytype";
                query = query + " FROM payrcpt_header, payrcpt_details, invoice_header, invoice_details";
                query = query + " WHERE payrcpt_header.comp is not NULL ";
                query = query + " AND payrcpt_header.comp =  payrcpt_details.comp ";
                query = query + " AND payrcpt_header.payrcptno =  payrcpt_details.payrcptno ";
                query = query + " AND payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND payrcpt_details.invoiceno = invoice_header.invoiceno ";
                query = query + " AND invoice_header.invoiceno = invoice_details.invoiceno";
                query = query + " AND payrcpt_details.comp = '" + comp + "'";
                query = query + " AND invoice_details.comp = '" + comp + "'";
                query = query + " ) T";
                if (sDateFrom != "")
                {
                    query = query + " where Date >= '" + sDateFrom + "'";
                    //WriteToLogFile("MainController-getCashInOut:sDateFrom " + sDateFrom);
                }
                if (sDateTo != "")
                {
                    query = query + " AND Date <= '" + sDateTo + "'";
                    //WriteToLogFile("MainController-getCashInOut:sDateTo " + sDateTo);
                }
                query = query + " Order by Date ASC";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInvHdr = new MainModel();
                    modInvHdr.GetSetCashInOutcomp = replaceNull(dataReader, "Comp");
                    modInvHdr.GetSetCashInOutpayno = replaceNull(dataReader, "payno");
                    modInvHdr.GetSetCashInOutresno = replaceNull(dataReader, "resno");
                    modInvHdr.GetSetCashInOutdate = replaceNull(dataReader, "Date");
                    modInvHdr.GetSetCashInOutAmount = replaceNull(dataReader, "Amount");
                    modInvHdr.GetSetCashInOutType = replaceNull(dataReader, "type");
                    modInvHdr.GetSetCashInOutDesc = replaceNull(dataReader, "itemdesc");
                    modInvHdr.GetSetCashInOutStatus = replaceNull(dataReader, "status");
                    modInvHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashInOut: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public ArrayList getCashInOut2(String comp, String sDateFrom, String sDateTo)
    {
        ArrayList lsOrdHdrMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT Comp,payno,resno, Date1, Date2, Amount,type,itemdesc,status, paytype, remarks";
                query = query + " FROM (";
                query = query + " SELECT paypaid_header.comp, paypaid_header.paypaidno payno, expenses_header.expensesno resno, date_format(paypaid_header.confirmeddate,'%d-%m-%Y %H:%i:%s') Date1, paypaid_header.confirmeddate Date2, expenses_details.totalexpenses Amount, 'expenses' type, itemdesc, paypaid_header.status,paypaid_details.paytype, expenses_header.remarks remarks ";
                query = query + " from   paypaid_header, paypaid_details, expenses_header, expenses_details";
                query = query + " WHERE  paypaid_header.comp is not NULL ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_header.paypaidno =  paypaid_details.paypaidno ";
                query = query + " AND	 paypaid_details.comp = expenses_header.comp  ";
                query = query + " AND    paypaid_details.expensesno = expenses_header.expensesno";
                query = query + " AND    expenses_details.expensesno = expenses_header.expensesno ";
                query = query + " AND    paypaid_header.comp =  paypaid_details.comp ";
                query = query + " AND    paypaid_details.comp = '" + comp + "' ";
                query = query + " AND    expenses_details.comp = '" + comp + "' ";

                query = query + " UNION ALL";

                query = query + " SELECT payrcpt_header.comp, payrcpt_header.payrcptno payno, invoice_header.invoiceno resno, date_format(payrcpt_header.confirmeddate,'%d-%m-%Y %H:%i:%s') Date1, payrcpt_header.confirmeddate Date2, invoice_details.totalinvoice Amount, 'income' type, invoice_details.itemdesc itemdesc, payrcpt_header.status, payrcpt_details.paytype, invoice_header.remarks remarks ";
                query = query + " FROM payrcpt_header, payrcpt_details, invoice_header, invoice_details";
                query = query + " WHERE payrcpt_header.comp is not NULL ";
                query = query + " AND payrcpt_header.comp =  payrcpt_details.comp ";
                query = query + " AND payrcpt_header.payrcptno =  payrcpt_details.payrcptno ";
                query = query + " AND payrcpt_details.comp = invoice_header.comp ";
                query = query + " AND payrcpt_details.invoiceno = invoice_header.invoiceno ";
                query = query + " AND invoice_header.invoiceno = invoice_details.invoiceno";
                query = query + " AND payrcpt_details.comp = '" + comp + "'";
                query = query + " AND invoice_details.comp = '" + comp + "'";
                query = query + " ) T";
                if (sDateFrom != "")
                {
                    query = query + " where Date2 >= '" + sDateFrom + "'";
                    //WriteToLogFile("MainController-getCashInOut:sDateFrom " + sDateFrom);
                }
                if (sDateTo != "")
                {
                    query = query + " AND Date2 <= '" + sDateTo + "'";
                    //WriteToLogFile("MainController-getCashInOut:sDateTo " + sDateTo);
                }
                query = query + " Order by Date2 desc";
                //WriteToLogFile("MainController-getCashInOut2 [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    object modInvHdr = new { GetSetCashInOutcomp = replaceNull(dataReader, "Comp"),
                        GetSetCashInOutpayno = replaceNull(dataReader, "payno"),
                        GetSetCashInOutresno = replaceNull(dataReader, "resno"),
                        GetSetCashInOutdate = replaceNull(dataReader, "Date1"),
                        GetSetCashInOutAmount = replaceNull(dataReader, "Amount"),
                        GetSetCashInOutType = replaceNull(dataReader, "type"),
                        GetSetCashInOutDesc = replaceNull(dataReader, "itemdesc"),
                        GetSetCashInOutStatus = replaceNull(dataReader, "status"),
                        GetSetpaytype = replaceNull(dataReader, "paytype"),
                        GetSetRemarks = replaceNull(dataReader, "remarks")
                    };
                    lsOrdHdrMod.Add(modInvHdr);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCashInOut2: " + e.Message.ToString());
        }
        return lsOrdHdrMod;
    }

    public MainModel getIncomeDetails(String comp, String paypaidno, String receiptno)
    {
        MainModel modIncHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT ih.comp as comp, date_format(ih.confirmeddate,'%d-%m-%Y %H:%i:%s') as invoicedate, bpid, bpdesc, bpaddress, paytype, id.totalinvoice payrcptamount, invoicetype,  itemdesc, paramtdesc, ih.status, paramtcategory, invoicecat, ih.remarks ";
                query = query + " FROM bioappdb.invoice_header ih, bioappdb.invoice_details id, bioappdb.payrcpt_details pd, tbl_parametertype ";
                query = query + " WHERE ih.comp = id.comp AND id.invoiceno = ih.invoiceno";
                query = query + " AND ih.comp = pd.comp AND pd.invoiceno = ih.invoiceno ";
                query = query + " AND paramttype = invoicetype ";
                query = query + " AND ih.comp = '" + comp + "'";
                query = query + " AND ih.invoiceno = '" + receiptno + "'";
                query = query + " AND payrcptno = '" + paypaidno + "' ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                //WriteToLogFile("MainController-getIncomeDetails [SQL]: " + query);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modIncHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modIncHdr.GetSetincomedate = replaceNull(dataReader, "invoicedate");
                    modIncHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modIncHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modIncHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modIncHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modIncHdr.GetSetincomecat = replaceNull(dataReader, "paramtdesc");
                    modIncHdr.GetSetincometype = replaceNull(dataReader, "itemdesc");
                    modIncHdr.GetSetpayrcptamount = replaceDoubleZero(dataReader, "payrcptamount");
                    modIncHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modIncHdr.GetSetparamtcategory = replaceNull(dataReader, "paramtcategory");
                    modIncHdr.GetSetinvoicecat = replaceNull(dataReader, "invoicecat");
                    modIncHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getIncomeDetails: " + e.Message.ToString());
        }
        return modIncHdr;
    }

    public MainModel getExpensesHeaderDetails2(String comp, String paypaidno, String receiptno)
    {
        MainModel modExpHdr = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT eh.comp as comp, date_format(eh.confirmeddate,'%d-%m-%Y %H:%i:%s') as expensesdate, bpid, bpdesc, bpaddress, paytype, ed.totalexpenses paypaidamount, expensestype,  itemdesc, paramtdesc, eh.status, paramtcategory, expensescat, eh.remarks ";
                query = query + " FROM bioappdb.expenses_header eh, bioappdb.expenses_details ed, bioappdb.paypaid_details pd, tbl_parametertype ";
                query = query + " WHERE ed.comp = eh.comp AND ed.expensesno = eh.expensesno";
                query = query + " AND pd.comp = eh.comp AND pd.expensesno = eh.expensesno ";
                query = query + " AND paramttype = eh.expensestype ";
                query = query + " AND eh.comp = '" + comp + "'";
                query = query + " AND eh.expensesno = '" + receiptno + "'";
                query = query + " AND paypaidno = '" + paypaidno + "' ";

                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modExpHdr.GetSetcomp = replaceNull(dataReader, "comp");
                    modExpHdr.GetSetexpensesdate = replaceNull(dataReader, "expensesdate");
                    modExpHdr.GetSetbpid = replaceNull(dataReader, "bpid");
                    modExpHdr.GetSetbpdesc = replaceNull(dataReader, "bpdesc");
                    modExpHdr.GetSetbpaddress = replaceNull(dataReader, "bpaddress");
                    modExpHdr.GetSetpaytype = replaceNull(dataReader, "paytype");
                    modExpHdr.GetSetexpensescat = replaceNull(dataReader, "paramtdesc");
                    modExpHdr.GetSetexpensestype = replaceNull(dataReader, "itemdesc");
                    modExpHdr.GetSetpaypaidamount = replaceDoubleZero(dataReader, "paypaidamount");
                    modExpHdr.GetSetstatus = replaceNull(dataReader, "status");
                    modExpHdr.GetSetparamtcategory = replaceNull(dataReader, "paramtcategory");
                    modExpHdr.GetSetinvoicecat = replaceNull(dataReader, "expensescat");
                    modExpHdr.GetSetremarks = replaceNull(dataReader, "remarks");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getExpensesHeaderDetails2: " + e.Message.ToString());
        }
        return modExpHdr;
    }

    /**** END CASHBOOK ****/

    #endregion

    #region/*** BEGIN JAWATANKUASA COMP ***/
    public ArrayList getCommitteeList(String compId, String committeeid, String committeename, String userid)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND  committee_type='JK_COMP' ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    comp in (SELECT comp FROM user_role ";
                    query = query + " WHERE userid = '" + userid + "')";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeename.Trim().Length > 0)
                {
                    query = query + " AND    upper(committee_name) like '%" + committeename + "%' ";
                }
                query = query + " ORDER  BY comp, committee_status";
                //WriteToLogFile("MainController-getCommitteeList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeList: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }


    public ArrayList getCommitteeList(String compId, String committeeid, String committeename, String userid, String currpage)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {


                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND  committee_type='PEG_MASJID' ";

                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    comp in (SELECT comp FROM user_role ";
                    query = query + " WHERE userid = '" + userid + "')";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeename.Trim().Length > 0)
                {
                    query = query + " AND    upper(committee_name) like '%" + committeename + "%' ";
                }
                query = query + " ORDER  BY comp, committee_status ";

                /*if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }*/
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeListPages: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }

    public ArrayList getJKCommitteeList(String compId, String committeeid, String committeename, String userid)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";


        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role, date_format(committee_doa,'%d-%m-%Y') str_committee_doa, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND  committee_type='JK_COMP' ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    comp in (SELECT comp FROM user_role ";
                    query = query + " WHERE userid = '" + userid + "')";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeename.Trim().Length > 0)
                {
                    query = query + " AND    upper(committee_name) like '%" + committeename + "%' ";
                }
                query = query + " ORDER  BY comp,committee_status ";
                //WriteToLogFile("MainController-getCommitteeList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_doa = replaceNull(dataReader, "str_committee_doa");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeList: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }

    public ArrayList getJKCommitteeList(String compId, String committeeid, String committeename, String userid, String currpage)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role, date_format(committee_doa,'%d-%m-%Y') str_committee_doa, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND  committee_type='JK_COMP' ";

                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    comp in (SELECT comp FROM user_role ";
                    query = query + " WHERE userid = '" + userid + "')";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeename.Trim().Length > 0)
                {
                    query = query + " AND    upper(committee_name) like '%" + committeename + "%' ";
                }
                query = query + " ORDER  BY comp, committee_status";
                /*if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }*/
                //WriteToLogFile("MainController-getCommitteeListPages [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_doa = replaceNull(dataReader, "str_committee_doa");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeListPages: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }


    public ArrayList getCommitteePositionList(String compId, String committeeid, String committeerole, String committeetype, String committee_status)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role as role, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp";
                query = query + " WHERE  comp IS NOT NULL ";

                if (committeetype.Trim().Length > 0)
                {
                    query = query + " AND  committee_type='" + committeetype + "' ";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeerole.Trim().Length > 0)
                {
                    query = query + " AND    committee_role='" + committeerole + "' ";
                }
                if (committee_status.Trim().Length > 0)
                {
                    query = query + " AND    committee_status='" + committee_status + "' ";
                }

                query = query + " UNION ALL";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_prevrole as role, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp";
                query = query + " WHERE  comp IS NOT NULL ";

                if (committeetype.Trim().Length > 0)
                {
                    query = query + " AND  committee_type='" + committeetype + "' ";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeerole.Trim().Length > 0)
                {
                    query = query + " AND    committee_prevrole='" + committeerole + "' ";
                }
                if (committee_status.Trim().Length > 0)
                {
                    query = query + " AND    committee_status='" + committee_status + "' ";
                }
                query = query + " ORDER  BY comp ";

                WriteToLogFile("MainController-getCommitteeList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "role");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeList: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }


    public MainModel getCommittee(String comp, String userid)
    {
        MainModel modCommittee = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, committee_role, committee_status, committee_dob, ";
                query = query + " committee_age, committee_prevrole, committee_doa, committee_appointmentby, committee_certno, committee_job";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND    comp = '" + comp + "' ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " and  committee_id = '" + userid + "' ";
                }
                query = query + " ORDER  BY comp ";
                //WriteToLogFile("MainController-getCommitteeWaqaf [SQL >]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcommittee_dob = replaceNull(dataReader, "committee_dob");

                    modCommittee.GetSetcommittee_age = replaceNull(dataReader, "committee_age");
                    modCommittee.GetSetcommittee_prevrole = replaceNull(dataReader, "committee_prevrole");
                    modCommittee.GetSetcommittee_doa = replaceNull(dataReader, "committee_doa");
                    modCommittee.GetSetcommittee_appointmentby = replaceNull(dataReader, "committee_appointmentby");
                    modCommittee.GetSetcommittee_certno = replaceNull(dataReader, "committee_certno");
                    modCommittee.GetSetcommittee_job = replaceNull(dataReader, "committee_job");


                    //WriteToLogFile("MainController-getCommitteeWaqaf: " + modCommittee.GetSetcommittee_doa + modCommittee.GetSetcommittee_dob);

                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeWaqaf: " + e.Message.ToString());
        }
        return modCommittee;
    }

    public ArrayList getCommitteeList1(String compId, String committeeid, String committeename, String userid)
    {
        ArrayList lsCommitteeMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, committee_id, committee_name, committee_address, committee_tel, ";
                query = query + "        committee_role, committee_status,";
                query = query + "        createdby, createddate ";
                query = query + " FROM   committee_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND  committee_type='JK_COMP' ";
                if (userid.Trim().Length > 0)
                {
                    query = query + " AND    comp in (SELECT comp FROM user_role ";
                    query = query + " WHERE userid = '" + userid + "')";
                }
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    upper(comp) like '%" + compId + "%' ";
                }
                if (committeeid.Trim().Length > 0)
                {
                    query = query + " AND    committee_id = '" + committeeid + "' ";
                }
                if (committeename.Trim().Length > 0)
                {
                    query = query + " AND    upper(committee_name) like '%" + committeename + "%' ";
                }
                query = query + " ORDER  BY comp, committee_status";
                //WriteToLogFile("MainController-getCommitteeList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modCommittee = new MainModel();
                    modCommittee.GetSetcomp = replaceNull(dataReader, "comp");
                    modCommittee.GetSetcommittee_id = replaceNull(dataReader, "committee_id");
                    modCommittee.GetSetcommittee_name = replaceNull(dataReader, "committee_name");
                    modCommittee.GetSetcommittee_address = replaceNull(dataReader, "committee_address");
                    modCommittee.GetSetcommittee_contact = replaceNull(dataReader, "committee_tel");
                    modCommittee.GetSetcommittee_role = replaceNull(dataReader, "committee_role");
                    modCommittee.GetSetcommittee_status = replaceNull(dataReader, "committee_status");
                    modCommittee.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modCommittee.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    lsCommitteeMod.Add(modCommittee);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getCommitteeList: " + e.Message.ToString());
        }
        return lsCommitteeMod;
    }


    public int insertCommittee(String comp, String committeeid, String committeename, String committeeaddress, String committeetel, String committeerole, String committeestatus, String createdby, String committeedob, String committeeage, String prevcommitteerole, String committeedoa, String committeeappointmentby, String committeecertno, String committeetype, String committeejob, String exchangeid)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;
        //WriteToLogFile("MainController-insertCommittee: " + committeerole + committeedob + committeeage + committeerole + committeedoa + committeeappointmentby + committeecertno + "Kerja: " + committeejob + "Exchange id " + exchangeid);
        try
        {
            if (dbConnect.OpenConnection() == true)
            {


                query = "";
                query = query + " INSERT INTO committee_comp(comp, committee_id, committee_name, committee_address, committee_tel, committee_role, committee_status, createdby, createddate, committee_dob, committee_age, committee_prevrole, committee_doa, committee_appointmentby, committee_certno, committee_type, committee_job) ";
                query = query + " VALUES(?comp, ?committeeid, ?committee_name, ?committee_address, ?committee_tel, ?committee_role, ?committee_status, ?createdby, now(), ?committee_dob, ?committee_age, ?committee_prevrole, ?committee_doa, ?committee_appointmentby, ?committee_certno, ?committee_type, ?committee_job) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?committeeid", MySqlDbType.VarChar).Value = committeeid;
                cmd.Parameters.Add("?committee_name", MySqlDbType.VarChar).Value = committeename;
                cmd.Parameters.Add("?committee_address", MySqlDbType.VarChar).Value = committeeaddress;
                cmd.Parameters.Add("?committee_tel", MySqlDbType.VarChar).Value = committeetel;
                cmd.Parameters.Add("?committee_role", MySqlDbType.VarChar).Value = committeerole;
                cmd.Parameters.Add("?committee_status", MySqlDbType.VarChar).Value = committeestatus;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = createdby;
                cmd.Parameters.Add("?committee_dob", MySqlDbType.VarChar).Value = committeedob;
                cmd.Parameters.Add("?committee_age", MySqlDbType.VarChar).Value = committeeage;
                cmd.Parameters.Add("?committee_prevrole", MySqlDbType.VarChar).Value = prevcommitteerole;
                cmd.Parameters.Add("?committee_doa", MySqlDbType.VarChar).Value = committeedoa;
                cmd.Parameters.Add("?committee_appointmentby", MySqlDbType.VarChar).Value = committeeappointmentby;
                cmd.Parameters.Add("?committee_certno", MySqlDbType.VarChar).Value = committeecertno;
                cmd.Parameters.Add("?committee_type", MySqlDbType.VarChar).Value = committeetype;
                cmd.Parameters.Add("?committee_job", MySqlDbType.VarChar).Value = committeejob;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;

            if (success == 1)
            {
                if (exchangeid != "")
                {
                    updateCommittee(comp, exchangeid, "IN-ACTIVE");
                }
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertCommittee: " + e.Message.ToString());
        }
        return success;
    }

    public int updateCommittee(String comp, String committee_id, String committee_name, String committee_address, String committee_tel, String committee_role, String committee_status, String committeedob, String committeeage, String prevcommitteerole, String committeedoa, String committeeappointmentby, String committeecertno, String committeejob)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        //WriteToLogFile("MainController-updateCommittee: Kerja " + comp + committee_id + committee_name + committee_address + committee_tel + committee_role + committee_status + committeedob + committeeage + prevcommitteerole + committeedoa + committeeappointmentby + committeecertno + committeejob);

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        UPDATE committee_comp
                        SET   committee_id = ?param_committee_id,  committee_name = ?param_committee_name, committee_address = ?param_committee_address,
							  committee_tel = ?param_committee_tel, committee_role = ?param_committee_role, committee_status = ?param_committee_status,
                              committee_dob = ?param_committee_dob, committee_age = ?param_committee_age, committee_prevrole = ?param_committee_prevrole, 
                              committee_doa = ?param_committee_doa, committee_appointmentby = ?param_committee_appointmentby, committee_certno = ?param_committee_certno
                        WHERE committee_id = ?param_committee_id
                              and comp = ?param_comp;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_committee_id", MySqlDbType.VarChar).Value = committee_id;
                cmd.Parameters.Add("?param_committee_name", MySqlDbType.VarChar).Value = committee_name;
                cmd.Parameters.Add("?param_committee_address", MySqlDbType.VarChar).Value = committee_address;
                cmd.Parameters.Add("?param_committee_tel", MySqlDbType.VarChar).Value = committee_tel;
                cmd.Parameters.Add("?param_committee_role", MySqlDbType.VarChar).Value = committee_role;
                cmd.Parameters.Add("?param_committee_status", MySqlDbType.VarChar).Value = committee_status;
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?param_committee_dob", MySqlDbType.VarChar).Value = committeedob;
                cmd.Parameters.Add("?param_committee_age", MySqlDbType.VarChar).Value = committeeage;
                cmd.Parameters.Add("?param_committee_prevrole", MySqlDbType.VarChar).Value = prevcommitteerole;
                cmd.Parameters.Add("?param_committee_doa", MySqlDbType.VarChar).Value = committeedoa;
                cmd.Parameters.Add("?param_committee_appointmentby", MySqlDbType.VarChar).Value = committeeappointmentby;
                cmd.Parameters.Add("?param_committee_certno", MySqlDbType.VarChar).Value = committeecertno;
                //cmd.Parameters.Add("?param_committee_job", MySqlDbType.VarChar).Value = committeejob;



                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCommittee: " + e.Message.ToString());
        }
        return success;
    }

    public int updateCommittee(String comp, String committee_id, String committee_status)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        //WriteToLogFile("MainController-updateCommittee: Kerja " + comp + committee_id);

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        UPDATE committee_comp
                        SET   committee_id = ?param_committee_id, committee_status = ?param_committee_status
                        WHERE committee_id = ?param_committee_id
                              and comp = ?param_comp;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_committee_id", MySqlDbType.VarChar).Value = committee_id;
                cmd.Parameters.Add("?param_committee_status", MySqlDbType.VarChar).Value = committee_status;
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                //cmd.Parameters.Add("?param_committee_job", MySqlDbType.VarChar).Value = committeejob;



                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCommittee: " + e.Message.ToString());
        }
        return success;
    }

    public int updateCommittee1(String comp, String committee_id, String committee_name, String committee_address, String committee_tel, String committee_role, String committee_status, String committeedob, String committeeage, String committeedoa, String committeeappointmentby, String committeejob)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;
        //WriteToLogFile("MainController-updateCommittee1: " + "Masukk sini");
        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        UPDATE committee_comp
                        SET   committee_id = ?param_committee_id,  committee_name = ?param_committee_name, committee_address = ?param_committee_address,
							  committee_tel = ?param_committee_tel, committee_role = ?param_committee_role, committee_status = ?param_committee_status,
                              committee_dob = ?param_committee_dob, committee_age = ?param_committee_age, committee_prevrole = ?param_committee_prevrole, 
                              committee_doa = ?param_committee_doa, committee_appointmentby = ?param_committee_appointmentby, committee_certno = ?param_committee_certno, committee_job = ?param_committee_job
                        WHERE committee_id = ?param_committee_id
                              and comp = ?param_comp;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_committee_id", MySqlDbType.VarChar).Value = committee_id;
                cmd.Parameters.Add("?param_committee_name", MySqlDbType.VarChar).Value = committee_name;
                cmd.Parameters.Add("?param_committee_address", MySqlDbType.VarChar).Value = committee_address;
                cmd.Parameters.Add("?param_committee_tel", MySqlDbType.VarChar).Value = committee_tel;
                cmd.Parameters.Add("?param_committee_role", MySqlDbType.VarChar).Value = committee_role;
                cmd.Parameters.Add("?param_committee_status", MySqlDbType.VarChar).Value = committee_status;
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?param_committee_dob", MySqlDbType.VarChar).Value = committeedob;
                cmd.Parameters.Add("?param_committee_age", MySqlDbType.VarChar).Value = committeeage;
                cmd.Parameters.Add("?param_committee_prevrole", MySqlDbType.VarChar).Value = "";
                cmd.Parameters.Add("?param_committee_doa", MySqlDbType.VarChar).Value = committeedoa;
                cmd.Parameters.Add("?param_committee_appointmentby", MySqlDbType.VarChar).Value = committeeappointmentby;
                cmd.Parameters.Add("?param_committee_certno", MySqlDbType.VarChar).Value = "";
                cmd.Parameters.Add("?param_committee_job", MySqlDbType.VarChar).Value = committeejob;

                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateCommittee1: " + e.Message.ToString());
        }
        return success;
    }


    public int deleteCommitteeUser(String comp, String committeeId)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "DELETE FROM committee_comp where comp = ?comp and committee_id = ?committeeid";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?committeeid", MySqlDbType.VarChar).Value = committeeId;
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    success = replaceZero(dataReader, "result");
                }
                success = 1;
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteCommitteeUser: " + e.Message.ToString());
        }
        return success;
    }
    #endregion/*** END JAWATANKUASA COMP ***/

    #region/*** BEGIN FOR INFO COMP ***/
    //update by fakhrul @ 06/09/2020
    public ArrayList getInfoList(String compId, String infono, String infotype, String status)
    {
        ArrayList lsInfoMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, info_no, info_type, info_description, info_status, ";
                query = query + "        createdby, createddate, modifiedby, modifieddate ";
                query = query + " FROM   info_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    comp = '" + compId + "' ";
                }
                if (infono.Trim().Length > 0)
                {
                    query = query + " AND    info_no = '" + infono + "' ";
                }
                if (infotype.Trim().Length > 0)
                {
                    query = query + " AND    info_type = '" + infotype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " AND    info_status = '" + status + "' ";
                }
                query = query + " ORDER  BY comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInfo = new MainModel();
                    modInfo.GetSetcomp = replaceNull(dataReader, "comp");
                    modInfo.GetSetinfo_no = replaceNull(dataReader, "info_no");
                    modInfo.GetSetinfo_type = replaceNull(dataReader, "info_type");
                    modInfo.GetSetinfo_desc = replaceNull(dataReader, "info_description");
                    modInfo.GetSetinfo_status = replaceNull(dataReader, "info_status");
                    modInfo.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInfo.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInfo.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modInfo.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    lsInfoMod.Add(modInfo);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInfoList: " + e.Message.ToString());
        }
        return lsInfoMod;
    }

    public ArrayList getInfoList(String compId, String infono, String infotype, String status, String currpage)
    {
        ArrayList lsInfoMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, info_no, info_type, info_description, info_status, ";
                query = query + "        createdby, createddate, modifiedby, modifieddate ";
                query = query + " FROM   info_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                if (compId.Trim().Length > 0)
                {
                    query = query + " AND    comp = '" + compId + "' ";
                }
                if (infono.Trim().Length > 0)
                {
                    query = query + " AND    info_no = '" + infono + "' ";
                }
                if (infotype.Trim().Length > 0)
                {
                    query = query + " AND    info_type = '" + infotype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " AND    info_status = '" + status + "' ";
                }
                query = query + " ORDER  BY comp ";
                if (currpage.Equals("1"))
                {
                    query = query + " LIMIT " + int.Parse(currpage) * 10;
                }
                else
                {
                    query = query + " LIMIT " + (int.Parse(currpage) - 1) * 10 + ", " + 10;
                }
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modInfo = new MainModel();
                    modInfo.GetSetcomp = replaceNull(dataReader, "comp");
                    modInfo.GetSetinfo_no = replaceNull(dataReader, "info_no");
                    modInfo.GetSetinfo_type = replaceNull(dataReader, "info_type");
                    modInfo.GetSetinfo_desc = replaceNull(dataReader, "info_description");
                    modInfo.GetSetinfo_status = replaceNull(dataReader, "info_status");
                    modInfo.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInfo.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInfo.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modInfo.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                    lsInfoMod.Add(modInfo);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInfoList: " + e.Message.ToString());
        }
        return lsInfoMod;
    }

    public MainModel getInfoComp(String comp, String infono, String infotype, String status, String createdby, String modifiedby)
    {
        MainModel modInfo = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT comp, info_no, info_type, info_description, info_status, ";
                query = query + "        createdby, createddate, modifiedby, modifieddate ";
                query = query + " FROM   info_comp ";
                query = query + " WHERE  comp IS NOT NULL ";
                query = query + " AND    comp = '" + comp + "' ";
                if (infono.Trim().Length > 0)
                {
                    query = query + " AND    info_no = '" + infono + "' ";
                }
                if (infotype.Trim().Length > 0)
                {
                    query = query + " AND    info_type = '" + infotype + "' ";
                }
                if (status.Trim().Length > 0)
                {
                    query = query + " AND    info_status = '" + status + "' ";
                }
                if (createdby.Trim().Length > 0)
                {
                    query = query + " and  createdby = '" + createdby + "' ";
                }
                if (modifiedby.Trim().Length > 0)
                {
                    query = query + " and  modifiedby = '" + modifiedby + "' ";
                }
                query = query + " ORDER  BY comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modInfo.GetSetcomp = replaceNull(dataReader, "comp");
                    modInfo.GetSetinfo_no = replaceNull(dataReader, "info_no");
                    modInfo.GetSetinfo_type = replaceNull(dataReader, "info_type");
                    modInfo.GetSetinfo_desc = replaceNull(dataReader, "info_description");
                    modInfo.GetSetinfo_status = replaceNull(dataReader, "info_status");
                    modInfo.GetSetcreatedby = replaceNull(dataReader, "createdby");
                    modInfo.GetSetcreateddate = replaceNull(dataReader, "createddate");
                    modInfo.GetSetmodifiedby = replaceNull(dataReader, "modifiedby");
                    modInfo.GetSetmodifieddate = replaceNull(dataReader, "modifieddate");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getInfoComp: " + e.Message.ToString());
        }
        return modInfo;
    }

    public int insertInfoComp(String comp, String infono, String infotype, String infodesc, String status, String createdby)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO info_comp(comp, info_no, info_type, info_description, info_status, createdby, createddate) ";
                query = query + " VALUES(?comp, ?info_no, ?info_type, ?info_description, ?info_status, ?createdby, now()) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?info_no", MySqlDbType.VarChar).Value = infono;
                cmd.Parameters.Add("?info_type", MySqlDbType.VarChar).Value = infotype;
                cmd.Parameters.Add("?info_description", MySqlDbType.VarChar).Value = infodesc;
                cmd.Parameters.Add("?info_status", MySqlDbType.VarChar).Value = status;
                cmd.Parameters.Add("?createdby", MySqlDbType.VarChar).Value = createdby;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
            success = 1;
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-insertInfoComp: " + e.Message.ToString());
        }
        return success;
    }

    public int updateInfoComp(String comp, String infono, String infotype, String infodesc, String userid, String status)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        UPDATE info_comp
                        SET   info_type = ?param_info_type,  info_description = ?param_info_description, info_status = ?param_info_status,
                              modifiedby = ?param_modifiedby, modifieddate = now()
                        WHERE comp = ?param_comp
                        AND info_no = ?param_info_no;
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_info_no", MySqlDbType.VarChar).Value = infono;
                cmd.Parameters.Add("?param_info_type", MySqlDbType.VarChar).Value = infotype;
                cmd.Parameters.Add("?param_info_description", MySqlDbType.VarChar).Value = infodesc;
                cmd.Parameters.Add("?param_info_status", MySqlDbType.VarChar).Value = status;
                cmd.Parameters.Add("?param_modifiedby", MySqlDbType.VarChar).Value = userid;
                cmd.Parameters.Add("?param_comp", MySqlDbType.VarChar).Value = comp;
                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-updateInfoComp: " + e.Message.ToString());
        }
        return success;
    }

    public int deleteInfoComp(String infono)
    {
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";
        int success = 0;

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = @"
                        DELETE FROM info_comp
                        WHERE   info_no = ?param_info_no
                        ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?param_info_no", MySqlDbType.VarChar).Value = infono;
                cmd.ExecuteNonQuery();
                dbConnect.CloseConnection();
                success = 1;
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteInfoComp: " + e.Message.ToString());
        }
        return success;
    }

    #endregion/*** END FOR INFO COMP ***/

    #region/*** BEGIN FOR SLIDER ***/

    public ArrayList getSliderItemList(String comp, String itemno, String itemdesc, String itemcat)
    {
        ArrayList lsItemMod = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.itemno, a.itemdesc, a.itemcat, a.itemtype, a.itemstatus ";
                query = query + " from   item_slider a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  a.itemno = '" + itemno + "' ";
                }
                if (itemdesc.Trim().Length > 0)
                {
                    query = query + " and  upper(a.itemdesc) like '%" + itemdesc + "%' ";
                }
                if (itemcat.Trim().Length > 0)
                {
                    query = query + " and  a.itemcat = '" + itemcat + "' ";
                }
                query = query + " order by a.comp, a.itemno ";
                //WriteToLogFile("MainController-getItemList [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel modItem = new MainModel();
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modItem.GetSetitemstatus = replaceNull(dataReader, "itemstatus");
                    lsItemMod.Add(modItem);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getSliderItemList: " + e.Message.ToString());
        }
        return lsItemMod;
    }

    public String insertSliderItemMaster(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " INSERT INTO item_slider (comp, itemno, itemdesc, itemcat, itemtype, itemstatus) ";
                query = query + " VALUES (?comp, ?itemno, ?itemdesc, ?itemcat, ?itemtype, ?itemstatus) ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?itemcat", MySqlDbType.VarChar).Value = oModItem.GetSetitemcat;
                cmd.Parameters.Add("?itemtype", MySqlDbType.VarChar).Value = oModItem.GetSetitemtype;
                cmd.Parameters.Add("?itemstatus", MySqlDbType.VarChar).Value = oModItem.GetSetitemstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-insertSliderItemMaster: " + e.Message.ToString());
        }
        return result;
    }

    public MainModel getSliderItemDetails(String comp, String itemno)
    {
        MainModel modItem = new MainModel();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT a.comp, a.itemno, a.itemdesc, a.itemcat, a.itemtype, a.itemstatus ";
                query = query + " from   item_slider a ";
                query = query + " WHERE  a.comp is not NULL ";
                if (comp.Trim().Length > 0)
                {
                    query = query + " and  a.comp = '" + comp + "' ";
                }
                if (itemno.Trim().Length > 0)
                {
                    query = query + " and  a.itemno = '" + itemno + "' ";
                }
                query = query + " order by a.comp, a.itemno ";
                //WriteToLogFile("MainController-getItemDetails [SQL]: " + query);
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    modItem.GetSetcomp = replaceNull(dataReader, "comp");
                    modItem.GetSetitemno = replaceNull(dataReader, "itemno");
                    modItem.GetSetitemdesc = replaceNull(dataReader, "itemdesc");
                    modItem.GetSetitemcat = replaceNull(dataReader, "itemcat");
                    modItem.GetSetitemtype = replaceNull(dataReader, "itemtype");
                    modItem.GetSetitemstatus = replaceNull(dataReader, "itemstatus");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getSliderItemDetails: " + e.Message.ToString());
        }
        return modItem;
    }

    public String updateSliderItemMaster(MainModel oModItem)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " UPDATE item_slider ";
                query = query + " SET    itemdesc = ?itemdesc, itemcat = ?itemcat, itemtype = ?itemtype, itemstatus = ?itemstatus ";
                query = query + " WHERE  comp = ?comp AND itemno = ?itemno ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = oModItem.GetSetcomp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = oModItem.GetSetitemno;
                cmd.Parameters.Add("?itemdesc", MySqlDbType.VarChar).Value = oModItem.GetSetitemdesc;
                cmd.Parameters.Add("?itemcat", MySqlDbType.VarChar).Value = oModItem.GetSetitemcat;
                cmd.Parameters.Add("?itemtype", MySqlDbType.VarChar).Value = oModItem.GetSetitemtype;
                cmd.Parameters.Add("?itemstatus", MySqlDbType.VarChar).Value = oModItem.GetSetitemstatus;
                cmd.ExecuteNonQuery();
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-updateSliderItemMaster: " + e.Message.ToString());
        }
        return result;
    }

    public String deleteSlider(String comp, String itemno)
    {
        String result = "Y";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " DELETE FROM item_slider ";
                query = query + " WHERE  itemno = ?itemno ";
                query = query + " AND  comp = ?comp ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                cmd.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = itemno;
                cmd.ExecuteNonQuery();

                query = "";
                query = query + " DELETE FROM item_image ";
                query = query + " WHERE  itemno = ?itemno ";
                query = query + " AND  comp = ?comp ";
                MySqlCommand cmd1 = new MySqlCommand(query, dbConnect.connection);
                cmd1.Parameters.Add("?comp", MySqlDbType.VarChar).Value = comp;
                cmd1.Parameters.Add("?itemno", MySqlDbType.VarChar).Value = itemno;
                cmd1.ExecuteNonQuery();

                WriteToLogFile("MainController-deleteSlider: " + comp + ":" + itemno);
            }
            dbConnect.CloseConnection();
        }
        catch (Exception e)
        {
            result = "N";
            WriteToLogFile("MainController-deleteSlider: " + e.Message.ToString());
        }
        return result;
    }

    #endregion/*** END FOR SLIDER ***/

    /*** BEGIN FOR GENERAL-USED ***/
    public string CheckOnline(string lastaccess)
    {
        string onlinestatus = "0";

        //CultureInfo provider1 = CultureInfo.InvariantCulture;
        //DateTime lastDateTime = DateTime.ParseExact(lastaccess, "MM/dd/yyyy h:mm:ss tt", provider1);
        DateTime lastDateTime = Convert.ToDateTime(lastaccess);
        DateTime currentDateTime = DateTime.Now;
        double noofsec = (currentDateTime - lastDateTime).TotalSeconds;
        if (noofsec < 30) {
            onlinestatus = "1";
        }

        return onlinestatus;
    }

    public string GeneratePassportNo(int length)
    {
        const string valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890%$#@&*!";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < length--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString();
    }

    public string GeneratePassportNo2(int length)
    {
        const string valid = "1234567890";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < length--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString();
    }

    public int getMaxEventId()
    {
        int iMaxEventId = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " select max(mev_id) max_event_id ";
                query = query + " from   tbl_masterevent ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    iMaxEventId = replaceZero(dataReader, "max_event_id");
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getMaxEventId: " + e.Message.ToString());
        }
        return iMaxEventId;
    }
    
    public String getDayFromDate(String sDateIn)
    {

        String sDateOut = "";

        try
        {
            CultureInfo provider1 = CultureInfo.InvariantCulture;
            DateTime dt1 = DateTime.ParseExact(sDateIn, "dd/MM/yyyy", provider1);
            sDateOut = dt1.ToString("dddd");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getDayFromDate: " + e.Message.ToString());
        }
        return sDateOut;
    }

    public String getDateLongFormat(String sDateIn)
    {

        String sDateOut = "";

        try
        {
            CultureInfo provider1 = CultureInfo.InvariantCulture;
            DateTime dt1 = DateTime.ParseExact(sDateIn, "dd/MM/yyyy", provider1);
            sDateOut = dt1.ToString("D");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getDateLongFormat: " + e.Message.ToString());
        }
        return sDateOut;
    }

    public String getDateFormatYYYY_MM_DD(String sDateIn)
    {

        String sDateOut = "";

        try
        {
            CultureInfo provider1 = CultureInfo.InvariantCulture;
            DateTime dt1 = DateTime.ParseExact(sDateIn, "dd/MM/yyyy", provider1);
            sDateOut = dt1.ToString("yyyy-MM-dd");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getDateFormatYYYY_MM_DD: " + e.Message.ToString());
        }
        return sDateOut;
    }
    public String getTimeFormatHH_mm_ss(String sTimeIn)
    {

        String sTimeOut = "";

        try
        {
            CultureInfo provider1 = CultureInfo.InvariantCulture;
            DateTime dt1 = DateTime.ParseExact(sTimeIn, "hh:mm tt", provider1);
            sTimeOut = dt1.ToString("HH:mm:ss");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getTimeFormatHH_mm_ss: " + e.Message.ToString());
        }
        return sTimeOut;
    }

    public int compareTwoDateTime(String sDateTime1, String sDateTime2)
    {
        int compare = 0;

        DateTime datetime1 = Convert.ToDateTime(sDateTime1, ukDtfi);
        DateTime datetime2 = Convert.ToDateTime(sDateTime2, ukDtfi);

        if (datetime2 >= datetime1)
        {
            compare = 1;
        }
        else
        {
            compare = 0;
        }

        return compare;
    }

    public String getNextSecond(String sDateTimeIn, Double dNext)
    {

        String sDateTimeOut = "";

        try
        {
            DateTime datetime = Convert.ToDateTime(sDateTimeIn, ukDtfi);
            sDateTimeOut = datetime.AddSeconds(dNext).ToString("dd-MM-yyyy HH:mm:ss");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextSecond: " + e.Message.ToString());
        }
        return sDateTimeOut;
    }

    public String getNextDay(String sDateIn, Double dNext)
    {

        String sDateOut = "";

        try
        {
            CultureInfo provider1 = CultureInfo.InvariantCulture;
            DateTime dt1 = DateTime.ParseExact(sDateIn, "dd/MM/yyyy", provider1);
            sDateOut = dt1.AddDays(dNext).ToString("dd/MM/yyyy");

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextDay: " + e.Message.ToString());
        }
        return sDateOut;
    }

    public String getNextIDTable(String sTableName, String sComp)
    {
        String sNextId = "";
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                if (sTableName.Equals("busroute"))
                {
                    query = query + " SELECT concat('" + sComp + "BRT',max(cast(substring(routeid,7,length(routeid)) as SIGNED INTEGER))+1) nextid FROM busroute WHERE comp = '" + sComp + "' ";
                }
                else if (sTableName.Equals("location"))
                {
                    query = query + " SELECT concat('" + sComp + "LOC',max(cast(substring(locationid,7,length(locationid)) as SIGNED INTEGER))+1) nextid FROM location WHERE comp = '" + sComp + "' ";
                }
                else if (sTableName.Equals("ticketprice"))
                {
                    query = query + " SELECT concat('" + sComp + "TPR',max(cast(substring(priceid,7,length(priceid)) as SIGNED INTEGER))+1) nextid FROM " + sTableName + " WHERE comp = '" + sComp + "' ";
                }
                if (query.Trim().Length > 0)
                {
                    //WriteToLogFile("MainController-getNextIDTable: " + query);
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    MySqlDataReader dataReader = cmd.ExecuteReader();
                    if (dataReader.Read())
                    {
                        sNextId = replaceNull(dataReader, "nextid");
                    }
                    dataReader.Close();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNextIDTable: " + e.Message.ToString());
        }
        return sNextId;
    }

    public String getMalayDay(String sDay)
    {
        String sMalayDay = sDay;
        if (sDay.ToUpper().Equals("MONDAY"))
        {
            sMalayDay = "ISNIN";
        }
        else if (sDay.ToUpper().Equals("TUESDAY"))
        {
            sMalayDay = "SELASA";
        }
        else if (sDay.ToUpper().Equals("WEDNESDAY"))
        {
            sMalayDay = "RABU";
        }
        else if (sDay.ToUpper().Equals("THURSDAY"))
        {
            sMalayDay = "KHAMIS";
        }
        else if (sDay.ToUpper().Equals("FRIDAY"))
        {
            sMalayDay = "JUMAAT";
        }
        else if (sDay.ToUpper().Equals("SATURDAY"))
        {
            sMalayDay = "SABTU";
        }
        else if (sDay.ToUpper().Equals("SUNDAY"))
        {
            sMalayDay = "AHAD";
        }
        return sMalayDay;
    }

    public String replaceNull(MySqlDataReader oDataReader, String sField)
    {
        if (oDataReader[sField] == DBNull.Value)
        {
            return "";
        }
        else
        {
            if (oDataReader[sField].ToString().Trim().ToUpper().Equals("NULL"))
            {
                return "";
            }
            else
            {
                return oDataReader[sField].ToString();
            }
        }
    }
    
    public String replaceNull(MySqlDataReader oDataReader, int iField)
    {
        if (oDataReader.IsDBNull(iField))
        {
            return "";
        }
        else
        {
            if (oDataReader[iField].ToString().Trim().ToUpper().Equals("NULL"))
            {
                return "";
            }
            else
            {
                return oDataReader[iField].ToString();
            }
        }
    }

    public int replaceZero(MySqlDataReader oDataReader, String sField)
    {
        if (oDataReader[sField] == DBNull.Value)
            return 0;
        else
            return int.Parse(oDataReader[sField].ToString());
    }
    public int replaceZero(MySqlDataReader oDataReader, int iField)
    {
        if (oDataReader.IsDBNull(iField))
            return 0;
        else
            return int.Parse(oDataReader[iField].ToString());
    }

    public double replaceDoubleZero(MySqlDataReader oDataReader, String sField)
    {
        if (oDataReader[sField] == DBNull.Value)
            return 0;
        else
            return double.Parse(oDataReader[sField].ToString());
    }
    public double replaceDoubleZero(MySqlDataReader oDataReader, int iField)
    {
        if (oDataReader.IsDBNull(iField))
            return 0;
        else
            return double.Parse(oDataReader[iField].ToString());
    }
    public decimal replaceDecimalZero(MySqlDataReader oDataReader, String sField)
    {
        if (oDataReader[sField] == DBNull.Value)
            return 0;
        else
            return decimal.Parse(oDataReader[sField].ToString());
    }
    public decimal replaceDecimalZero(MySqlDataReader oDataReader, int iField)
    {
        if (oDataReader.IsDBNull(iField))
            return 0;
        else
            return decimal.Parse(oDataReader[iField].ToString());
    }

    public double RoundCorrect(double d, int decimals)
    {
        double multiplier = Math.Pow(10, decimals);
        if (d < 0)
            multiplier *= -1;
        return Math.Floor((d * multiplier) + 0.5) / multiplier;
    }

    public void WriteToLogFile(string strMessage)
    {
        //Open a file for writing
        //Get a StreamWriter class that can be used to write to the file
        if (strMessage.Length > 0)
        {
            string strlogFile = ConfigurationSettings.AppSettings["LogFile"];
            strlogFile = MyHttpApplication.GetAppDataPath(strlogFile);
            //string strlogFile = sErrorLog;
            if (strlogFile.Trim().Length > 0)
            {
                System.IO.StreamWriter objStreamWriter;
                objStreamWriter = System.IO.File.AppendText(strlogFile);

                objStreamWriter.WriteLine(DateTime.Now.ToString() + ": " + strMessage);

                //Close the stream
                objStreamWriter.Close();
            }
        }
    }

    class MyHttpApplication : HttpApplication
    {
        // of course you can fetch&store the value at Application_Start
        public static string GetAppDataPath(String sLogFile)
        {
            try
            {
                return HttpContext.Current.Server.MapPath(sLogFile);
            }
            catch (Exception e)
            {
                return "";
            }
        }
    }

    public String getDateFormatDD_MM_YYYY(String sDateIn)
    {
        String sDateOut = "";
        if (sDateIn.Length >= 10)
        {
            String day = sDateIn.Substring(0, 2);
            String month = sDateIn.Substring(3, 2);
            String year = sDateIn.Substring(6, 4);
            sDateOut = day + "/" + month + "/" + year;
        }
        else if (sDateIn.Length == 8)
        {
            String day = sDateIn.Substring(0, 2);
            String month = sDateIn.Substring(3, 2);
            String year = sDateIn.Substring(6, 4);
            sDateOut = day + "/" + month + "/" + year;
        }
        else
        {
            sDateOut = sDateIn;
        }
        return sDateOut;
    }

    public ArrayList tokenString(String sStr, String sParse)
    {
        ArrayList lsToken = new ArrayList();
        String s;
        int i, j;
        int nLen;
        nLen = sParse.Length;

        i = 0;
        while (true)
        {
            j = sStr.IndexOf(sParse, i);
            if (j < 0)
            {
                // last
                s = replaceNull(sStr.Substring(i));

                if (s.Length > 0)
                    lsToken.Add(s);

                break;
            }
            s = replaceNull(sStr.Substring(i, j - i));
            lsToken.Add(s);
            i = j + nLen;
        }
        return lsToken;
    }
    public String replaceNull(String sString)
    {
        String _String = "";
        if ((sString == null) || (sString.Trim().Equals("null")))
            _String = "";
        else
            _String = sString.Trim();

        return _String;
    } // replaceNull
    public int replaceIntZero(String sString)
    {
        int _result = 0;
        if ((sString == null) || (sString.Trim().Equals("null")))
            _result = 0;
        else
            _result = int.Parse(sString.Trim());

        return _result;
    } // replaceNull
    public Double replaceDoubleZero(String sString)
    {
        Double _result = 0;
        if ((sString == null) || (sString.Trim().Equals("null")))
            _result = 0;
        else
            _result = Double.Parse(sString.Trim());

        return _result;
    } // replaceNull

    public String RegExReplace(String inputstring, String replaceValue)
    {

        String pattern = @"[\r|\n|\t]";
        //String pattern = @"\t\n\r";

        // Specify your replace string value here.

        String outString = Regex.Replace(inputstring, pattern, replaceValue);

        return outString;

    }

    public String replaceStr(String sStrValue, String sStrOld, String sStrNew)
    {
        String sStrNewValue = sStrValue;
        if (sStrValue.Length > 0 && sStrOld.Length > 0)
        {
            sStrNewValue = sStrValue.Replace(sStrOld, sStrNew);
        }
        return sStrNewValue;
    }

    public String isContains(ArrayList arrayString, String submoduleid)
    {
        String display = "none";
        bool contains = false;
        if (arrayString.Count > 0)
        {
            contains = arrayString.Contains(submoduleid);
        }
        if (contains)
        {
            display = "";
        }
        return display;
    }

    public void Alert(System.Web.UI.Page pg, string msg)
    {
        msg = msg.Replace("\n", " ");
        msg = msg.Replace("\t", " ");
        msg = msg.Replace("'", " ");

        string strScript = "<script language='JavaScript'>";
        //DateTime dt DateTime.Now;
        strScript += "alert('" + msg + "');";
        strScript += "<" + "/script>";
        Random rand = new Random();
        //if (!pg.IsStartupScriptRegistered("clientScript"))					
        //pg.RegisterStartupScript("Alert" + rand.Next(1, 50000).ToString(), strScript);
        pg.ClientScript.RegisterStartupScript(GetType(), "showalert", strScript, true);

    }

    public int GetWeekOfMonth(DateTime date)
    {
        DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

        while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
            date = date.AddDays(1);

        return (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;
    }

    public Image resizeImage(Image imgToResize, Size size)
    {
        int sourceWidth = imgToResize.Width;
        int sourceHeight = imgToResize.Height;

        float nPercent = 0;
        float nPercentW = 0;
        float nPercentH = 0;

        if (sourceWidth > size.Width || sourceHeight > size.Height)
        {
            if (sourceWidth > sourceHeight)
            {
                size.Width = size.Width;
                size.Height = sourceHeight * size.Width / sourceWidth;
            }
            else if (sourceHeight > sourceWidth)
            {
                size.Height = size.Height;
                size.Width = sourceWidth * size.Height / sourceHeight;
            }
            else
            {
                size.Width = size.Width;
                size.Height = size.Height;
            }
            nPercentW = ((float)size.Width / (float)sourceWidth);
            nPercentH = ((float)size.Height / (float)sourceHeight);

            if (nPercentH < nPercentW)
                nPercent = nPercentH;
            else
                nPercent = nPercentW;
        }
        else
        {
            nPercent = 1;
        }

        int destWidth = (int)(sourceWidth * nPercent);
        int destHeight = (int)(sourceHeight * nPercent);

        Bitmap b = new Bitmap(destWidth, destHeight);
        Graphics g = Graphics.FromImage((Image)b);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;

        g.DrawImage(imgToResize, 0, 0, destWidth, destHeight);
        g.Dispose();

        return (Image)b;
    }

    private ImageCodecInfo getEncoderInfo(string mimeType)
    {
        // Get image codecs for all image formats
        ImageCodecInfo[] codecs = ImageCodecInfo.GetImageEncoders();

        // Find the correct image codec
        for (int i = 0; i < codecs.Length; i++)
            if (codecs[i].MimeType == mimeType)
                return codecs[i];
        return null;
    }

    /// <summary>
    /// Calculates the distance between two points.
    /// </summary>
    /// <param name="firstCoordinate">The first coordinate.</param>
    /// <param name="secondCoordinate">The second coordinate.</param>
    /// <returns>Distance between points in meters</returns>
    public double CalculateDistance(GeoCoordinate firstCoordinate, GeoCoordinate secondCoordinate)
    {
        double R = 6371.0; // km
        double lon1 = DegToRad(firstCoordinate.Longitude);
        double lat1 = DegToRad(firstCoordinate.Latitude);

        double lon2 = DegToRad(secondCoordinate.Longitude);
        double lat2 = DegToRad(secondCoordinate.Latitude);

        double dLat = lat2 - lat1;
        double dLon = lon2 - lon1;

        double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Sin(dLon / 2) * Math.Sin(dLon / 2) * Math.Cos(lat1) * Math.Cos(lat2);
        double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c * 1000;
    }

    /// <summary>
    /// Calculates the middle point coordinate.
    /// </summary>
    /// <param name="firstCoordinate">The first coordinate.</param>
    /// <param name="secondCoordinate">The second coordinate.</param>
    /// <returns>Middle point coordinate</returns>
    public GeoCoordinate CalculateMidPoint(GeoCoordinate firstCoordinate, GeoCoordinate secondCoordinate)
    {
        double lon1 = DegToRad(firstCoordinate.Longitude);
        double lat1 = DegToRad(firstCoordinate.Latitude);

        double lon2 = DegToRad(secondCoordinate.Longitude);
        double lat2 = DegToRad(secondCoordinate.Latitude);

        double deltaLong = lon2 - lon1;

        double Bx = Math.Cos(lat2) * Math.Cos(deltaLong);
        double By = Math.Cos(lat2) * Math.Sin(deltaLong);
        double lat3 = RadToDeg(Math.Atan2(Math.Sin(lat1) + Math.Sin(lat2), Math.Sqrt((Math.Cos(lat1) + Bx) * (Math.Cos(lat1) + Bx) + By * By)));
        double lon3 = RadToDeg(lon1 + Math.Atan2(By, Math.Cos(lat1) + Bx));

        return new GeoCoordinate(lat3, lon3);
    }

    /// <summary>
    /// Converts radians to degrees
    /// </summary>
    /// <param name="radians">The radians.</param>
    /// <returns>The degrees.</returns>
    private static double RadToDeg(double radians)
    {
        return radians * (180 / Math.PI);
    }

    /// <summary>
    /// Converts degrees to radians
    /// </summary>
    /// <param name="degrees">The degrees.</param>
    /// <returns>The radians</returns>
    private static double DegToRad(double degrees)
    {
        return degrees * (Math.PI / 180);
    }

    public ArrayList getNearestSensors(GeoCoordinate firstCoordinate, double distance)
    {
        ArrayList lsNearestSensors = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT *, ( 3959 * acos( cos( radians(" + firstCoordinate.Latitude + ") ) * cos( radians( sensor_latitude ) ) * cos( radians( sensor_longitude ) - radians(" + firstCoordinate.Longitude + ") ) + sin( radians("+firstCoordinate.Latitude+") ) * sin( radians( sensor_latitude ) ) ) ) AS distance ";
                query = query + " FROM sensor_details ";
                query = query + " HAVING distance < " + distance;
                //query = query + " ORDER BY sensor_road_id, sensor_road_path, distance ";
                query = query + " ORDER BY distance ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();
                    /*
                    oMainMod.GetSetSENSOR_ID = replaceNull(dataReader, "sensor_id");
                    oMainMod.GetSetSENSOR_SERIAL = replaceNull(dataReader, "sensor_serial");
                    oMainMod.GetSetSENSOR_EXITNO = replaceNull(dataReader, "sensor_exit_no");
                    oMainMod.GetSetSENSOR_HIWAYEXIT = replaceNull(dataReader, "sensor_exit_desc");
                    oMainMod.GetSetSENSOR_LATITUDE = replaceNull(dataReader, "sensor_latitude");
                    oMainMod.GetSetSENSOR_LONGITUDE = replaceNull(dataReader, "sensor_longitude");
                    oMainMod.GetSetSENSOR_ROADID = replaceNull(dataReader, "sensor_road_id");
                    oMainMod.GetSetSENSOR_ROADPATH = replaceNull(dataReader, "sensor_road_path");
                    oMainMod.GetSetSENSOR_DISTANCE = replaceNull(dataReader, "distance");
                    */
                    lsNearestSensors.Add(oMainMod);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getNearestSensors: " + e.Message.ToString());
        }

        return lsNearestSensors;
    }

    public String GetDistance(double startLatitude, double endLatitude, double startLongitude, double endLongitude)
    {
        String xmlstr = "";
        try
        {
            string apiUrl = "https://maps.googleapis.com/maps/api/distancematrix/xml?origins={0},{1}&destinations={2},{3}&mode=driving&sensor=false";
            apiUrl = string.Format(apiUrl,
                startLatitude, startLongitude,
                endLatitude.ToString(),
                endLongitude.ToString()
                );
            WebRequest request = HttpWebRequest.Create(apiUrl);
            WebResponse response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream());
            System.Web.Script.Serialization.JavaScriptSerializer parser = new System.Web.Script.Serialization.JavaScriptSerializer();
            string responseStringData = reader.ReadToEnd();
            xmlstr = responseStringData;

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-GetDistance: " + e.Message.ToString());
        }
        return xmlstr;
    }
    
    public ArrayList getListRoadPolyLine(String road_id, String road_path)
    {
        ArrayList lsListPolyline = new ArrayList();
        ArrayList lsRoadPolyline = getRoadPolyline(road_id, road_path);
        for (int i = 0; i < lsRoadPolyline.Count; i++)
        {
            MainModel oPolyline = (MainModel)lsRoadPolyline[i];
            String xmlString = GetDirection(oPolyline.GetSetGOE_LOC_FROM.Latitude,oPolyline.GetSetGOE_LOC_TO.Latitude,oPolyline.GetSetGOE_LOC_FROM.Longitude,oPolyline.GetSetGOE_LOC_TO.Longitude);
            if (xmlString.Trim().Length > 0)
            {
                GeoCoordinate poly_location = null;
                string lat = "";
                string lng = "";
                
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(xmlString);

                XmlNodeList itemNodes = doc.SelectNodes("/DirectionsResponse/route/leg/step");
                foreach (XmlNode itemNode in itemNodes)
                {
                    /*
                    //StartPoint
                    XmlNode nodeStart = itemNode.SelectSingleNode("start_location");
                    lat = nodeStart["lat"].InnerText;
                    lng = nodeStart["lng"].InnerText;
                    poly_location = new GeoCoordinate(double.Parse(lat), double.Parse(lng));
                    lsListPolyline.Add(poly_location);
                    */
                    //Points in the middle
                    XmlNode nodePoint = itemNode.SelectSingleNode("polyline");
                    String strPoint = nodePoint["points"].InnerText;
                    IEnumerable<GeoCoordinate> result = DecodePolyPoints(strPoint);
                    foreach (GeoCoordinate value in result)
                    {
                        lsListPolyline.Add(value);
                    }
                    /*
                    //FinishPoint
                    XmlNode nodeEnd = itemNode.SelectSingleNode("end_location");
                    lat = nodeStart["lat"].InnerText;
                    lng = nodeStart["lng"].InnerText;
                    poly_location = new GeoCoordinate(double.Parse(lat), double.Parse(lng));
                    lsListPolyline.Add(poly_location);
                    */
                }

                /*
                //StartPoint
                XmlNode nodeStart = doc.DocumentElement.SelectSingleNode("/DirectionsResponse/route/leg/step/start_location");
                lat = nodeStart["lat"].InnerText;
                lng = nodeStart["lng"].InnerText;
                poly_location = new GeoCoordinate(double.Parse(lat), double.Parse(lng));
                lsListPolyline.Add(poly_location);
                */
                /*
                //Points in the middle
                XmlNode nodePoint = doc.DocumentElement.SelectSingleNode("/DirectionsResponse/route/leg/step/polyline");
                String strPoint = nodePoint["points"].InnerText;
                IEnumerable<GeoCoordinate> result = DecodePolyPoints(strPoint);
                foreach (GeoCoordinate value in result)
                {
                    lsListPolyline.Add(value);
                }
                */
                /*
                //FinishPoint
                XmlNode nodeEnd = doc.DocumentElement.SelectSingleNode("/DirectionsResponse/route/leg/step/end_location");
                lat = nodeStart["lat"].InnerText;
                lng = nodeStart["lng"].InnerText;
                poly_location = new GeoCoordinate(double.Parse(lat), double.Parse(lng));
                lsListPolyline.Add(poly_location);
                */
            }
        }

        return lsListPolyline;
    }

    public IEnumerable<GeoCoordinate> DecodePolyPoints(string encodedPoints)
    {
        if (string.IsNullOrEmpty(encodedPoints))
            throw new ArgumentNullException("encodedPoints");

        char[] polylineChars = encodedPoints.ToCharArray();
        int index = 0;

        int currentLat = 0;
        int currentLng = 0;
        int next5bits;
        int sum;
        int shifter;

        while (index < polylineChars.Length)
        {
            // calculate next latitude
            sum = 0;
            shifter = 0;
            do
            {
                next5bits = (int)polylineChars[index++] - 63;
                sum |= (next5bits & 31) << shifter;
                shifter += 5;
            } while (next5bits >= 32 && index < polylineChars.Length);

            if (index >= polylineChars.Length)
                break;

            currentLat += (sum & 1) == 1 ? ~(sum >> 1) : (sum >> 1);

            //calculate next longitude
            sum = 0;
            shifter = 0;
            do
            {
                next5bits = (int)polylineChars[index++] - 63;
                sum |= (next5bits & 31) << shifter;
                shifter += 5;
            } while (next5bits >= 32 && index < polylineChars.Length);

            if (index >= polylineChars.Length && next5bits >= 32)
                break;

            currentLng += (sum & 1) == 1 ? ~(sum >> 1) : (sum >> 1);

            yield return new GeoCoordinate
            {
                Latitude = Convert.ToDouble(currentLat) / 1E5,
                Longitude = Convert.ToDouble(currentLng) / 1E5
            };
        }
    }

    public static string Encode(IEnumerable<GeoCoordinate> points)
    {
        var str = new StringBuilder();

        var encodeDiff = (Action<int>)(diff =>
        {
            int shifted = diff << 1;
            if (diff < 0)
                shifted = ~shifted;
            int rem = shifted;
            while (rem >= 0x20)
            {
                str.Append((char)((0x20 | (rem & 0x1f)) + 63));
                rem >>= 5;
            }
            str.Append((char)(rem + 63));
        });

        int lastLat = 0;
        int lastLng = 0;
        foreach (var point in points)
        {
            int lat = (int)Math.Round(point.Latitude * 1E5);
            int lng = (int)Math.Round(point.Longitude * 1E5);
            encodeDiff(lat - lastLat);
            encodeDiff(lng - lastLng);
            lastLat = lat;
            lastLng = lng;
        }
        return str.ToString();
    }

    public ArrayList getRoadPolyline(String road_id, String road_path)
    {
        ArrayList lsRoadPolyline = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                query = "";
                query = query + " SELECT road_poly_from_lat, road_poly_from_long, road_poly_to_lat, road_poly_to_long ";
                query = query + " FROM   road_polyline ";
                query = query + " WHERE  road_poly_id = '" + road_id + "' ";
                query = query + " AND    road_poly_path = '" + road_path + "' ";
                query = query + " ORDER  BY road_poly_seq ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    MainModel oMainMod = new MainModel();
                    oMainMod.GetSetGOE_LOC_FROM.Latitude = replaceDoubleZero(dataReader, "road_poly_from_lat");
                    oMainMod.GetSetGOE_LOC_FROM.Longitude = replaceDoubleZero(dataReader, "road_poly_from_long");
                    oMainMod.GetSetGOE_LOC_TO.Latitude = replaceDoubleZero(dataReader, "road_poly_to_lat");
                    oMainMod.GetSetGOE_LOC_TO.Longitude = replaceDoubleZero(dataReader, "road_poly_to_long");
                    lsRoadPolyline.Add(oMainMod);
                }
                dataReader.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getRoadPolyline: " + e.Message.ToString());
        }

        return lsRoadPolyline;
    }

    public String GetDirection(double startLatitude, double endLatitude, double startLongitude, double endLongitude)
    {
        String xmlstr = "";
        try
        {
            string apiUrl = "http://maps.googleapis.com/maps/api/directions/xml?origin={0},{1}&destination={2},{3}&sensor=false&units=metric&mode=driving";
            apiUrl = string.Format(apiUrl,
                startLatitude, startLongitude,
                endLatitude.ToString(),
                endLongitude.ToString()
                );
            WebRequest request = HttpWebRequest.Create(apiUrl);
            WebResponse response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream());
            System.Web.Script.Serialization.JavaScriptSerializer parser = new System.Web.Script.Serialization.JavaScriptSerializer();
            string responseStringData = reader.ReadToEnd();
            xmlstr = responseStringData;

        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-GetDirection: " + e.Message.ToString());
        }
        return xmlstr;
    }

    public void GetTrafficBuzzSpeed()
    {
        try
        {
            string apiUrl = "http://trafficbuzz.com.my/SpeedInfo.xml";
            WebRequest request = HttpWebRequest.Create(apiUrl);
            WebResponse response = request.GetResponse();
            StreamReader reader = new StreamReader(response.GetResponseStream());
            System.Web.Script.Serialization.JavaScriptSerializer parser = new System.Web.Script.Serialization.JavaScriptSerializer();
            string responseStringData = reader.ReadToEnd();

            if (responseStringData.Trim().Length > 0) 
            { 
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(responseStringData);

                XmlNodeList itemNodes = doc.SelectNodes("/speedInfo/Speeds/DeviceData");
                foreach (XmlNode itemNode in itemNodes)
                {
                    String node_id = itemNode["Id"].InnerText;
                    XmlNode nodeStart = itemNode.SelectSingleNode("Lane");
                    String node_speed = nodeStart["Speed"].InnerText;
                    //updateTrafficSpeed(node_id, node_speed);
                }
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-GetTrafficBuzzSpeed: " + e.Message.ToString());
        }
    }

    public void storeDirectionPoint(String temp_id, GeoCoordinate temp_start, GeoCoordinate temp_finish, GeoCoordinate nearest_sensor, String type, String sensor_id)
    {

        ArrayList lsDirectionPoint = new ArrayList();
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (type.Equals("0") || type.Equals("2"))
            {
                String xmlString = GetDirection(temp_start.Latitude, temp_finish.Latitude, temp_start.Longitude, temp_finish.Longitude);
                if (xmlString.Trim().Length > 0)
                {
                    XmlDocument doc = new XmlDocument();
                    doc.LoadXml(xmlString);

                    XmlNodeList itemNodes = doc.SelectNodes("/DirectionsResponse/route/leg/step");
                    foreach (XmlNode itemNode in itemNodes)
                    {
                        //Points in the middle
                        XmlNode nodePoint = itemNode.SelectSingleNode("polyline");
                        String strPoint = nodePoint["points"].InnerText;
                        IEnumerable<GeoCoordinate> result = DecodePolyPoints(strPoint);
                        foreach (GeoCoordinate value in result)
                        {
                            lsDirectionPoint.Add(value);
                        }
                    }

                }
            }
            if (dbConnect.OpenConnection() == true)
            {
                if (type.Equals("1"))
                {
                    //store nearest sensor
                    query = "";
                    query = query + " INSERT INTO nearest_sensor (nearest_latitude, nearest_longitude, nearest_id, nearest_sensor_id) ";
                    query = query + " VALUES (?nearest_latitude, ?nearest_longitude, ?nearest_id, ?nearest_sensor_id) ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?nearest_latitude", MySqlDbType.Double).Value = nearest_sensor.Latitude;
                    cmd.Parameters.Add("?nearest_longitude", MySqlDbType.Double).Value = nearest_sensor.Longitude;
                    cmd.Parameters.Add("?nearest_id", MySqlDbType.VarChar).Value = temp_id;
                    cmd.Parameters.Add("?nearest_sensor_id", MySqlDbType.VarChar).Value = sensor_id;
                    cmd.ExecuteNonQuery();
                }

                if (type.Equals("0"))
                {
                    //store direction point
                    for (int i = 0; i < lsDirectionPoint.Count; i++)
                    {
                        GeoCoordinate temp_Geo = (GeoCoordinate)lsDirectionPoint[i];

                        query = "";
                        query = query + " INSERT INTO direction_point (direction_latitude, direction_longitude, direction_id, direction_sensor_id) ";
                        query = query + " VALUES (?direction_latitude, ?direction_longitude, ?direction_id, ?direction_sensor_id) ";
                        MySqlCommand cmd2 = new MySqlCommand(query, dbConnect.connection);
                        cmd2.Parameters.Add("?direction_latitude", MySqlDbType.Double).Value = temp_Geo.Latitude;
                        cmd2.Parameters.Add("?direction_longitude", MySqlDbType.Double).Value = temp_Geo.Longitude;
                        cmd2.Parameters.Add("?direction_id", MySqlDbType.VarChar).Value = temp_id;
                        cmd2.Parameters.Add("?direction_sensor_id", MySqlDbType.VarChar).Value = sensor_id;
                        cmd2.ExecuteNonQuery();
                    }
                }

                if (type.Equals("2"))
                {
                    //store direction point
                    for (int i = 0; i < lsDirectionPoint.Count; i++)
                    {
                        GeoCoordinate temp_Geo = (GeoCoordinate)lsDirectionPoint[i];

                        query = "";
                        query = query + " INSERT INTO nearest_direction_point (nearest_direction_latitude, nearest_direction_longitude, nearest_direction_id, nearest_direction_sensor_id) ";
                        query = query + " VALUES (?nearest_direction_latitude, ?nearest_direction_longitude, ?nearest_direction_id, ?nearest_direction_sensor_id) ";
                        MySqlCommand cmd2 = new MySqlCommand(query, dbConnect.connection);
                        cmd2.Parameters.Add("?nearest_direction_latitude", MySqlDbType.Double).Value = temp_Geo.Latitude;
                        cmd2.Parameters.Add("?nearest_direction_longitude", MySqlDbType.Double).Value = temp_Geo.Longitude;
                        cmd2.Parameters.Add("?nearest_direction_id", MySqlDbType.VarChar).Value = temp_id;
                        cmd2.Parameters.Add("?nearest_direction_sensor_id", MySqlDbType.VarChar).Value = sensor_id;
                        cmd2.ExecuteNonQuery();
                    }
                }

                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-storeDirectionPoint: " + e.Message.ToString());
        }
    }

    public void deleteDirectionPoint(String temp_id, String type)
    {

        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {

            if (dbConnect.OpenConnection() == true)
            {
                if (type.Equals("0"))
                {
                    query = "";
                    query = query + " DELETE FROM direction_point ";
                    query = query + " WHERE  direction_id = ?direction_id ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?direction_id", MySqlDbType.VarChar).Value = temp_id;
                    cmd.ExecuteNonQuery();
                }
                if (type.Equals("2"))
                {
                    query = "";
                    query = query + " DELETE FROM nearest_direction_point ";
                    query = query + " WHERE  nearest_direction_id = ?nearest_direction_id ";
                    MySqlCommand cmd2 = new MySqlCommand(query, dbConnect.connection);
                    cmd2.Parameters.Add("?nearest_direction_id", MySqlDbType.VarChar).Value = temp_id;
                    cmd2.ExecuteNonQuery();
                }
                else if (type.Equals("1"))
                {
                    query = "";
                    query = query + " DELETE FROM nearest_sensor ";
                    query = query + " WHERE  nearest_id = ?nearest_id ";
                    MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                    cmd.Parameters.Add("?nearest_id", MySqlDbType.VarChar).Value = temp_id;
                    cmd.ExecuteNonQuery();
                }
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-deleteDirectionPoint: " + e.Message.ToString());
        }
    }

    public double getClashDirectionPoints(String temp_id, GeoCoordinate nearest_sensor)
    {
        double similarity = 1;
        double countSimilar = 0;
        double countNearestDirection = 0;
        DBConnect dbConnect = new DBConnect(sErrorLog);
        String query = "";

        try
        {
            if (dbConnect.OpenConnection() == true)
            {
                /*
                query = "";
                query = query + " SELECT nearest_sensor.*, direction_point.*, ( 3959 * acos( cos( radians(nearest_sensor.nearest_latitude) ) * cos( radians( direction_point.direction_latitude ) ) * cos( radians( direction_point.direction_longitude ) - radians(nearest_sensor.nearest_longitude) ) + sin( radians(nearest_sensor.nearest_latitude) ) * sin( radians( direction_point.direction_latitude ) ) ) ) AS distance ";
                query = query + " FROM   nearest_sensor, direction_point ";
                query = query + " WHERE  nearest_sensor.nearest_latitude <> " + nearest_sensor.Latitude;
                query = query + " AND    nearest_sensor.nearest_longitude <> " + nearest_sensor.Longitude;
                query = query + " AND    nearest_sensor.nearest_id = direction_point.direction_id ";
                query = query + " HAVING distance < " + distance;
                query = query + " ORDER BY distance ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                while (dataReader.Read())
                {
                    GeoCoordinate clash_sensor = new GeoCoordinate();
                    clash_sensor.Latitude = replaceDoubleZero(dataReader, "nearest_latitude");
                    clash_sensor.Longitude = replaceDoubleZero(dataReader, "nearest_longitude");
                    lsClashSensors.Add(clash_sensor);
                }
                */


                query = "";
                query = query + " SELECT count(*) as count_row ";
                query = query + " FROM   nearest_direction_point, direction_point ";
                query = query + " WHERE  nearest_direction_point.nearest_direction_latitude = direction_point.direction_latitude ";
                query = query + " AND    nearest_direction_point.nearest_direction_longitude = direction_point.direction_longitude ";
                query = query + " AND    nearest_direction_point.nearest_direction_id = direction_point.direction_id ";
                query = query + " AND    nearest_direction_point.nearest_direction_id = '" + temp_id + "' ";
                MySqlCommand cmd = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader = cmd.ExecuteReader();
                if (dataReader.Read())
                {
                    countSimilar = replaceDoubleZero(dataReader, "count_row");
                }
                dataReader.Close();

                query = "";
                query = query + " SELECT count(*) as count_row ";
                query = query + " FROM   nearest_direction_point ";
                query = query + " WHERE  nearest_direction_point.nearest_direction_id = '" + temp_id +"' ";
                MySqlCommand cmd2 = new MySqlCommand(query, dbConnect.connection);
                MySqlDataReader dataReader2 = cmd2.ExecuteReader();
                if (dataReader2.Read())
                {
                    countNearestDirection = replaceDoubleZero(dataReader2, "count_row");
                }
                if (countSimilar > 0 && countNearestDirection > 0)
                {
                    similarity = countSimilar / countNearestDirection;
                }
                dataReader2.Close();
                dbConnect.CloseConnection();
            }
        }
        catch (Exception e)
        {
            WriteToLogFile("MainController-getClashDirectionPoints: " + e.Message.ToString());
        }

        return similarity;
    }

    /*** END FOR GENERAL-USED ***/

    public void Close()
    {

    }

}