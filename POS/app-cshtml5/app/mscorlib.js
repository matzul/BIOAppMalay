/* Generated by JSIL v0.8.2 build 30747. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm_mscorlib = JSIL.DeclareAssembly("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
/* interface Microsoft.Win32.IAssemblyEnum */ 

JSIL.MakeInterface(
  "Microsoft.Win32.IAssemblyEnum", false, [], function ($) {
  }, []);

/* interface Microsoft.Win32.IApplicationContext */ 

JSIL.MakeInterface(
  "Microsoft.Win32.IApplicationContext", false, [], function ($) {
  }, []);

/* interface Microsoft.Win32.IAssemblyName */ 

JSIL.MakeInterface(
  "Microsoft.Win32.IAssemblyName", false, [], function ($) {
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.ValueType");

/* struct Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA */ 

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "fileAttributes", $.Int32); 
    $['Field']({Static:false, Public:false}, "ftCreationTime", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+FILE_TIME")); 
    $['Field']({Static:false, Public:false}, "ftLastAccessTime", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+FILE_TIME")); 
    $['Field']({Static:false, Public:false}, "ftLastWriteTime", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+FILE_TIME")); 
    $['Field']({Static:false, Public:false}, "fileSizeHigh", $.Int32); 
    $['Field']({Static:false, Public:false}, "fileSizeLow", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.Win32Native+FILE_TIME */ 

(function FILE_TIME$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.Win32Native+FILE_TIME", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "ftTimeLow", $.UInt32); 
    $['Field']({Static:false, Public:false}, "ftTimeHigh", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.Win32Native+KeyEventRecord */ 

(function KeyEventRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.Win32Native+KeyEventRecord", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "keyDown", $.Boolean); 
    $['Field']({Static:false, Public:false}, "repeatCount", $.Int16); 
    $['Field']({Static:false, Public:false}, "virtualKeyCode", $.Int16); 
    $['Field']({Static:false, Public:false}, "virtualScanCode", $.Int16); 
    $['Field']({Static:false, Public:false}, "uChar", $.Char); 
    $['Field']({Static:false, Public:false}, "controlKeyState", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.Win32Native+InputRecord */ 

(function InputRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.Win32Native+InputRecord", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "eventType", $.Int16); 
    $['Field']({Static:false, Public:false}, "keyEvent", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+KeyEventRecord")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.InteropServices");
JSIL.DeclareNamespace("System.Runtime.ConstrainedExecution");
JSIL.MakeTypeAlias($jsilcore, "System.Object");

/* class System.Runtime.ConstrainedExecution.CriticalFinalizerObject */ 

(function CriticalFinalizerObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.ConstrainedExecution.CriticalFinalizerObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InteropServices.SafeHandle */ 

(function SafeHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "System.Runtime.InteropServices.SafeHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "handle", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "_state", $.Int32); 
    $['Field']({Static:false, Public:false}, "_ownsHandle", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_fullyInitialized", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */ 

(function SafeHandleZeroOrMinusOneIsInvalid$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeHandles.SafeFileHandle */ 

(function SafeFileHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeFileHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Runtime");
JSIL.DeclareNamespace("Microsoft.Runtime.Hosting");
/* interface Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr */ 

JSIL.MakeInterface(
  "Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr", false, [], function ($) {
  }, []);

/* interface Microsoft.Runtime.Hosting.IClrStrongName */ 

JSIL.MakeInterface(
  "Microsoft.Runtime.Hosting.IClrStrongName", false, [], function ($) {
  }, []);

JSIL.DeclareNamespace("Windows");
JSIL.DeclareNamespace("Windows.Foundation");
JSIL.DeclareNamespace("Windows.Foundation.Diagnostics");
/* interface Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics */ 

JSIL.MakeInterface(
  "Windows.Foundation.Diagnostics.IAsyncCausalityTracerStatics", false, [], function ($) {
  }, []);

/* interface Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs */ 

JSIL.MakeInterface(
  "Windows.Foundation.Diagnostics.ITracingStatusChangedEventArgs", false, [], function ($) {
    $.Property({}, "Enabled");
    $.Property({}, "TraceLevel");
  }, []);

/* interface System.ICloneable */ 

JSIL.MakeInterface(
  "System.ICloneable", true, [], function ($) {
  }, []);

/* delegate System.Action`1 */ 

JSIL.MakeDelegate("System.Action`1", true, ["in T"], 
  new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Action`1").in()]));

/* delegate System.Action */ 

JSIL.MakeDelegate("System.Action", true, [], 
  JSIL.MethodSignature.Void);

/* delegate System.Action`2 */ 

JSIL.MakeDelegate("System.Action`2", true, ["in T1", "in T2"], 
  new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T1", "System.Action`2").in(), new JSIL.GenericParameter("T2", "System.Action`2").in()]));

/* delegate System.Action`3 */ 

JSIL.MakeDelegate("System.Action`3", true, ["in T1", "in T2", "in T3"], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`3").in(), new JSIL.GenericParameter("T2", "System.Action`3").in(), 
      new JSIL.GenericParameter("T3", "System.Action`3").in()
    ]));

/* delegate System.Action`4 */ 

JSIL.MakeDelegate("System.Action`4", true, ["in T1", "in T2", "in T3", "in T4"], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`4").in(), new JSIL.GenericParameter("T2", "System.Action`4").in(), 
      new JSIL.GenericParameter("T3", "System.Action`4").in(), new JSIL.GenericParameter("T4", "System.Action`4").in()
    ]));

/* delegate System.Func`1 */ 

JSIL.MakeDelegate("System.Func`1", true, ["out TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`1").out(), null));

/* delegate System.Func`2 */ 

JSIL.MakeDelegate("System.Func`2", true, ["in T", "out TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`2").out(), [new JSIL.GenericParameter("T", "System.Func`2").in()]));

/* delegate System.Func`3 */ 

JSIL.MakeDelegate("System.Func`3", true, ["in T1", "in T2", "out TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`3").out(), [new JSIL.GenericParameter("T1", "System.Func`3").in(), new JSIL.GenericParameter("T2", "System.Func`3").in()]));

/* delegate System.Func`4 */ 

JSIL.MakeDelegate("System.Func`4", true, ["in T1", "in T2", "in T3", "out TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`4").out(), [
      new JSIL.GenericParameter("T1", "System.Func`4").in(), new JSIL.GenericParameter("T2", "System.Func`4").in(), 
      new JSIL.GenericParameter("T3", "System.Func`4").in()
    ]));

/* delegate System.Func`5 */ 

JSIL.MakeDelegate("System.Func`5", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`5").out(), [
      new JSIL.GenericParameter("T1", "System.Func`5").in(), new JSIL.GenericParameter("T2", "System.Func`5").in(), 
      new JSIL.GenericParameter("T3", "System.Func`5").in(), new JSIL.GenericParameter("T4", "System.Func`5").in()
    ]));

/* delegate System.Action`5 */ 

JSIL.MakeDelegate("System.Action`5", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`5").in(), new JSIL.GenericParameter("T2", "System.Action`5").in(), 
      new JSIL.GenericParameter("T3", "System.Action`5").in(), new JSIL.GenericParameter("T4", "System.Action`5").in(), 
      new JSIL.GenericParameter("T5", "System.Action`5").in()
    ]));

/* delegate System.Action`6 */ 

JSIL.MakeDelegate("System.Action`6", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`6").in(), new JSIL.GenericParameter("T2", "System.Action`6").in(), 
      new JSIL.GenericParameter("T3", "System.Action`6").in(), new JSIL.GenericParameter("T4", "System.Action`6").in(), 
      new JSIL.GenericParameter("T5", "System.Action`6").in(), new JSIL.GenericParameter("T6", "System.Action`6").in()
    ]));

/* delegate System.Action`7 */ 

JSIL.MakeDelegate("System.Action`7", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`7").in(), new JSIL.GenericParameter("T2", "System.Action`7").in(), 
      new JSIL.GenericParameter("T3", "System.Action`7").in(), new JSIL.GenericParameter("T4", "System.Action`7").in(), 
      new JSIL.GenericParameter("T5", "System.Action`7").in(), new JSIL.GenericParameter("T6", "System.Action`7").in(), 
      new JSIL.GenericParameter("T7", "System.Action`7").in()
    ]));

/* delegate System.Action`8 */ 

JSIL.MakeDelegate("System.Action`8", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`8").in(), new JSIL.GenericParameter("T2", "System.Action`8").in(), 
      new JSIL.GenericParameter("T3", "System.Action`8").in(), new JSIL.GenericParameter("T4", "System.Action`8").in(), 
      new JSIL.GenericParameter("T5", "System.Action`8").in(), new JSIL.GenericParameter("T6", "System.Action`8").in(), 
      new JSIL.GenericParameter("T7", "System.Action`8").in(), new JSIL.GenericParameter("T8", "System.Action`8").in()
    ]));

/* delegate System.Func`6 */ 

JSIL.MakeDelegate("System.Func`6", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`6").out(), [
      new JSIL.GenericParameter("T1", "System.Func`6").in(), new JSIL.GenericParameter("T2", "System.Func`6").in(), 
      new JSIL.GenericParameter("T3", "System.Func`6").in(), new JSIL.GenericParameter("T4", "System.Func`6").in(), 
      new JSIL.GenericParameter("T5", "System.Func`6").in()
    ]));

/* delegate System.Func`7 */ 

JSIL.MakeDelegate("System.Func`7", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`7").out(), [
      new JSIL.GenericParameter("T1", "System.Func`7").in(), new JSIL.GenericParameter("T2", "System.Func`7").in(), 
      new JSIL.GenericParameter("T3", "System.Func`7").in(), new JSIL.GenericParameter("T4", "System.Func`7").in(), 
      new JSIL.GenericParameter("T5", "System.Func`7").in(), new JSIL.GenericParameter("T6", "System.Func`7").in()
    ]));

/* delegate System.Func`8 */ 

JSIL.MakeDelegate("System.Func`8", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`8").out(), [
      new JSIL.GenericParameter("T1", "System.Func`8").in(), new JSIL.GenericParameter("T2", "System.Func`8").in(), 
      new JSIL.GenericParameter("T3", "System.Func`8").in(), new JSIL.GenericParameter("T4", "System.Func`8").in(), 
      new JSIL.GenericParameter("T5", "System.Func`8").in(), new JSIL.GenericParameter("T6", "System.Func`8").in(), 
      new JSIL.GenericParameter("T7", "System.Func`8").in()
    ]));

/* delegate System.Func`9 */ 

JSIL.MakeDelegate("System.Func`9", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`9").out(), [
      new JSIL.GenericParameter("T1", "System.Func`9").in(), new JSIL.GenericParameter("T2", "System.Func`9").in(), 
      new JSIL.GenericParameter("T3", "System.Func`9").in(), new JSIL.GenericParameter("T4", "System.Func`9").in(), 
      new JSIL.GenericParameter("T5", "System.Func`9").in(), new JSIL.GenericParameter("T6", "System.Func`9").in(), 
      new JSIL.GenericParameter("T7", "System.Func`9").in(), new JSIL.GenericParameter("T8", "System.Func`9").in()
    ]));

/* delegate System.Comparison`1 */ 

JSIL.MakeDelegate("System.Comparison`1", true, ["in T"], 
  new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Comparison`1").in(), new JSIL.GenericParameter("T", "System.Comparison`1").in()]));

/* delegate System.Predicate`1 */ 

JSIL.MakeDelegate("System.Predicate`1", true, ["in T"], 
  new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Predicate`1").in()]));

JSIL.MakeTypeAlias($jsilcore, "System.Array");

/* interface System.IComparable */ 

JSIL.MakeInterface(
  "System.IComparable", true, [], function ($) {
    $.Method({}, "CompareTo", new JSIL.MethodSignature($.Int32, [$.Object]));
  }, []);

/* interface System.IComparable`1 */ 

JSIL.MakeInterface(
  "System.IComparable`1", true, ["in T"], function ($) {
    $.Method({}, "CompareTo", new JSIL.MethodSignature($.Int32, [$.GenericParameter("T").in()]));
  }, []);

/* interface System.IEquatable`1 */ 

JSIL.MakeInterface(
  "System.IEquatable`1", true, ["T"], function ($) {
    $.Method({}, "Equals", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]));
  }, []);

/* interface System.ITupleInternal */ 

JSIL.MakeInterface(
  "System.ITupleInternal", false, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")]);

/* class System.Tuple */ 

(function Tuple$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Tuple", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`1", ["!!0"]), ["!!0"], ["T1"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`2", ["!!0", "!!1"]), ["!!0", "!!1"], ["T1", "T2"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`3", [
            "!!0", "!!1", 
            "!!2"
          ]), [
          "!!0", "!!1", 
          "!!2"
        ], ["T1", "T2", "T3"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`4", [
            "!!0", "!!1", 
            "!!2", "!!3"
          ]), [
          "!!0", "!!1", 
          "!!2", "!!3"
        ], ["T1", "T2", "T3", "T4"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`5", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4"
          ]), [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5"
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`6", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5"
          ]), [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6"
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`7", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6"
          ]), [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6", "T7"
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Tuple`8", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", $asm_mscorlib.TypeRef("System.Tuple`1", ["!!7"])
          ]), [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6", "T7", "T8"
        ])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`1 */ 

(function Tuple$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T1"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T1")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`2 */ 

(function Tuple$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T1"), $.GenericParameter("T2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`3 */ 

(function Tuple$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`3", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`4 */ 

(function Tuple$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`4", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3", "T4"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("T4")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item4", 
      new JSIL.MethodSignature($.GenericParameter("T4"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item4", $.GenericParameter("T4")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:true }, "Item4", $.GenericParameter("T4"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`5 */ 

(function Tuple$b5$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`5", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: [
        "T1", "T2", "T3", "T4", 
        "T5"
      ], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("T4"), 
          $.GenericParameter("T5")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item4", 
      new JSIL.MethodSignature($.GenericParameter("T4"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item5", 
      new JSIL.MethodSignature($.GenericParameter("T5"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item4", $.GenericParameter("T4")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item5", $.GenericParameter("T5")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:true }, "Item4", $.GenericParameter("T4"));

    $.Property({Static:false, Public:true }, "Item5", $.GenericParameter("T5"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`6 */ 

(function Tuple$b6$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`6", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: [
        "T1", "T2", "T3", "T4", 
        "T5", "T6"
      ], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("T4"), 
          $.GenericParameter("T5"), $.GenericParameter("T6")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item4", 
      new JSIL.MethodSignature($.GenericParameter("T4"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item5", 
      new JSIL.MethodSignature($.GenericParameter("T5"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item6", 
      new JSIL.MethodSignature($.GenericParameter("T6"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item4", $.GenericParameter("T4")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item5", $.GenericParameter("T5")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item6", $.GenericParameter("T6")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:true }, "Item4", $.GenericParameter("T4"));

    $.Property({Static:false, Public:true }, "Item5", $.GenericParameter("T5"));

    $.Property({Static:false, Public:true }, "Item6", $.GenericParameter("T6"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`7 */ 

(function Tuple$b7$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`7", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: [
        "T1", "T2", "T3", "T4", 
        "T5", "T6", "T7"
      ], 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("T4"), 
          $.GenericParameter("T5"), $.GenericParameter("T6"), 
          $.GenericParameter("T7")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item4", 
      new JSIL.MethodSignature($.GenericParameter("T4"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item5", 
      new JSIL.MethodSignature($.GenericParameter("T5"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item6", 
      new JSIL.MethodSignature($.GenericParameter("T6"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item7", 
      new JSIL.MethodSignature($.GenericParameter("T7"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item4", $.GenericParameter("T4")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item5", $.GenericParameter("T5")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item6", $.GenericParameter("T6")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item7", $.GenericParameter("T7")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:true }, "Item4", $.GenericParameter("T4"));

    $.Property({Static:false, Public:true }, "Item5", $.GenericParameter("T5"));

    $.Property({Static:false, Public:true }, "Item6", $.GenericParameter("T6"));

    $.Property({Static:false, Public:true }, "Item7", $.GenericParameter("T7"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Tuple`8 */ 

(function Tuple$b8$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Tuple`8", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: [
        "T1", "T2", "T3", "T4", 
        "T5", "T6", "T7", "TRest"
      ], 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3"), $.GenericParameter("T4"), 
          $.GenericParameter("T5"), $.GenericParameter("T6"), 
          $.GenericParameter("T7"), $.GenericParameter("TRest")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item1", 
      new JSIL.MethodSignature($.GenericParameter("T1"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item2", 
      new JSIL.MethodSignature($.GenericParameter("T2"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item3", 
      new JSIL.MethodSignature($.GenericParameter("T3"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item4", 
      new JSIL.MethodSignature($.GenericParameter("T4"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item5", 
      new JSIL.MethodSignature($.GenericParameter("T5"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item6", 
      new JSIL.MethodSignature($.GenericParameter("T6"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item7", 
      new JSIL.MethodSignature($.GenericParameter("T7"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item1", $.GenericParameter("T1")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item2", $.GenericParameter("T2")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item3", $.GenericParameter("T3")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item4", $.GenericParameter("T4")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item5", $.GenericParameter("T5")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item6", $.GenericParameter("T6")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Item7", $.GenericParameter("T7")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_Rest", $.GenericParameter("TRest")); 
    $.Property({Static:false, Public:true }, "Item1", $.GenericParameter("T1"));

    $.Property({Static:false, Public:true }, "Item2", $.GenericParameter("T2"));

    $.Property({Static:false, Public:true }, "Item3", $.GenericParameter("T3"));

    $.Property({Static:false, Public:true }, "Item4", $.GenericParameter("T4"));

    $.Property({Static:false, Public:true }, "Item5", $.GenericParameter("T5"));

    $.Property({Static:false, Public:true }, "Item6", $.GenericParameter("T6"));

    $.Property({Static:false, Public:true }, "Item7", $.GenericParameter("T7"));

    $.Property({Static:false, Public:true }, "Rest", $.GenericParameter("TRest"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Length", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.ITuple.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralEquatable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IStructuralComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ITupleInternal"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IValueTupleInternal */ 

JSIL.MakeInterface(
  "System.IValueTupleInternal", false, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ITuple")]);

/* class System.String */ 

(function String$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.String", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.SByte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.SByte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.SByte]), $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Type, 
          $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Type, 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $asm_mscorlib.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Type, 
          $.Boolean, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), 
          $asm_mscorlib.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndsWith", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm_mscorlib.TypeRef("System.StringComparison")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndsWith", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndsWith", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Parameter(1, "args", function (_) {
          _
        });

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Parameter(2, "args", function (_) {
          _
        });

    $.ExternalMethod({Static:false, Public:true }, "get_length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Char, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Type, $asm_mscorlib.TypeRef("System.StringComparison")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfAny", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNullOrWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($.Type, [$.Type, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "values", function (_) {
          _
        });

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Char, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Type, $asm_mscorlib.TypeRef("System.StringComparison")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.StringComparison")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOfAny", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "LastIndexOfAny", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Text.NormalizationForm")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Split", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Split", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $asm_mscorlib.TypeRef("System.StringSplitOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Split", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $asm_mscorlib.TypeRef("System.StringSplitOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm_mscorlib.TypeRef("System.StringComparison")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToCharArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLower", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToUpper", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])
    );

    $['Field']({Static:false, Public:false}, "m_stringLength", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_firstChar", $.Char); 
    $['Constant']({Static:true , Public:false}, "TrimHead", 0); 
    $['Constant']({Static:true , Public:false}, "TrimTail", 1); 
    $['Constant']({Static:true , Public:false}, "TrimBoth", 2); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $['Constant']({Static:true , Public:false}, "charPtrAlignConst", 1); 
    $['Constant']({Static:true , Public:false}, "alignConst", 3); 
    $.Property({Static:false, Public:false}, "FirstChar", $.Char);

    $.Property({Static:false, Public:true }, "Chars", $.Char);

    $.Property({Static:false, Public:true }, "length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IConvertible"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.IComparable`1", [$.Type]), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Char]), 
      /* 6 */ $asm_mscorlib.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IWellKnownStringEqualityComparer */ 

JSIL.MakeInterface(
  "System.IWellKnownStringEqualityComparer", false, [], function ($) {
  }, []);

/* enum System.StringComparison */ 

JSIL.MakeEnum(
  {
    FullName: "System.StringComparison", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CurrentCulture: 0, 
    CurrentCultureIgnoreCase: 1, 
    InvariantCulture: 2, 
    InvariantCultureIgnoreCase: 3, 
    Ordinal: 4, 
    OrdinalIgnoreCase: 5, 
  }
);

/* class System.Exception */ 

(function Exception$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Exception", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerException", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StackTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetType", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean, $.Boolean])
    );

    $['Field']({Static:true , Public:false}, "s_EDILock", $.Object)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_className", $.String); 
    $['Field']({Static:false, Public:false}, "_exceptionMethod", $asm_mscorlib.TypeRef("System.Reflection.MethodBase")); 
    $['Field']({Static:false, Public:false}, "_exceptionMethodString", $.String); 
    $['Field']({Static:false, Public:false}, "_message", $.String); 
    $['Field']({Static:false, Public:false}, "_data", $asm_mscorlib.TypeRef("System.Collections.IDictionary")); 
    $['Field']({Static:false, Public:false}, "_innerException", $.Type); 
    $['Field']({Static:false, Public:false}, "_helpURL", $.String); 
    $['Field']({Static:false, Public:false}, "_stackTrace", $.Object); 
    $['Field']({Static:false, Public:false}, "_watsonBuckets", $.Object)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_stackTraceString", $.String); 
    $['Field']({Static:false, Public:false}, "_remoteStackTraceString", $.String); 
    $['Field']({Static:false, Public:false}, "_remoteStackIndex", $.Int32); 
    $['Field']({Static:false, Public:false}, "_dynamicMethods", $.Object); 
    $['Field']({Static:false, Public:false}, "_HResult", $.Int32); 
    $['Field']({Static:false, Public:false}, "_source", $.String); 
    $['Field']({Static:false, Public:false}, "_xptrs", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "_xcode", $.Int32); 
    $['Field']({Static:false, Public:false}, "_ipForWatsonBuckets", $.UIntPtr)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_safeSerializationManager", $asm_mscorlib.TypeRef("System.Runtime.Serialization.SafeSerializationManager"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:false}, "_COMPlusExceptionCode", -532462766); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Data", $asm_mscorlib.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerException", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "TargetSite", $asm_mscorlib.TypeRef("System.Reflection.MethodBase"));

    $.Property({Static:false, Public:true , Virtual:true }, "StackTrace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HelpLink", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Source", $.String);

    $.Property({Static:false, Public:false}, "IPForWatsonBuckets", $.UIntPtr);

    $.Property({Static:false, Public:false}, "WatsonBuckets", $.Object);

    $.Property({Static:false, Public:false}, "RemoteStackTrace", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:false}, "IsTransient", $.Boolean);

    $.Event({Static:false, Public:false}, "SerializeObjectState", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._Exception")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DateTime */ 

(function DateTime$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.DateTime", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 9, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $asm_mscorlib.TypeRef("System.DateTimeKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm_mscorlib.TypeRef("System.DateTimeKind"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm_mscorlib.TypeRef("System.DateTimeKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm_mscorlib.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.DateTimeKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Globalization.Calendar"), 
          $asm_mscorlib.TypeRef("System.DateTimeKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddDays", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddHours", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMilliseconds", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMinutes", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMonths", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSeconds", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddTicks", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddYears", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DayOfWeek", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.DayOfWeek"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hour", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.DateTimeKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Millisecond", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minute", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Now", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ticks", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeOfDay", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Today", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UtcNow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Year", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm_mscorlib.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm_mscorlib.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.TimeSpan"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm_mscorlib.TypeRef("System.IFormatProvider"), 
          $asm_mscorlib.TypeRef("System.Globalization.DateTimeStyles")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLocalTime", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToLocalTime", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLongTimeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToShortDateString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToShortTimeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToUniversalTime", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm_mscorlib.TypeRef("System.IFormatProvider"), 
          $asm_mscorlib.TypeRef("System.Globalization.DateTimeStyles"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $['Constant']({Static:true , Public:false}, "TicksPerMillisecond", 10000); 
    $['Constant']({Static:true , Public:false}, "TicksPerSecond", 10000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerMinute", 600000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerHour", 36000000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerDay", 864000000000); 
    $['Constant']({Static:true , Public:false}, "MillisPerSecond", 1000); 
    $['Constant']({Static:true , Public:false}, "MillisPerMinute", 60000); 
    $['Constant']({Static:true , Public:false}, "MillisPerHour", 3600000); 
    $['Constant']({Static:true , Public:false}, "MillisPerDay", 86400000); 
    $['Constant']({Static:true , Public:false}, "DaysPerYear", 365); 
    $['Constant']({Static:true , Public:false}, "DaysPer4Years", 1461); 
    $['Constant']({Static:true , Public:false}, "DaysPer100Years", 36524); 
    $['Constant']({Static:true , Public:false}, "DaysPer400Years", 146097); 
    $['Constant']({Static:true , Public:false}, "DaysTo1601", 584388); 
    $['Constant']({Static:true , Public:false}, "DaysTo1899", 693593); 
    $['Constant']({Static:true , Public:false}, "DaysTo1970", 719162); 
    $['Constant']({Static:true , Public:false}, "DaysTo10000", 3652059); 
    $['Constant']({Static:true , Public:false}, "MinTicks", 0); 
    $['Constant']({Static:true , Public:false}, "MaxTicks", 3155378975999999999); 
    $['Constant']({Static:true , Public:false}, "MaxMillis", 315537897600000); 
    $['Constant']({Static:true , Public:false}, "FileTimeOffset", 504911232000000000); 
    $['Constant']({Static:true , Public:false}, "DoubleDateOffset", 599264352000000000); 
    $['Constant']({Static:true , Public:false}, "OADateMinAsTicks", 31241376000000000); 
    $['Constant']({Static:true , Public:false}, "OADateMinAsDouble", -657435); 
    $['Constant']({Static:true , Public:false}, "OADateMaxAsDouble", 2958466); 
    $['Constant']({Static:true , Public:false}, "DatePartYear", 0); 
    $['Constant']({Static:true , Public:false}, "DatePartDayOfYear", 1); 
    $['Constant']({Static:true , Public:false}, "DatePartMonth", 2); 
    $['Constant']({Static:true , Public:false}, "DatePartDay", 3); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_isLeapSecondsSupportedSystem", $.Boolean); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "DaysToMonth365", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "DaysToMonth366", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type); 
    $['Constant']({Static:true , Public:false}, "TicksMask", 4611686018427387903); 
    $['Constant']({Static:true , Public:false}, "FlagsMask", -4611686018427387904); 
    $['Constant']({Static:true , Public:false}, "LocalMask", -9223372036854775808); 
    $['Constant']({Static:true , Public:false}, "TicksCeiling", 4611686018427387904); 
    $['Constant']({Static:true , Public:false}, "KindUnspecified", 0); 
    $['Constant']({Static:true , Public:false}, "KindUtc", 4611686018427387904); 
    $['Constant']({Static:true , Public:false}, "KindLocal", -9223372036854775808); 
    $['Constant']({Static:true , Public:false}, "KindLocalAmbiguousDst", -4611686018427387904); 
    $['Constant']({Static:true , Public:false}, "KindShift", 62); 
    $['Constant']({Static:true , Public:false}, "TicksField", "ticks"); 
    $['Constant']({Static:true , Public:false}, "DateDataField", "dateData"); 
    $['Field']({Static:false, Public:false}, "dateData", $.UInt64); 
    function DateTime__cctor () {
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DateTime__cctor
    );

    $.Property({Static:false, Public:false}, "InternalTicks", $.Int64);

    $.Property({Static:false, Public:false}, "InternalKind", $.UInt64);

    $.Property({Static:false, Public:true }, "Date", $.Type);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "DayOfWeek", $asm_mscorlib.TypeRef("System.DayOfWeek"));

    $.Property({Static:false, Public:true }, "DayOfYear", $.Int32);

    $.Property({Static:false, Public:true }, "Hour", $.Int32);

    $.Property({Static:false, Public:true }, "Kind", $asm_mscorlib.TypeRef("System.DateTimeKind"));

    $.Property({Static:false, Public:true }, "Millisecond", $.Int32);

    $.Property({Static:false, Public:true }, "Minute", $.Int32);

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:true , Public:true }, "Now", $.Type);

    $.Property({Static:true , Public:true }, "UtcNow", $.Type);

    $.Property({Static:false, Public:true }, "Second", $.Int32);

    $.Property({Static:false, Public:true }, "Ticks", $.Int64);

    $.Property({Static:false, Public:true }, "TimeOfDay", $asm_mscorlib.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:true }, "Today", $.Type);

    $.Property({Static:false, Public:true }, "Year", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IFormattable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IConvertible"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.IComparable`1", [$.Type]), 
      /* 5 */ $asm_mscorlib.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DateTimeKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.DateTimeKind", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    Utc: 1, 
    Local: 2, 
  }
);

/* class System.SystemException */ 

(function SystemException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Exception"), 
      Name: "System.SystemException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Delegate");

JSIL.MakeTypeAlias($jsilcore, "System.MulticastDelegate");

/* class System.Activator */ 

(function Activator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Activator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [
          $asm_mscorlib.TypeRef("System.Type"), $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [
          $asm_mscorlib.TypeRef("System.Type"), $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _
        });

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [
          $asm_mscorlib.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $.String, $.String, 
          $.Boolean, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $.String, $.String, 
          $.Boolean, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $.String, $.String, 
          $.Boolean, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm_mscorlib.TypeRef("System.Security.Policy.Evidence"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $asm_mscorlib.TypeRef("System.AppDomain"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $asm_mscorlib.TypeRef("System.AppDomain"), $.String, 
          $.String, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), $asm_mscorlib.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm_mscorlib.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [
          $asm_mscorlib.TypeRef("System.AppDomain"), $.String, 
          $.String, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), $asm_mscorlib.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [$asm_mscorlib.TypeRef("System.ActivationContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.Remoting.ObjectHandle"), [$asm_mscorlib.TypeRef("System.ActivationContext"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $['Constant']({Static:true , Public:false}, "LookupMask", 255); 
    $['Constant']({Static:true , Public:false}, "ConLookup", 20); 
    $['Constant']({Static:true , Public:false}, "ConstructorDefault", 532); 
    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._Activator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.MarshalByRefObject */ 

(function MarshalByRefObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.MarshalByRefObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "__identity", $.Object); 
    $.Property({Static:false, Public:false}, "Identity", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.AppDomain */ 

(function AppDomain$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.AppDomain", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_domainManager", $asm_mscorlib.TypeRef("System.AppDomainManager")); 
    $['Field']({Static:false, Public:false}, "_LocalStore", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])); 
    $['Field']({Static:false, Public:false}, "_FusionStore", $asm_mscorlib.TypeRef("System.AppDomainSetup")); 
    $['Field']({Static:false, Public:false}, "_SecurityIdentity", $asm_mscorlib.TypeRef("System.Security.Policy.Evidence")); 
    $['Field']({Static:false, Public:false}, "_Policies", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $['Field']({Static:false, Public:false}, "AssemblyLoad", $asm_mscorlib.TypeRef("System.AssemblyLoadEventHandler"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $['Field']({Static:false, Public:false}, "_TypeResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler")); 
    $['Field']({Static:false, Public:false}, "_ResourceResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler")); 
    $['Field']({Static:false, Public:false}, "_AssemblyResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler")); 
    $['Field']({Static:false, Public:false}, "ReflectionOnlyAssemblyResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $['Field']({Static:false, Public:false}, "_DefaultContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.Context")); 
    $['Field']({Static:false, Public:false}, "_activationContext", $asm_mscorlib.TypeRef("System.ActivationContext")); 
    $['Field']({Static:false, Public:false}, "_applicationIdentity", $asm_mscorlib.TypeRef("System.ApplicationIdentity")); 
    $['Field']({Static:false, Public:false}, "_applicationTrust", $asm_mscorlib.TypeRef("System.Security.Policy.ApplicationTrust")); 
    $['Field']({Static:false, Public:false}, "_DefaultPrincipal", $asm_mscorlib.TypeRef("System.Security.Principal.IPrincipal")); 
    $['Field']({Static:false, Public:false}, "_RemotingData", $asm_mscorlib.TypeRef("System.Runtime.Remoting.DomainSpecificRemotingData")); 
    $['Field']({Static:false, Public:false}, "_processExit", $asm_mscorlib.TypeRef("System.EventHandler")); 
    $['Field']({Static:false, Public:false}, "_domainUnload", $asm_mscorlib.TypeRef("System.EventHandler")); 
    $['Field']({Static:false, Public:false}, "_unhandledException", $asm_mscorlib.TypeRef("System.UnhandledExceptionEventHandler")); 
    $['Field']({Static:false, Public:false}, "_aptcaVisibleAssemblies", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "_compatFlags", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $['Field']({Static:false, Public:false}, "_firstChanceException", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs")])); 
    $['Field']({Static:false, Public:false}, "_pDomain", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "_PrincipalPolicy", $asm_mscorlib.TypeRef("System.Security.Principal.PrincipalPolicy")); 
    $['Field']({Static:false, Public:false}, "_HasSetPolicy", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_IsFastFullTrustDomain", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_compatFlagsInitialized", $.Boolean); 
    $['Constant']({Static:true , Public:false}, "TargetFrameworkNameAppCompatSetting", "TargetFrameworkName"); 
    $['Field']({Static:true , Public:false}, "s_flags", $asm_mscorlib.TypeRef("System.AppDomain+APPX_FLAGS")); 
    $['Constant']({Static:true , Public:false}, "DefaultADID", 1); 
    $.Property({Static:true , Public:false}, "Flags", $asm_mscorlib.TypeRef("System.AppDomain+APPX_FLAGS"));

    $.Property({Static:true , Public:false}, "ProfileAPICheck", $.Boolean);

    $.Property({Static:true , Public:false}, "IsAppXNGen", $.Boolean);

    $.Property({Static:false, Public:false}, "PartialTrustVisibleAssemblies", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "DomainManager", $asm_mscorlib.TypeRef("System.AppDomainManager"));

    $.Property({Static:false, Public:false}, "HostSecurityManager", $asm_mscorlib.TypeRef("System.Security.HostSecurityManager"));

    $.Property({Static:true , Public:true }, "CurrentDomain", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Evidence", $asm_mscorlib.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:false, Public:false}, "EvidenceNoDemand", $asm_mscorlib.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:false, Public:false}, "InternalEvidence", $asm_mscorlib.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:false, Public:true , Virtual:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseDirectory", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RelativeSearchPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ShadowCopyFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "ActivationContext", $asm_mscorlib.TypeRef("System.ActivationContext"));

    $.Property({Static:false, Public:true }, "ApplicationIdentity", $asm_mscorlib.TypeRef("System.ApplicationIdentity"));

    $.Property({Static:false, Public:true }, "ApplicationTrust", $asm_mscorlib.TypeRef("System.Security.Policy.ApplicationTrust"));

    $.Property({Static:false, Public:true , Virtual:true }, "DynamicDirectory", $.String);

    $.Property({Static:false, Public:false}, "RemotingData", $asm_mscorlib.TypeRef("System.Runtime.Remoting.DomainSpecificRemotingData"));

    $.Property({Static:false, Public:false}, "FusionStore", $asm_mscorlib.TypeRef("System.AppDomainSetup"));

    $.Property({Static:false, Public:false}, "LocalStore", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])]));

    $.Property({Static:false, Public:true }, "SetupInformation", $asm_mscorlib.TypeRef("System.AppDomainSetup"));

    $.Property({Static:false, Public:true }, "PermissionSet", $asm_mscorlib.TypeRef("System.Security.PermissionSet"));

    $.Property({Static:false, Public:true }, "IsFullyTrusted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsHomogenous", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLegacyCasPolicyEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:true , Public:true }, "MonitoringIsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "MonitoringTotalProcessorTime", $asm_mscorlib.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MonitoringTotalAllocatedMemorySize", $.Int64);

    $.Property({Static:false, Public:true }, "MonitoringSurvivedMemorySize", $.Int64);

    $.Property({Static:true , Public:true }, "MonitoringSurvivedProcessMemorySize", $.Int64);

    $.Event({Static:false, Public:true , Virtual:true }, "AssemblyLoad", $asm_mscorlib.TypeRef("System.AssemblyLoadEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "TypeResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "ResourceResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "AssemblyResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler"));

    $.Event({Static:false, Public:true }, "ReflectionOnlyAssemblyResolve", $asm_mscorlib.TypeRef("System.ResolveEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "ProcessExit", $asm_mscorlib.TypeRef("System.EventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "DomainUnload", $asm_mscorlib.TypeRef("System.EventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "UnhandledException", $asm_mscorlib.TypeRef("System.UnhandledExceptionEventHandler"));

    $.Event({Static:false, Public:true }, "FirstChanceException", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System._AppDomain"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Security.IEvidenceFactory")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System._AppDomain */ 

JSIL.MakeInterface(
  "System._AppDomain", true, [], function ($) {
    $.Property({}, "Evidence");
    $.Property({}, "FriendlyName");
    $.Property({}, "BaseDirectory");
    $.Property({}, "RelativeSearchPath");
    $.Property({}, "ShadowCopyFiles");
    $.Property({}, "DynamicDirectory");
  }, []);

/* interface System.IAppDomainSetup */ 

JSIL.MakeInterface(
  "System.IAppDomainSetup", true, [], function ($) {
    $.Property({}, "ApplicationBase");
    $.Property({}, "ApplicationName");
    $.Property({}, "CachePath");
    $.Property({}, "ConfigurationFile");
    $.Property({}, "DynamicBase");
    $.Property({}, "LicenseFile");
    $.Property({}, "PrivateBinPath");
    $.Property({}, "PrivateBinPathProbe");
    $.Property({}, "ShadowCopyDirectories");
    $.Property({}, "ShadowCopyFiles");
  }, []);

/* class System.ArgumentException */ 

(function ArgumentException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.ArgumentException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm_mscorlib.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $['Field']({Static:false, Public:false}, "m_paramName", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ParamName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ArgumentNullException */ 

(function ArgumentNullException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ArgumentException"), 
      Name: "System.ArgumentNullException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ArgumentOutOfRangeException */ 

(function ArgumentOutOfRangeException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ArgumentException"), 
      Name: "System.ArgumentOutOfRangeException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $['Field']({Static:true , Public:false}, "_rangeMessage", $asm_mscorlib.TypeRef("System.String")); 
    $['Field']({Static:false, Public:false}, "m_actualValue", $.Object); 
    $.Property({Static:true , Public:false}, "RangeMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ActualValue", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ArithmeticException */ 

(function ArithmeticException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.ArithmeticException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.AsyncCallback */ 

JSIL.MakeDelegate("System.AsyncCallback", true, [], 
  JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IAsyncResult")));

JSIL.MakeTypeAlias($jsilcore, "System.Attribute");

/* class System.BitConverter */ 

(function BitConverter$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.BitConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "IsLittleEndian", $.Boolean, true); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Boolean");

/* class System.Buffer */ 

(function Buffer$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Buffer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "BlockCopy", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Array"), $.Int32, 
          $asm_mscorlib.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ByteLength", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$asm_mscorlib.TypeRef("System.Array"), $.Int32])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Byte");

JSIL.MakeTypeAlias($jsilcore, "System.Char");

/* class System.CharEnumerator */ 

(function CharEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.CharEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "str", $.String); 
    $['Field']({Static:false, Public:false}, "index", $.Int32); 
    $['Field']({Static:false, Public:false}, "currentElement", $.Char); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerator"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Char]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Console */ 

(function Console$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Console", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    )
      .Parameter(1, "arg", function (_) {
          _
        });

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ )
    )
      .Parameter(1, "arg", function (_) {
          _
        });

    $['Constant']({Static:true , Public:false}, "DefaultConsoleBufferSize", 256); 
    $['Constant']({Static:true , Public:false}, "AltVKCode", 18); 
    $['Constant']({Static:true , Public:false}, "NumberLockVKCode", 144); 
    $['Constant']({Static:true , Public:false}, "CapsLockVKCode", 20); 
    $['Constant']({Static:true , Public:false}, "MinBeepFrequency", 37); 
    $['Constant']({Static:true , Public:false}, "MaxBeepFrequency", 32767); 
    $['Constant']({Static:true , Public:false}, "MaxConsoleTitleLength", 24500); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "StdConUnicodeEncoding", $asm_mscorlib.TypeRef("System.Text.UnicodeEncoding")); 
    $['Field']({Static:true , Public:false}, "_in", $asm_mscorlib.TypeRef("System.IO.TextReader")); 
    $['Field']({Static:true , Public:false}, "_out", $asm_mscorlib.TypeRef("System.IO.TextWriter")); 
    $['Field']({Static:true , Public:false}, "_error", $asm_mscorlib.TypeRef("System.IO.TextWriter")); 
    $['Field']({Static:true , Public:false}, "_cancelCallbacks", $asm_mscorlib.TypeRef("System.ConsoleCancelEventHandler")); 
    $['Field']({Static:true , Public:false}, "_hooker", $asm_mscorlib.TypeRef("System.Console+ControlCHooker")); 
    $['Field']({Static:true , Public:false}, "_cachedInputRecord", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+InputRecord")); 
    $['Field']({Static:true , Public:false}, "_haveReadDefaultColors", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "_defaultColors", $asm_mscorlib.TypeRef("System.Byte")); 
    $['Field']({Static:true , Public:false}, "_isOutTextWriterRedirected", $asm_mscorlib.TypeRef("System.Boolean"), false); 
    $['Field']({Static:true , Public:false}, "_isErrorTextWriterRedirected", $asm_mscorlib.TypeRef("System.Boolean"), false); 
    $['Field']({Static:true , Public:false}, "_inputEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding"), null); 
    $['Field']({Static:true , Public:false}, "_outputEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding"), null); 
    $['Field']({Static:true , Public:false}, "_stdInRedirectQueried", $asm_mscorlib.TypeRef("System.Boolean"), false); 
    $['Field']({Static:true , Public:false}, "_stdOutRedirectQueried", $asm_mscorlib.TypeRef("System.Boolean"), false); 
    $['Field']({Static:true , Public:false}, "_stdErrRedirectQueried", $asm_mscorlib.TypeRef("System.Boolean"), false); 
    $['Field']({Static:true , Public:false}, "_isStdInRedirected", $.Boolean); 
    $['Field']({Static:true , Public:false}, "_isStdOutRedirected", $.Boolean); 
    $['Field']({Static:true , Public:false}, "_isStdErrRedirected", $.Boolean); 
    $['Field']({Static:true , Public:false}, "s_InternalSyncObject", $asm_mscorlib.TypeRef("System.Object")); 
    $['Field']({Static:true , Public:false}, "s_ReadKeySyncObject", $asm_mscorlib.TypeRef("System.Object")); 
    $['Field']({Static:true , Public:false}, "_consoleInputHandle", $asm_mscorlib.TypeRef("System.IntPtr")); 
    $['Field']({Static:true , Public:false}, "_consoleOutputHandle", $asm_mscorlib.TypeRef("System.IntPtr")); 
    function Console__cctor () {
      $thisType._cachedInputRecord = new $asm_mscorlib.Microsoft.Win32.Win32Native_InputRecord();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Console__cctor
    );

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "ReadKeySyncObject", $.Object);

    $.Property({Static:true , Public:false}, "ConsoleInputHandle", $.IntPtr);

    $.Property({Static:true , Public:false}, "ConsoleOutputHandle", $.IntPtr);

    $.Property({Static:true , Public:true }, "IsInputRedirected", $.Boolean);

    $.Property({Static:true , Public:true }, "IsOutputRedirected", $.Boolean);

    $.Property({Static:true , Public:true }, "IsErrorRedirected", $.Boolean);

    $.Property({Static:true , Public:true }, "In", $asm_mscorlib.TypeRef("System.IO.TextReader"));

    $.Property({Static:true , Public:true }, "Out", $asm_mscorlib.TypeRef("System.IO.TextWriter"));

    $.Property({Static:true , Public:true }, "Error", $asm_mscorlib.TypeRef("System.IO.TextWriter"));

    $.Property({Static:true , Public:true }, "InputEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:true }, "OutputEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:true }, "BackgroundColor", $asm_mscorlib.TypeRef("System.ConsoleColor"));

    $.Property({Static:true , Public:true }, "ForegroundColor", $asm_mscorlib.TypeRef("System.ConsoleColor"));

    $.Property({Static:true , Public:true }, "BufferHeight", $.Int32);

    $.Property({Static:true , Public:true }, "BufferWidth", $.Int32);

    $.Property({Static:true , Public:true }, "WindowHeight", $.Int32);

    $.Property({Static:true , Public:true }, "WindowWidth", $.Int32);

    $.Property({Static:true , Public:true }, "LargestWindowWidth", $.Int32);

    $.Property({Static:true , Public:true }, "LargestWindowHeight", $.Int32);

    $.Property({Static:true , Public:true }, "WindowLeft", $.Int32);

    $.Property({Static:true , Public:true }, "WindowTop", $.Int32);

    $.Property({Static:true , Public:true }, "CursorLeft", $.Int32);

    $.Property({Static:true , Public:true }, "CursorTop", $.Int32);

    $.Property({Static:true , Public:true }, "CursorSize", $.Int32);

    $.Property({Static:true , Public:true }, "CursorVisible", $.Boolean);

    $.Property({Static:true , Public:true }, "Title", $.String);

    $.Property({Static:true , Public:true }, "KeyAvailable", $.Boolean);

    $.Property({Static:true , Public:true }, "NumberLock", $.Boolean);

    $.Property({Static:true , Public:true }, "CapsLock", $.Boolean);

    $.Property({Static:true , Public:true }, "TreatControlCAsInput", $.Boolean);

    $.Event({Static:true , Public:true }, "CancelKeyPress", $asm_mscorlib.TypeRef("System.ConsoleCancelEventHandler"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Console+ControlCHooker */ 

(function ControlCHooker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "System.Console+ControlCHooker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_hooked", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_handler", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.ConsoleCancelEventHandler */ 

JSIL.MakeDelegate("System.ConsoleCancelEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Object"), $asm_mscorlib.TypeRef("System.ConsoleCancelEventArgs")]));

/* class System.Convert */ 

(function Convert$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Convert", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm_mscorlib.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm_mscorlib.TypeRef("System.TypeCode"), 
          $asm_mscorlib.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm_mscorlib.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm_mscorlib.TypeRef("System.Type"), 
          $asm_mscorlib.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromBase64String", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBase64String", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBase64String", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm_mscorlib.TypeRef("System.Base64FormattingOptions")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBase64String", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBase64String", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm_mscorlib.TypeRef("System.Base64FormattingOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.DateTime"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Char, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.SByte, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt16, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.Decimal"), $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.DateTime"), $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Object, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm_mscorlib.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String, $.Int32])
    );

    $['Field']({Static:true , Public:false, ReadOnly:true }, "ConvertTypes", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.RuntimeType")])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "EnumType", $asm_mscorlib.TypeRef("System.RuntimeType"), function ($pi) {
        return $asm_mscorlib.System.RuntimeType.$Cast($asm_mscorlib.System.Enum.__Type__);
      }); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "base64Table", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Constant']({Static:true , Public:false}, "base64LineBreakPosition", 76); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "DBNull", $.Object, function ($pi) {
        return $asm_mscorlib.System.DBNull.Value;
      }); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DayOfWeek */ 

JSIL.MakeEnum(
  {
    FullName: "System.DayOfWeek", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Sunday: 0, 
    Monday: 1, 
    Tuesday: 2, 
    Wednesday: 3, 
    Thursday: 4, 
    Friday: 5, 
    Saturday: 6, 
  }
);

JSIL.MakeTypeAlias($jsilcore, "System.Decimal");

JSIL.MakeTypeAlias($jsilcore, "System.Double");

/* class System.Enum */ 

(function Enum$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Enum", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm_mscorlib.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Array"), [$asm_mscorlib.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Object, [
          $asm_mscorlib.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToObject", 
      new JSIL.MethodSignature($.Object, [$asm_mscorlib.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TEnum"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TEnum"])
    );

    $['Field']({Static:true , Public:false, ReadOnly:true }, "enumSeperatorCharArray", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Constant']({Static:true , Public:false}, "enumSeperator", ", "); 
    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IFormattable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IConvertible")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Environment */ 

(function Environment$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Environment", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentManagedThreadId", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "get_NewLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TickCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFolderPath", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.Environment+SpecialFolder")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFolderPath", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.Environment+SpecialFolder"), $asm_mscorlib.TypeRef("System.Environment+SpecialFolderOption")])
    );

    $['Constant']({Static:true , Public:false}, "MaxEnvVariableValueLength", 32767); 
    $['Constant']({Static:true , Public:false}, "MaxSystemEnvVariableLength", 1024); 
    $['Constant']({Static:true , Public:false}, "MaxUserEnvVariableLength", 255); 
    $['Field']({Static:true , Public:false}, "m_resHelper", $asm_mscorlib.TypeRef("System.Environment+ResourceHelper")); 
    $['Constant']({Static:true , Public:false}, "MaxMachineNameLength", 256); 
    $['Field']({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $['Field']({Static:true , Public:false}, "m_os", $asm_mscorlib.TypeRef("System.OperatingSystem")); 
    $['Field']({Static:true , Public:false}, "s_IsWindows8OrAbove", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "s_CheckedOSWin8OrAbove", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "s_WinRTSupported", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "s_CheckedWinRT", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "processWinStation", $asm_mscorlib.TypeRef("System.IntPtr")); 
    $['Field']({Static:true , Public:false}, "isUserNonInteractive", $asm_mscorlib.TypeRef("System.Boolean")); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:true }, "TickCount", $.Int32);

    $.Property({Static:true , Public:true }, "ExitCode", $.Int32);

    $.Property({Static:true , Public:false}, "IsCLRHosted", $.Boolean);

    $.Property({Static:true , Public:true }, "CommandLine", $.String);

    $.Property({Static:true , Public:true }, "CurrentDirectory", $.String);

    $.Property({Static:true , Public:true }, "SystemDirectory", $.String);

    $.Property({Static:true , Public:false}, "InternalWindowsDirectory", $.String);

    $.Property({Static:true , Public:true }, "MachineName", $.String);

    $.Property({Static:true , Public:true }, "ProcessorCount", $.Int32);

    $.Property({Static:true , Public:true }, "SystemPageSize", $.Int32);

    $.Property({Static:true , Public:true }, "NewLine", $.String);

    $.Property({Static:true , Public:true }, "Version", $asm_mscorlib.TypeRef("System.Version"));

    $.Property({Static:true , Public:true }, "WorkingSet", $.Int64);

    $.Property({Static:true , Public:true }, "OSVersion", $asm_mscorlib.TypeRef("System.OperatingSystem"));

    $.Property({Static:true , Public:false}, "IsWindows8OrAbove", $.Boolean);

    $.Property({Static:true , Public:false}, "IsWinRTSupported", $.Boolean);

    $.Property({Static:true , Public:true }, "StackTrace", $.String);

    $.Property({Static:true , Public:true }, "Is64BitProcess", $.Boolean);

    $.Property({Static:true , Public:true }, "Is64BitOperatingSystem", $.Boolean);

    $.Property({Static:true , Public:true }, "HasShutdownStarted", $.Boolean);

    $.Property({Static:true , Public:true }, "UserName", $.String);

    $.Property({Static:true , Public:true }, "UserInteractive", $.Boolean);

    $.Property({Static:true , Public:true }, "UserDomainName", $.String);

    $.Property({Static:true , Public:true }, "CurrentManagedThreadId", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Environment+ResourceHelper */ 

(function ResourceHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Environment+ResourceHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_name", $.String); 
    $['Field']({Static:false, Public:false}, "SystemResMgr", $asm_mscorlib.TypeRef("System.Resources.ResourceManager")); 
    $['Field']({Static:false, Public:false}, "currentlyLoading", $asm_mscorlib.TypeRef("System.Collections.Stack")); 
    $['Field']({Static:false, Public:false}, "resourceManagerInited", $.Boolean); 
    $['Field']({Static:false, Public:false}, "infinitelyRecursingCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.EventArgs */ 

(function EventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.EventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.EventHandler */ 

JSIL.MakeDelegate("System.EventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Object"), $asm_mscorlib.TypeRef("System.EventArgs")]));

/* delegate System.EventHandler`1 */ 

JSIL.MakeDelegate("System.EventHandler`1", true, ["TEventArgs"], 
  new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Object"), new JSIL.GenericParameter("TEventArgs", "System.EventHandler`1")]));

/* class System.FormatException */ 

(function FormatException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.FormatException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.GC */ 

(function GC$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.GC", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:false}, "GetTotalMemory", 
      JSIL.MethodSignature.Return($.Int64), 
      {
        Module: "QCall", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTotalMemory", 
      new JSIL.MethodSignature($.Int64, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsServerGC", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "MaxGeneration", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Guid */ 

(function Guid$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Guid", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 11, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt16, 
          $.UInt16, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int16, 
          $.Int16, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int16, 
          $.Int16, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "NewGuid", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $['Field']({Static:false, Public:false}, "_a", $.Int32); 
    $['Field']({Static:false, Public:false}, "_b", $.Int16); 
    $['Field']({Static:false, Public:false}, "_c", $.Int16); 
    $['Field']({Static:false, Public:false}, "_d", $.Byte); 
    $['Field']({Static:false, Public:false}, "_e", $.Byte); 
    $['Field']({Static:false, Public:false}, "_f", $.Byte); 
    $['Field']({Static:false, Public:false}, "_g", $.Byte); 
    $['Field']({Static:false, Public:false}, "_h", $.Byte); 
    $['Field']({Static:false, Public:false}, "_i", $.Byte); 
    $['Field']({Static:false, Public:false}, "_j", $.Byte); 
    $['Field']({Static:false, Public:false}, "_k", $.Byte); 
    function Guid__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Guid__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IFormattable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IAsyncResult */ 

JSIL.MakeInterface(
  "System.IAsyncResult", true, [], function ($) {
    $.Property({}, "IsCompleted");
    $.Property({}, "AsyncWaitHandle");
    $.Property({}, "AsyncState");
    $.Property({}, "CompletedSynchronously");
  }, []);

/* interface System.ICustomFormatter */ 

JSIL.MakeInterface(
  "System.ICustomFormatter", true, [], function ($) {
  }, []);

/* interface System.IDisposable */ 

JSIL.MakeInterface(
  "System.IDisposable", true, [], function ($) {
    $.Method({}, "Dispose", JSIL.MethodSignature.Void);
  }, []);

/* interface System.IFormatProvider */ 

JSIL.MakeInterface(
  "System.IFormatProvider", true, [], function ($) {
  }, []);

/* interface System.IFormattable */ 

JSIL.MakeInterface(
  "System.IFormattable", true, [], function ($) {
  }, []);

/* class System.IndexOutOfRangeException */ 

(function IndexOutOfRangeException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.IndexOutOfRangeException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IObservable`1 */ 

JSIL.MakeInterface(
  "System.IObservable`1", true, ["out T"], function ($) {
  }, []);

/* interface System.IObserver`1 */ 

JSIL.MakeInterface(
  "System.IObserver`1", true, ["in T"], function ($) {
  }, []);

/* interface System.IProgress`1 */ 

JSIL.MakeInterface(
  "System.IProgress`1", true, ["in T"], function ($) {
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.Int16");

JSIL.MakeTypeAlias($jsilcore, "System.Int32");

JSIL.MakeTypeAlias($jsilcore, "System.Int64");

JSIL.MakeTypeAlias($jsilcore, "System.IntPtr");

/* class System.InvalidCastException */ 

(function InvalidCastException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.InvalidCastException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.InvalidOperationException */ 

(function InvalidOperationException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.InvalidOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IConvertible */ 

JSIL.MakeInterface(
  "System.IConvertible", true, [], function ($) {
  }, []);

/* interface System.IServiceProvider */ 

JSIL.MakeInterface(
  "System.IServiceProvider", true, [], function ($) {
  }, []);

/* class System.LocalDataStoreHolder */ 

(function LocalDataStoreHolder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.LocalDataStoreHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_Store", $asm_mscorlib.TypeRef("System.LocalDataStore")); 
    $.Property({Static:false, Public:true }, "Store", $asm_mscorlib.TypeRef("System.LocalDataStore"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.LocalDataStoreMgr */ 

(function LocalDataStoreMgr$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.LocalDataStoreMgr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "InitialSlotTableSize", 64); 
    $['Constant']({Static:true , Public:false}, "SlotTableDoubleThreshold", 512); 
    $['Constant']({Static:true , Public:false}, "LargeSlotTableSizeIncrease", 128); 
    $['Field']({Static:false, Public:false}, "m_SlotInfoTable", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $['Field']({Static:false, Public:false}, "m_FirstAvailableSlot", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_ManagedLocalDataStores", $asm_mscorlib.TypeRef("System.Collections.Generic.List`1", [$asm_mscorlib.TypeRef("System.LocalDataStore")])); 
    $['Field']({Static:false, Public:false}, "m_KeyToSlotMap", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm_mscorlib.TypeRef("System.LocalDataStoreSlot")])); 
    $['Field']({Static:false, Public:false}, "m_CookieGenerator", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Math */ 

(function Math$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Math", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exp", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Floor", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IEEERemainder", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("JSIL.AnyType", [$asm_mscorlib.TypeRef("System.Array") /* AnyType[] */ ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Double, [$.Double, $asm_mscorlib.TypeRef("System.MidpointRounding")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Int32, 
          $asm_mscorlib.TypeRef("System.MidpointRounding")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal"), $asm_mscorlib.TypeRef("System.MidpointRounding")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [
          $asm_mscorlib.TypeRef("System.Decimal"), $.Int32, 
          $asm_mscorlib.TypeRef("System.MidpointRounding")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Decimal"), [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $['Field']({Static:true , Public:false}, "doubleRoundLimit", $.Double, 1E+16); 
    $['Constant']({Static:true , Public:false}, "maxRoundingDigits", 15); 
    $['Field']({Static:true , Public:false}, "roundPower10Double", $jsilcore.TypeRef("System.Array", [$.Double])); 
    $['Constant']({Static:true , Public:true }, "PI", 3.1415926535897931); 
    $['Constant']({Static:true , Public:true }, "E", 2.7182818284590451); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.NotImplementedException */ 

(function NotImplementedException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.NotImplementedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.NotSupportedException */ 

(function NotSupportedException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.NotSupportedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.OperatingSystem */ 

(function OperatingSystem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.OperatingSystem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_version", $asm_mscorlib.TypeRef("System.Version")); 
    $['Field']({Static:false, Public:false}, "_platform", $asm_mscorlib.TypeRef("System.PlatformID")); 
    $['Field']({Static:false, Public:false}, "_servicePack", $.String); 
    $['Field']({Static:false, Public:false}, "_versionString", $.String); 
    $.Property({Static:false, Public:true }, "Platform", $asm_mscorlib.TypeRef("System.PlatformID"));

    $.Property({Static:false, Public:true }, "ServicePack", $.String);

    $.Property({Static:false, Public:true }, "Version", $asm_mscorlib.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "VersionString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Random */ 

(function Random$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Random", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Next", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Next", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Next", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $['Constant']({Static:true , Public:false}, "MBIG", 2147483647); 
    $['Constant']({Static:true , Public:false}, "MSEED", 161803398); 
    $['Constant']({Static:true , Public:false}, "MZ", 0); 
    $['Field']({Static:false, Public:false}, "inext", $.Int32); 
    $['Field']({Static:false, Public:false}, "inextp", $.Int32); 
    $['Field']({Static:false, Public:false}, "SeedArray", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.RuntimeType");

/* interface System.IRuntimeMethodInfo */ 

JSIL.MakeInterface(
  "System.IRuntimeMethodInfo", false, [], function ($) {
    $.Property({}, "Value");
  }, []);

/* interface System.IRuntimeFieldInfo */ 

JSIL.MakeInterface(
  "System.IRuntimeFieldInfo", false, [], function ($) {
    $.Property({}, "Value");
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.SByte");

/* class System.SerializableAttribute */ 

(function SerializableAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.SerializableAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Single");

/* struct System.TimeSpan */ 

(function TimeSpan$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.TimeSpan", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDays", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHours", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMilliseconds", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMinutes", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSeconds", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromTicks", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Days", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hours", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Milliseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minutes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ticks", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalDays", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalHours", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalMilliseconds", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalMinutes", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalSeconds", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $['Constant']({Static:true , Public:true }, "TicksPerMillisecond", 10000); 
    $['Constant']({Static:true , Public:false}, "MillisecondsPerTick", 0.0001); 
    $['Constant']({Static:true , Public:true }, "TicksPerSecond", 10000000); 
    $['Constant']({Static:true , Public:false}, "SecondsPerTick", 1E-07); 
    $['Constant']({Static:true , Public:true }, "TicksPerMinute", 600000000); 
    $['Constant']({Static:true , Public:false}, "MinutesPerTick", 1.6666666666666667E-09); 
    $['Constant']({Static:true , Public:true }, "TicksPerHour", 36000000000); 
    $['Constant']({Static:true , Public:false}, "HoursPerTick", 2.7777777777777777E-11); 
    $['Constant']({Static:true , Public:true }, "TicksPerDay", 864000000000); 
    $['Constant']({Static:true , Public:false}, "DaysPerTick", 1.1574074074074074E-12); 
    $['Constant']({Static:true , Public:false}, "MillisPerSecond", 1000); 
    $['Constant']({Static:true , Public:false}, "MillisPerMinute", 60000); 
    $['Constant']({Static:true , Public:false}, "MillisPerHour", 3600000); 
    $['Constant']({Static:true , Public:false}, "MillisPerDay", 86400000); 
    $['Constant']({Static:true , Public:false}, "MaxSeconds", 922337203685); 
    $['Constant']({Static:true , Public:false}, "MinSeconds", -922337203685); 
    $['Constant']({Static:true , Public:false}, "MaxMilliSeconds", 922337203685477); 
    $['Constant']({Static:true , Public:false}, "MinMilliSeconds", -922337203685477); 
    $['Constant']({Static:true , Public:false}, "TicksPerTenthSecond", 1000000); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type); 
    $['Field']({Static:false, Public:false}, "_ticks", $.Int64); 
    $['Field']({Static:true , Public:false}, "_legacyConfigChecked", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "_legacyMode", $asm_mscorlib.TypeRef("System.Boolean")); 
    function TimeSpan__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TimeSpan__cctor
    );

    $.Property({Static:false, Public:true }, "Ticks", $.Int64);

    $.Property({Static:false, Public:true }, "Days", $.Int32);

    $.Property({Static:false, Public:true }, "Hours", $.Int32);

    $.Property({Static:false, Public:true }, "Milliseconds", $.Int32);

    $.Property({Static:false, Public:true }, "Minutes", $.Int32);

    $.Property({Static:false, Public:true }, "Seconds", $.Int32);

    $.Property({Static:false, Public:true }, "TotalDays", $.Double);

    $.Property({Static:false, Public:true }, "TotalHours", $.Double);

    $.Property({Static:false, Public:true }, "TotalMilliseconds", $.Double);

    $.Property({Static:false, Public:true }, "TotalMinutes", $.Double);

    $.Property({Static:false, Public:true }, "TotalSeconds", $.Double);

    $.Property({Static:true , Public:false}, "LegacyMode", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IComparable`1", [$.Type]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.IFormattable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Type");

/* enum System.TypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.TypeCode", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Object: 1, 
    DBNull: 2, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18, 
  }
);

JSIL.MakeTypeAlias($jsilcore, "System.UInt16");

JSIL.MakeTypeAlias($jsilcore, "System.UInt32");

JSIL.MakeTypeAlias($jsilcore, "System.UInt64");

JSIL.MakeTypeAlias($jsilcore, "System.UIntPtr");

/* class System.Version */ 

(function Version$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Version", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $['Field']({Static:false, Public:false}, "_Major", $.Int32); 
    $['Field']({Static:false, Public:false}, "_Minor", $.Int32); 
    $['Field']({Static:false, Public:false}, "_Build", $.Int32); 
    $['Field']({Static:false, Public:false}, "_Revision", $.Int32); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "SeparatorsArray", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Constant']({Static:true , Public:false}, "ZERO_CHAR_VALUE", 48); 
    $.Property({Static:false, Public:true }, "Major", $.Int32);

    $.Property({Static:false, Public:true }, "Minor", $.Int32);

    $.Property({Static:false, Public:true }, "Build", $.Int32);

    $.Property({Static:false, Public:true }, "Revision", $.Int32);

    $.Property({Static:false, Public:true }, "MajorRevision", $.Int16);

    $.Property({Static:false, Public:true }, "MinorRevision", $.Int16);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IComparable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.WeakReference */ 

(function WeakReference$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.WeakReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $['Field']({Static:false, Public:false}, "m_handle", $.IntPtr); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsAlive", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TrackResurrection", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Target", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Nullable`1 */ 

(function Nullable$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Nullable`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValueOrDefault", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValueOrDefault", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "hasValue", $.Boolean); 
    $['Field']({Static:false, Public:false}, "value", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("T"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Nullable */ 

(function Nullable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Nullable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Nullable`1", ["!!0"]), $asm_mscorlib.TypeRef("System.Nullable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Type"), [$asm_mscorlib.TypeRef("System.Type")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
/* class System.IO.BinaryReader */ 

(function BinaryReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.IO.BinaryReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PeekChar", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read7BitEncodedInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadChars", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSByte", 
      JSIL.MethodSignature.Return($.SByte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingle", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadUInt16", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadUInt32", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadUInt64", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $['Constant']({Static:true , Public:false}, "MaxCharBytesSize", 128); 
    $['Field']({Static:false, Public:false}, "m_stream", $asm_mscorlib.TypeRef("System.IO.Stream")); 
    $['Field']({Static:false, Public:false}, "m_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "m_decoder", $asm_mscorlib.TypeRef("System.Text.Decoder")); 
    $['Field']({Static:false, Public:false}, "m_charBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "m_singleChar", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "m_charBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "m_maxCharsSize", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_2BytesPerChar", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_isMemoryStream", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_leaveOpen", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "BaseStream", $asm_mscorlib.TypeRef("System.IO.Stream"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.BinaryWriter */ 

(function BinaryWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.IO.BinaryWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int32, $asm_mscorlib.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.SByte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write7BitEncodedInt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $['Field']({Static:false, Public:false}, "OutStream", $asm_mscorlib.TypeRef("System.IO.Stream")); 
    $['Field']({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:false, Public:false}, "_encoder", $asm_mscorlib.TypeRef("System.Text.Encoder")); 
    $['Field']({Static:false, Public:false}, "_leaveOpen", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_tmpOneCharBuffer", $jsilcore.TypeRef("System.Array", [$.Char]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_largeByteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_maxChars", $.Int32); 
    $['Constant']({Static:true , Public:false}, "LargeByteBufferSize", 256); 
    $.Property({Static:false, Public:true , Virtual:true }, "BaseStream", $asm_mscorlib.TypeRef("System.IO.Stream"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Directory */ 

(function Directory$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.IO.Directory", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateDirectory", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDirectory", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.DirectoryInfo"), [$.String, $asm_mscorlib.TypeRef("System.Security.AccessControl.DirectorySecurity")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $asm_mscorlib.TypeRef("System.IO.SearchOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $asm_mscorlib.TypeRef("System.IO.SearchOption")
        ])
    );

    $['Constant']({Static:true , Public:false}, "FILE_ATTRIBUTE_DIRECTORY", 16); 
    $['Constant']({Static:true , Public:false}, "GENERIC_WRITE", 1073741824); 
    $['Constant']({Static:true , Public:false}, "FILE_SHARE_WRITE", 2); 
    $['Constant']({Static:true , Public:false}, "FILE_SHARE_DELETE", 4); 
    $['Constant']({Static:true , Public:false}, "OPEN_EXISTING", 3); 
    $['Constant']({Static:true , Public:false}, "FILE_FLAG_BACKUP_SEMANTICS", 33554432); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.FileSystemInfo */ 

(function FileSystemInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.IO.FileSystemInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Exists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Refresh", 
      JSIL.MethodSignature.Void
    );

    $['Field']({Static:false, Public:false}, "_data", $asm_mscorlib.TypeRef("Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA")); 
    $['Field']({Static:false, Public:false}, "_dataInitialised", $.Int32); 
    $['Constant']({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", 87); 
    $['Constant']({Static:true , Public:false}, "ERROR_ACCESS_DENIED", 5); 
    $['Field']({Static:false, Public:false}, "FullPath", $.String); 
    $['Field']({Static:false, Public:false}, "OriginalPath", $.String); 
    $['Field']({Static:false, Public:false}, "_displayPath", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "FullName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "UnsafeGetFullName", $.String);

    $.Property({Static:false, Public:true }, "Extension", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Exists", $.Boolean);

    $.Property({Static:false, Public:true }, "CreationTime", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "CreationTimeUtc", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastAccessTime", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastAccessTimeUtc", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastWriteTime", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastWriteTimeUtc", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Attributes", $asm_mscorlib.TypeRef("System.IO.FileAttributes"));

    $.Property({Static:false, Public:false}, "DisplayPath", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.DirectoryInfo */ 

(function DirectoryInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.FileSystemInfo"), 
      Name: "System.IO.DirectoryInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Security.AccessControl.DirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "demandDir", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FullName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "UnsafeGetFullName", $.String);

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Exists", $.Boolean);

    $.Property({Static:false, Public:true }, "Root", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.File */ 

(function File$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.IO.File", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AppendText", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.StreamWriter"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Copy", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [
          $.String, $.Int32, 
          $asm_mscorlib.TypeRef("System.IO.FileOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [
          $.String, $.Int32, 
          $asm_mscorlib.TypeRef("System.IO.FileOptions"), $asm_mscorlib.TypeRef("System.Security.AccessControl.FileSecurity")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateText", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.StreamWriter"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Delete", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$.String, $asm_mscorlib.TypeRef("System.IO.FileMode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenRead", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenWrite", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $['Constant']({Static:true , Public:false}, "GetFileExInfoStandard", 0); 
    $['Constant']({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", 87); 
    $['Constant']({Static:true , Public:false}, "ERROR_ACCESS_DENIED", 5); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.FileInfo */ 

(function FileInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.FileSystemInfo"), 
      Name: "System.IO.FileInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.FileStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$asm_mscorlib.TypeRef("System.IO.FileMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [$asm_mscorlib.TypeRef("System.IO.FileMode"), $asm_mscorlib.TypeRef("System.IO.FileAccess")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Open", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.FileStream"), [
          $asm_mscorlib.TypeRef("System.IO.FileMode"), $asm_mscorlib.TypeRef("System.IO.FileAccess"), 
          $asm_mscorlib.TypeRef("System.IO.FileShare")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenRead", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.FileStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenText", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.StreamReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenWrite", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.IO.FileStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "_name", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true }, "DirectoryName", $.String);

    $.Property({Static:false, Public:true }, "Directory", $asm_mscorlib.TypeRef("System.IO.DirectoryInfo"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Exists", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.FileMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.FileMode", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CreateNew: 1, 
    Create: 2, 
    Open: 3, 
    OpenOrCreate: 4, 
    Truncate: 5, 
    Append: 6, 
  }
);

/* class System.IO.IOException */ 

(function IOException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.IO.IOException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_maybeFullPath", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.FileNotFoundException */ 

(function FileNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.IOException"), 
      Name: "System.IO.FileNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm_mscorlib.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "_fileName", $.String); 
    $['Field']({Static:false, Public:false}, "_fusionLog", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:true }, "FusionLog", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Stream */ 

(function Stream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.IO.Stream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm_mscorlib.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $['Constant']({Static:true , Public:false}, "_DefaultCopyBufferSize", 81920); 
    $['Field']({Static:false, Public:false}, "_activeReadWriteTask", $asm_mscorlib.TypeRef("System.IO.Stream+ReadWriteTask")); 
    $['Field']({Static:false, Public:false}, "_asyncActiveSemaphore", $asm_mscorlib.TypeRef("System.Threading.SemaphoreSlim")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IO.Stream+ReadWriteParameters */ 

(function ReadWriteParameters$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.IO.Stream+ReadWriteParameters", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "Offset", $.Int32); 
    $['Field']({Static:false, Public:false}, "Count", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
JSIL.DeclareNamespace("System.Threading.Tasks");
/* class System.Threading.Tasks.Task */ 

(function Task$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.Task", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Action"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Type, $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Delegate"), $.Object, 
          $.Type, $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Action`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Action`1", [$.Type]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Action`1", [$.Type]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Action`1", [$.Type]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Type]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Type]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.Action`2", [$.Type, $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Type, "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`3", [
            $.Type, $.Object, 
            "!!0"
          ]), $.Object], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $.Type, $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $.Type, $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $.Type, $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $.Type, $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $.Type, $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Delay", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Delay", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.TimeSpan"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Delay", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Delay", 
      new JSIL.MethodSignature($.Type, [$.Int32, $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromResult", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), ["!!0"], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.AggregateException"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Factory", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAwaiter", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.TaskAwaiter"))
    );

    $['Field']({Static:true , Public:false}, "t_currentTask", $.Type); 
    $['Field']({Static:true , Public:false}, "t_stackGuard", $asm_mscorlib.TypeRef("System.Threading.Tasks.StackGuard")); 
    $['Field']({Static:true , Public:false}, "s_taskIdCounter", $.Int32); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_factory", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory")); 
    $['Field']({Static:false, Public:false}, "m_taskId", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_action", $.Object); 
    $['Field']({Static:false, Public:false}, "m_stateObject", $.Object); 
    $['Field']({Static:false, Public:false}, "m_taskScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_parent", $.Type); 
    $['Field']({Static:false, Public:false}, "m_stateFlags", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Constant']({Static:true , Public:false}, "OptionsMask", 65535); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_STARTED", 65536); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_DELEGATE_INVOKED", 131072); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_DISPOSED", 262144); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", 524288); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_CANCELLATIONACKNOWLEDGED", 1048576); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_FAULTED", 2097152); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_CANCELED", 4194304); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_WAITING_ON_CHILDREN", 8388608); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_RAN_TO_COMPLETION", 16777216); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_WAITINGFORACTIVATION", 33554432); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_COMPLETION_RESERVED", 67108864); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_THREAD_WAS_ABORTED", 134217728); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", 268435456); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_EXECUTIONCONTEXT_IS_NULL", 536870912); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_TASKSCHEDULED_WAS_FIRED", 1073741824); 
    $['Constant']({Static:true , Public:false}, "TASK_STATE_COMPLETED_MASK", 23068672); 
    $['Constant']({Static:true , Public:false}, "CANCELLATION_REQUESTED", 1); 
    $['Field']({Static:false, Public:false}, "m_continuationObject", $asm_mscorlib.TypeRef("System.Object")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_taskCompletionSentinel", $.Object); 
    $['Field']({Static:true , Public:false}, "s_asyncDebuggingEnabled", $.Boolean); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_currentActiveTasks", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Type])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_activeTasksLock", $.Object); 
    $['Field']({Static:false, Public:false}, "m_contingentProperties", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task+ContingentProperties")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_taskCancelCallback", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_createContingentProperties", $asm_mscorlib.TypeRef("System.Func`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task+ContingentProperties")])); 
    $['Field']({Static:true , Public:false}, "s_completedTask", $.Type); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_IsExceptionObservedByParentPredicate", $asm_mscorlib.TypeRef("System.Predicate`1", [$.Type])); 
    $['Field']({Static:true , Public:false}, "s_ecCallback", $asm_mscorlib.TypeRef("System.Threading.ContextCallback")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_IsTaskContinuationNullPredicate", $asm_mscorlib.TypeRef("System.Predicate`1", [$.Object])); 
    $.Property({Static:false, Public:false}, "DebuggerDisplayMethodDescription", $.String);

    $.Property({Static:false, Public:false}, "Options", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"));

    $.Property({Static:false, Public:false}, "IsWaitNotificationEnabledOrNotRanToCompletion", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ShouldNotifyDebuggerOfWaitCompletion", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWaitNotificationEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:true , Public:true }, "CurrentId", $asm_mscorlib.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:true , Public:false}, "InternalCurrent", $.Type);

    $.Property({Static:true , Public:false}, "CurrentStackGuard", $asm_mscorlib.TypeRef("System.Threading.Tasks.StackGuard"));

    $.Property({Static:false, Public:true }, "Exception", $asm_mscorlib.TypeRef("System.AggregateException"));

    $.Property({Static:false, Public:true }, "Status", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskStatus"));

    $.Property({Static:false, Public:true }, "IsCanceled", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCancellationRequested", $.Boolean);

    $.Property({Static:false, Public:false}, "CancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:false}, "IsCancellationAcknowledged", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRanToCompletion", $.Boolean);

    $.Property({Static:false, Public:true }, "CreationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncWaitHandle", $asm_mscorlib.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false}, "ExecutingTaskScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:true , Public:true }, "Factory", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory"));

    $.Property({Static:true , Public:true }, "CompletedTask", $.Type);

    $.Property({Static:false, Public:false}, "CompletedEvent", $asm_mscorlib.TypeRef("System.Threading.ManualResetEventSlim"));

    $.Property({Static:false, Public:false}, "IsSelfReplicatingRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChildReplica", $.Boolean);

    $.Property({Static:false, Public:false}, "ActiveChildCount", $.Int32);

    $.Property({Static:false, Public:false}, "ExceptionRecorded", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFaulted", $.Boolean);

    $.Property({Static:false, Public:false}, "CapturedContext", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:false}, "IsExceptionObservedByParent", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDelegateInvoked", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "SavedStateForNextReplica", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "SavedStateFromPreviousReplica", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "HandedOverChildReplica", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Threading.IThreadPoolWorkItem"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IAsyncResult"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}"]; });

})();

/* class System.Threading.Tasks.Task+ContingentProperties */ 

(function ContingentProperties$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.Task+ContingentProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_capturedContext", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext")); 
    $['Field']({Static:false, Public:false}, "m_completionEvent", $asm_mscorlib.TypeRef("System.Threading.ManualResetEventSlim")); 
    $['Field']({Static:false, Public:false}, "m_exceptionsHolder", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskExceptionHolder")); 
    $['Field']({Static:false, Public:false}, "m_cancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken")); 
    $['Field']({Static:false, Public:false}, "m_cancellationRegistration", $asm_mscorlib.TypeRef("System.Threading.Tasks.Shared`1", [$asm_mscorlib.TypeRef("System.Threading.CancellationTokenRegistration")])); 
    $['Field']({Static:false, Public:false}, "m_internalCancellationRequested", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_completionCountdown", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_exceptionalChildren", $asm_mscorlib.TypeRef("System.Collections.Generic.List`1")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.Tasks.Task`1 */ 

(function Task$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), 
      Name: "System.Threading.Tasks.Task`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.GenericParameter("TResult"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Delegate"), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"])], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), "!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`3", [
            $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
            "!!0"
          ]), $.Object], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueWith", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`3", [
              $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), $.Object, 
              "!!0"
            ]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm_mscorlib.TypeRef("System.Threading.StackCrawlMark")])
        ], ["TNewResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Factory", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAwaiter", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.TaskAwaiter`1", [$.GenericParameter("TResult")]), null)
    );

    $['Field']({Static:false, Public:false}, "m_result", $.GenericParameter("TResult")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_Factory", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory`1", [$.GenericParameter("TResult")])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "TaskWhenAnyCast", $asm_mscorlib.TypeRef("System.Func`2", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task")]), $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])); 
    $.Property({Static:false, Public:false}, "DebuggerDisplayResultDescription", $.String);

    $.Property({Static:false, Public:false}, "DebuggerDisplayMethodDescription", $.String);

    $.Property({Static:false, Public:true }, "Result", $.GenericParameter("TResult"))
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm_mscorlib.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:false}, "ResultOnSuccess", $.GenericParameter("TResult"));

    $.GenericProperty({Static:true , Public:true }, "Factory", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskFactory`1", [$.GenericParameter("TResult")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}"]; });

})();

/* class System.IO.Stream+ReadWriteTask */ 

(function ReadWriteTask$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$asm_mscorlib.TypeRef("System.Int32")]), 
      Name: "System.IO.Stream+ReadWriteTask", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false, ReadOnly:true }, "_isRead", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_stream", $asm_mscorlib.TypeRef("System.IO.Stream")); 
    $['Field']({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_offset", $.Int32); 
    $['Field']({Static:false, Public:false}, "_count", $.Int32); 
    $['Field']({Static:false, Public:false}, "_callback", $asm_mscorlib.TypeRef("System.AsyncCallback")); 
    $['Field']({Static:false, Public:false}, "_context", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext")); 
    $['Field']({Static:true , Public:false}, "s_invokeAsyncCallback", $asm_mscorlib.TypeRef("System.Threading.ContextCallback")); 
    $.ImplementInterfaces(
      /* 3 */ $asm_mscorlib.TypeRef("System.Threading.Tasks.ITaskCompletionAction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.FileStream */ 

(function FileStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.Stream"), 
      Name: "System.IO.FileStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.IO.FileMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.Security.AccessControl.FileSystemRights"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions"), 
          $asm_mscorlib.TypeRef("System.Security.AccessControl.FileSecurity")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.Security.AccessControl.FileSystemRights"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions"), 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare"), 
          $.Int32, $asm_mscorlib.TypeRef("System.IO.FileOptions"), 
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Constant']({Static:true , Public:false}, "DefaultBufferSize", 4096); 
    $['Constant']({Static:true , Public:false}, "_canUseAsync", true); 
    $['Field']({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_fileName", $.String); 
    $['Field']({Static:false, Public:false}, "_isAsync", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_canRead", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_canWrite", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_canSeek", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_exposedHandle", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_isPipe", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_readPos", $.Int32); 
    $['Field']({Static:false, Public:false}, "_readLen", $.Int32); 
    $['Field']({Static:false, Public:false}, "_writePos", $.Int32); 
    $['Field']({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $['Field']({Static:false, Public:false}, "_handle", $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")); 
    $['Field']({Static:false, Public:false}, "_pos", $.Int64); 
    $['Field']({Static:false, Public:false}, "_appendStart", $.Int64); 
    $['Field']({Static:true , Public:false}, "s_endReadTask", $asm_mscorlib.TypeRef("System.AsyncCallback")); 
    $['Field']({Static:true , Public:false}, "s_endWriteTask", $asm_mscorlib.TypeRef("System.AsyncCallback")); 
    $['Field']({Static:true , Public:false}, "s_cancelReadHandler", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "s_cancelWriteHandler", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Constant']({Static:true , Public:false}, "FILE_ATTRIBUTE_NORMAL", 128); 
    $['Constant']({Static:true , Public:false}, "FILE_ATTRIBUTE_ENCRYPTED", 16384); 
    $['Constant']({Static:true , Public:false}, "FILE_FLAG_OVERLAPPED", 1073741824); 
    $['Constant']({Static:true , Public:false}, "GENERIC_READ", -2147483648); 
    $['Constant']({Static:true , Public:false}, "GENERIC_WRITE", 1073741824); 
    $['Constant']({Static:true , Public:false}, "FILE_BEGIN", 0); 
    $['Constant']({Static:true , Public:false}, "FILE_CURRENT", 1); 
    $['Constant']({Static:true , Public:false}, "FILE_END", 2); 
    $['Constant']({Static:true , Public:false}, "ERROR_BROKEN_PIPE", 109); 
    $['Constant']({Static:true , Public:false}, "ERROR_NO_DATA", 232); 
    $['Constant']({Static:true , Public:false}, "ERROR_HANDLE_EOF", 38); 
    $['Constant']({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", 87); 
    $['Constant']({Static:true , Public:false}, "ERROR_IO_PENDING", 997); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "NameInternal", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $.IntPtr);

    $.Property({Static:false, Public:true , Virtual:true }, "SafeFileHandle", $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryStream */ 

(function MemoryStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.Stream"), 
      Name: "System.IO.MemoryStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $['Field']({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_origin", $.Int32); 
    $['Field']({Static:false, Public:false}, "_position", $.Int32); 
    $['Field']({Static:false, Public:false}, "_length", $.Int32); 
    $['Field']({Static:false, Public:false}, "_capacity", $.Int32); 
    $['Field']({Static:false, Public:false}, "_expandable", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_writable", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_exposable", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_isOpen", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_lastReadTask", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.Int32])); 
    $['Constant']({Static:true , Public:false}, "MemStreamMaxLength", 2147483647); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Path */ 

(function Path$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.IO.Path", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(0, "paths", function (_) {
          _
        });

    $.ExternalMethod({Static:true , Public:true }, "GetDirectoryName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExtension", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileNameWithoutExtension", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInvalidFileNameChars", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInvalidPathChars", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsPathRooted", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "DirectorySeparatorChar", $.Char, "\\"); 
    $['Constant']({Static:true , Public:false}, "DirectorySeparatorCharAsString", "\\"); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "AltDirectorySeparatorChar", $.Char, "/"); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "VolumeSeparatorChar", $.Char, ":"); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "InvalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "TrimEndChars", $jsilcore.TypeRef("System.Array", [$.Char]), function ($pi) {
        return $asm_mscorlib.System.IO.LongPathHelper.s_trimEndChars;
      }); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "RealInvalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char]), function ($pi) {
        return $asm_mscorlib.System.IO.PathInternal.InvalidPathChars;
      }); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "InvalidPathCharsWithAdditionalChecks", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "InvalidFileNameChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "PathSeparator", $.Char, ";"); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "MaxPath", $.Int32, 260); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "MaxDirectoryLength", $.Int32, function ($pi) {
        return $asm_mscorlib.System.IO.PathInternal.MaxComponentLength;
      }); 
    $['Constant']({Static:true , Public:false}, "MAX_PATH", 260); 
    $['Constant']({Static:true , Public:false}, "MAX_DIRECTORY_PATH", 248); 
    $['Constant']({Static:true , Public:false}, "MaxLongPath", 32767); 
    $['Constant']({Static:true , Public:false}, "LongPathPrefix", "\\\\?\\"); 
    $['Constant']({Static:true , Public:false}, "UNCPathPrefix", "\\\\"); 
    $['Constant']({Static:true , Public:false}, "UNCLongPathPrefixToInsert", "?\\UNC\\"); 
    $['Constant']({Static:true , Public:false}, "UNCLongPathPrefix", "\\\\?\\UNC\\"); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_Base32Char", $jsilcore.TypeRef("System.Array", [$.Char])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.SeekOrigin */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.SeekOrigin", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Begin: 0, 
    Current: 1, 
    End: 2, 
  }
);

/* class System.IO.TextReader */ 

(function TextReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.IO.TextReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToEnd", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:true , Public:false}, "_ReadLineDelegate", $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.String])); 
    $['Field']({Static:true , Public:false}, "_ReadDelegate", $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.Int32])); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.StreamReader */ 

(function StreamReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.TextReader"), 
      Name: "System.IO.StreamReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndOfStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToEnd", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $['Constant']({Static:true , Public:false}, "DefaultFileStreamBufferSize", 4096); 
    $['Constant']({Static:true , Public:false}, "MinBufferSize", 128); 
    $['Field']({Static:false, Public:false}, "stream", $asm_mscorlib.TypeRef("System.IO.Stream")); 
    $['Field']({Static:false, Public:false}, "encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:false, Public:false}, "decoder", $asm_mscorlib.TypeRef("System.Text.Decoder")); 
    $['Field']({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "charBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "_preamble", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "charPos", $.Int32); 
    $['Field']({Static:false, Public:false}, "charLen", $.Int32); 
    $['Field']({Static:false, Public:false}, "byteLen", $.Int32); 
    $['Field']({Static:false, Public:false}, "bytePos", $.Int32); 
    $['Field']({Static:false, Public:false}, "_maxCharsPerBuffer", $.Int32); 
    $['Field']({Static:false, Public:false}, "_detectEncoding", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_checkPreamble", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_isBlocked", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_closable", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_asyncReadTask", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task")); 
    $.Property({Static:true , Public:false}, "DefaultBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseStream", $asm_mscorlib.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "LeaveOpen", $.Boolean);

    $.Property({Static:false, Public:true }, "EndOfStream", $.Boolean);

    $.Property({Static:false, Public:false}, "CharLen_Prop", $.Int32);

    $.Property({Static:false, Public:false}, "CharPos_Prop", $.Int32);

    $.Property({Static:false, Public:false}, "ByteLen_Prop", $.Int32);

    $.Property({Static:false, Public:false}, "BytePos_Prop", $.Int32);

    $.Property({Static:false, Public:false}, "Preamble_Prop", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "CheckPreamble_Prop", $.Boolean);

    $.Property({Static:false, Public:false}, "Decoder_Prop", $asm_mscorlib.TypeRef("System.Text.Decoder"));

    $.Property({Static:false, Public:false}, "DetectEncoding_Prop", $.Boolean);

    $.Property({Static:false, Public:false}, "CharBuffer_Prop", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "ByteBuffer_Prop", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "IsBlocked_Prop", $.Boolean);

    $.Property({Static:false, Public:false}, "Stream_Prop", $asm_mscorlib.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "MaxCharsPerBuffer_Prop", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.TextWriter */ 

(function TextWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.IO.TextWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "arg", function (_) {
          _
        });

    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $['Field']({Static:true , Public:false}, "_WriteCharDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_WriteStringDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_WriteCharArrayRangeDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_WriteLineCharDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_WriteLineStringDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_WriteLineCharArrayRangeDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:true , Public:false}, "_FlushDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Constant']({Static:true , Public:false}, "InitialNewLine", "\r\n"); 
    $['Field']({Static:false, Public:false}, "CoreNewLine", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "InternalFormatProvider", $asm_mscorlib.TypeRef("System.IFormatProvider")); 
    $.Property({Static:false, Public:true , Virtual:true }, "FormatProvider", $asm_mscorlib.TypeRef("System.IFormatProvider"));

    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "NewLine", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.StreamWriter */ 

(function StreamWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.TextWriter"), 
      Name: "System.IO.StreamWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.IO.Stream"), $asm_mscorlib.TypeRef("System.Text.Encoding"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Text.Encoding"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Text.Encoding"), $.Int32, 
          $.Boolean
        ])
    );

    $['Constant']({Static:true , Public:false}, "DefaultBufferSize", 1024); 
    $['Constant']({Static:true , Public:false}, "DefaultFileStreamBufferSize", 4096); 
    $['Constant']({Static:true , Public:false}, "MinBufferSize", 128); 
    $['Constant']({Static:true , Public:false}, "DontCopyOnWriteLineThreshold", 512); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "Null", $.Type); 
    $['Field']({Static:false, Public:false}, "stream", $asm_mscorlib.TypeRef("System.IO.Stream")); 
    $['Field']({Static:false, Public:false}, "encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:false, Public:false}, "encoder", $asm_mscorlib.TypeRef("System.Text.Encoder")); 
    $['Field']({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "charBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "charPos", $.Int32); 
    $['Field']({Static:false, Public:false}, "charLen", $.Int32); 
    $['Field']({Static:false, Public:false}, "autoFlush", $.Boolean); 
    $['Field']({Static:false, Public:false}, "haveWrittenPreamble", $.Boolean); 
    $['Field']({Static:false, Public:false}, "closable", $.Boolean); 
    $['Field']({Static:false, Public:false}, "mdaHelper", $asm_mscorlib.TypeRef("System.IO.StreamWriter+MdaHelper")); 
    $['Field']({Static:false, Public:false}, "_asyncWriteTask", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task")); 
    $['Field']({Static:true , Public:false}, "_UTF8NoBOM", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $.Property({Static:true , Public:false}, "UTF8NoBOM", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "AutoFlush", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseStream", $asm_mscorlib.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "LeaveOpen", $.Boolean);

    $.Property({Static:false, Public:false}, "HaveWrittenPreamble", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "CharPos_Prop", $.Int32);

    $.Property({Static:false, Public:false}, "HaveWrittenPreamble_Prop", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.StreamWriter+MdaHelper */ 

(function MdaHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.IO.StreamWriter+MdaHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "streamWriter", $asm_mscorlib.TypeRef("System.IO.StreamWriter")); 
    $['Field']({Static:false, Public:false}, "allocatedCallstack", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.StringReader */ 

(function StringReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.TextReader"), 
      Name: "System.IO.StringReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $['Field']({Static:false, Public:false}, "_s", $.String); 
    $['Field']({Static:false, Public:false}, "_pos", $.Int32); 
    $['Field']({Static:false, Public:false}, "_length", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.StringWriter */ 

(function StringWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.TextWriter"), 
      Name: "System.IO.StringWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IFormatProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Text.StringBuilder"), $asm_mscorlib.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:true , Public:false}, "m_encoding", $asm_mscorlib.TypeRef("System.Text.UnicodeEncoding")); 
    $['Field']({Static:false, Public:false}, "_sb", $asm_mscorlib.TypeRef("System.Text.StringBuilder")); 
    $['Field']({Static:false, Public:false}, "_isOpen", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO.IsolatedStorage");
/* enum System.IO.IsolatedStorage.IsolatedStorageScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.IsolatedStorage.IsolatedStorageScope", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    User: 1, 
    Domain: 2, 
    Assembly: 4, 
    Roaming: 8, 
    Machine: 16, 
    Application: 32, 
  }
);

/* class System.IO.IsolatedStorage.IsolatedStorage */ 

(function IsolatedStorage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.IO.IsolatedStorage.IsolatedStorage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "c_Assembly", 5); 
    $['Constant']({Static:true , Public:false}, "c_Domain", 7); 
    $['Constant']({Static:true , Public:false}, "c_AssemblyRoaming", 13); 
    $['Constant']({Static:true , Public:false}, "c_DomainRoaming", 15); 
    $['Constant']({Static:true , Public:false}, "c_MachineAssembly", 20); 
    $['Constant']({Static:true , Public:false}, "c_MachineDomain", 22); 
    $['Constant']({Static:true , Public:false}, "c_AppUser", 33); 
    $['Constant']({Static:true , Public:false}, "c_AppMachine", 48); 
    $['Constant']({Static:true , Public:false}, "c_AppUserRoaming", 41); 
    $['Constant']({Static:true , Public:false}, "s_Publisher", "Publisher"); 
    $['Constant']({Static:true , Public:false}, "s_StrongName", "StrongName"); 
    $['Constant']({Static:true , Public:false}, "s_Site", "Site"); 
    $['Constant']({Static:true , Public:false}, "s_Url", "Url"); 
    $['Constant']({Static:true , Public:false}, "s_Zone", "Zone"); 
    $['Field']({Static:false, Public:false}, "m_Quota", $.UInt64); 
    $['Field']({Static:false, Public:false}, "m_ValidQuota", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_DomainIdentity", $.Object); 
    $['Field']({Static:false, Public:false}, "m_AssemIdentity", $.Object); 
    $['Field']({Static:false, Public:false}, "m_AppIdentity", $.Object); 
    $['Field']({Static:false, Public:false}, "m_DomainName", $.String); 
    $['Field']({Static:false, Public:false}, "m_AssemName", $.String); 
    $['Field']({Static:false, Public:false}, "m_AppName", $.String); 
    $['Field']({Static:false, Public:false}, "m_Scope", $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageScope")); 
    $['Field']({Static:true , Public:false}, "s_PermDomain", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermMachineDomain", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermDomainRoaming", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAssem", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermMachineAssem", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAssemRoaming", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAppUser", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAppMachine", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAppUserRoaming", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:true , Public:false}, "s_PermControlEvidence", $asm_mscorlib.TypeRef("System.Security.Permissions.SecurityPermission")); 
    $['Field']({Static:true , Public:false}, "s_PermUnrestricted", $asm_mscorlib.TypeRef("System.Security.PermissionSet")); 
    $.Property({Static:false, Public:false, Virtual:true }, "SeparatorExternal", $.Char);

    $.Property({Static:false, Public:false, Virtual:true }, "SeparatorInternal", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "MaximumSize", $.UInt64);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentSize", $.UInt64);

    $.Property({Static:false, Public:true , Virtual:true }, "UsedSize", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Quota", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "AvailableFreeSpace", $.Int64);

    $.Property({Static:false, Public:true }, "DomainIdentity", $.Object);

    $.Property({Static:false, Public:true }, "ApplicationIdentity", $.Object);

    $.Property({Static:false, Public:true }, "AssemblyIdentity", $.Object);

    $.Property({Static:false, Public:true }, "Scope", $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageScope"));

    $.Property({Static:false, Public:false}, "DomainName", $.String);

    $.Property({Static:false, Public:false}, "AssemName", $.String);

    $.Property({Static:false, Public:false}, "AppName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.IsolatedStorage.IsolatedStorageFileStream */ 

(function IsolatedStorageFileStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.FileStream"), 
      Name: "System.IO.IsolatedStorage.IsolatedStorageFileStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "s_BlockSize", 1024); 
    $['Constant']({Static:true , Public:false}, "s_BackSlash", "\\"); 
    $['Field']({Static:false, Public:false}, "m_fs", $asm_mscorlib.TypeRef("System.IO.FileStream")); 
    $['Field']({Static:false, Public:false}, "m_isf", $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageFile")); 
    $['Field']({Static:false, Public:false}, "m_GivenPath", $.String); 
    $['Field']({Static:false, Public:false}, "m_FullPath", $.String); 
    $['Field']({Static:false, Public:false}, "m_OwnedStore", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $.IntPtr);

    $.Property({Static:false, Public:true , Virtual:true }, "SafeFileHandle", $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IO.IsolatedStorage.INormalizeForIsolatedStorage */ 

JSIL.MakeInterface(
  "System.IO.IsolatedStorage.INormalizeForIsolatedStorage", true, [], function ($) {
  }, []);

/* class System.IO.IsolatedStorage.IsolatedStorageFile */ 

(function IsolatedStorageFile$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorage"), 
      Name: "System.IO.IsolatedStorage.IsolatedStorageFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateFile", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageFileStream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetUserStoreForAssembly", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageFileStream"), [$.String, $asm_mscorlib.TypeRef("System.IO.FileMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageFileStream"), [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageFileStream"), [
          $.String, $asm_mscorlib.TypeRef("System.IO.FileMode"), 
          $asm_mscorlib.TypeRef("System.IO.FileAccess"), $asm_mscorlib.TypeRef("System.IO.FileShare")
        ])
    );

    $['Constant']({Static:true , Public:false}, "s_BlockSize", 1024); 
    $['Constant']({Static:true , Public:false}, "s_DirSize", 1024); 
    $['Constant']({Static:true , Public:false}, "s_name", "file.store"); 
    $['Constant']({Static:true , Public:false}, "s_Files", "Files"); 
    $['Constant']({Static:true , Public:false}, "s_AssemFiles", "AssemFiles"); 
    $['Constant']({Static:true , Public:false}, "s_AppFiles", "AppFiles"); 
    $['Constant']({Static:true , Public:false}, "s_IDFile", "identity.dat"); 
    $['Constant']({Static:true , Public:false}, "s_InfoFile", "info.dat"); 
    $['Constant']({Static:true , Public:false}, "s_AppInfoFile", "appinfo.dat"); 
    $['Field']({Static:true , Public:false}, "s_RootDirUser", $asm_mscorlib.TypeRef("System.String")); 
    $['Field']({Static:true , Public:false}, "s_RootDirMachine", $asm_mscorlib.TypeRef("System.String")); 
    $['Field']({Static:true , Public:false}, "s_RootDirRoaming", $asm_mscorlib.TypeRef("System.String")); 
    $['Field']({Static:true , Public:false}, "s_appDataDir", $asm_mscorlib.TypeRef("System.String")); 
    $['Field']({Static:true , Public:false}, "s_PermUser", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $['Field']({Static:true , Public:false}, "s_PermMachine", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $['Field']({Static:true , Public:false}, "s_PermRoaming", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $['Field']({Static:true , Public:false}, "s_PermAdminUser", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageFilePermission")); 
    $['Field']({Static:false, Public:false}, "m_fiop", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $['Field']({Static:false, Public:false}, "m_RootDir", $.String); 
    $['Field']({Static:false, Public:false}, "m_InfoFile", $.String); 
    $['Field']({Static:false, Public:false}, "m_SyncObjectName", $.String); 
    $['Field']({Static:false, Public:false}, "m_handle", $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.SafeIsolatedStorageFileHandle")); 
    $['Field']({Static:false, Public:false}, "m_closed", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_bDisposed", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_internalLock", $.Object); 
    $['Field']({Static:false, Public:false}, "m_StoreScope", $asm_mscorlib.TypeRef("System.IO.IsolatedStorage.IsolatedStorageScope")); 
    $.Property({Static:false, Public:true , Virtual:true }, "UsedSize", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentSize", $.UInt64);

    $.Property({Static:false, Public:true , Virtual:true }, "AvailableFreeSpace", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Quota", $.Int64);

    $.Property({Static:true , Public:true }, "IsEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MaximumSize", $.UInt64);

    $.Property({Static:false, Public:false}, "RootDirectory", $.String);

    $.Property({Static:false, Public:false}, "Disposed", $.Boolean);

    $.Property({Static:false, Public:false}, "InvalidFileHandle", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.IsolatedStorage.SafeIsolatedStorageFileHandle */ 

(function SafeIsolatedStorageFileHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IO.IsolatedStorage.SafeIsolatedStorageFileHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security");
/* interface System.Security.ISecurityElementFactory */ 

JSIL.MakeInterface(
  "System.Security.ISecurityElementFactory", false, [], function ($) {
  }, []);

/* class System.Security.CodeAccessPermission */ 

(function CodeAccessPermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Security.CodeAccessPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Security.IPermission"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Security.ISecurityEncodable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Security.IStackWalk")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Security.IEvidenceFactory */ 

JSIL.MakeInterface(
  "System.Security.IEvidenceFactory", true, [], function ($) {
    $.Property({}, "Evidence");
  }, []);

/* interface System.Security.IPermission */ 

JSIL.MakeInterface(
  "System.Security.IPermission", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Security.ISecurityEncodable")]);

/* interface System.Security.ISecurityEncodable */ 

JSIL.MakeInterface(
  "System.Security.ISecurityEncodable", true, [], function ($) {
  }, []);

/* interface System.Security.ISecurityPolicyEncodable */ 

JSIL.MakeInterface(
  "System.Security.ISecurityPolicyEncodable", true, [], function ($) {
  }, []);

/* interface System.Security.IStackWalk */ 

JSIL.MakeInterface(
  "System.Security.IStackWalk", true, [], function ($) {
  }, []);

/* class System.Security.PermissionSet */ 

(function PermissionSet$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Security.PermissionSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_Unrestricted", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_allPermissionsDecoded", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_permSet", $asm_mscorlib.TypeRef("System.Security.Util.TokenBasedSet"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_ignoreTypeLoadFailures", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_serializedPermissionSet", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_CheckedForNonCas", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_ContainsCas", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_ContainsNonCas", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_permSetSaved", $asm_mscorlib.TypeRef("System.Security.Util.TokenBasedSet")); 
    $['Field']({Static:false, Public:false}, "readableonly", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_unrestrictedPermSet", $asm_mscorlib.TypeRef("System.Security.Util.TokenBasedSet")); 
    $['Field']({Static:false, Public:false}, "m_normalPermSet", $asm_mscorlib.TypeRef("System.Security.Util.TokenBasedSet")); 
    $['Field']({Static:false, Public:false}, "m_canUnrestrictedOverride", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_fullTrust", $.Type); 
    $['Constant']({Static:true , Public:false}, "s_str_PermissionSet", "PermissionSet"); 
    $['Constant']({Static:true , Public:false}, "s_str_Permission", "Permission"); 
    $['Constant']({Static:true , Public:false}, "s_str_IPermission", "IPermission"); 
    $['Constant']({Static:true , Public:false}, "s_str_Unrestricted", "Unrestricted"); 
    $['Constant']({Static:true , Public:false}, "s_str_PermissionUnion", "PermissionUnion"); 
    $['Constant']({Static:true , Public:false}, "s_str_PermissionIntersection", "PermissionIntersection"); 
    $['Constant']({Static:true , Public:false}, "s_str_PermissionUnrestrictedUnion", "PermissionUnrestrictedUnion"); 
    $['Constant']({Static:true , Public:false}, "s_str_PermissionUnrestrictedIntersection", "PermissionUnrestrictedIntersection"); 
    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "IgnoreTypeLoadFailures", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Security.ISecurityEncodable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Security.IStackWalk"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography");
/* interface System.Security.Cryptography.ICryptoTransform */ 

JSIL.MakeInterface(
  "System.Security.Cryptography.ICryptoTransform", true, [], function ($) {
    $.Property({}, "InputBlockSize");
    $.Property({}, "OutputBlockSize");
    $.Property({}, "CanTransformMultipleBlocks");
    $.Property({}, "CanReuseTransform");
  }, [$asm_mscorlib.TypeRef("System.IDisposable")]);

/* interface System.Security.Cryptography.ICspAsymmetricAlgorithm */ 

JSIL.MakeInterface(
  "System.Security.Cryptography.ICspAsymmetricAlgorithm", true, [], function ($) {
    $.Property({}, "CspKeyContainerInfo");
  }, []);

JSIL.DeclareNamespace("System.Security.Permissions");
/* class System.Security.Permissions.FileIOPermission */ 

(function FileIOPermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Security.Permissions.FileIOPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_read", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess")); 
    $['Field']({Static:false, Public:false}, "m_write", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess")); 
    $['Field']({Static:false, Public:false}, "m_append", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess")); 
    $['Field']({Static:false, Public:false}, "m_pathDiscovery", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess")); 
    $['Field']({Static:false, Public:false}, "m_viewAcl", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_changeAcl", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOAccess"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_unrestricted", $.Boolean); 
    $.Property({Static:false, Public:true }, "AllLocalFiles", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermissionAccess"));

    $.Property({Static:false, Public:true }, "AllFiles", $asm_mscorlib.TypeRef("System.Security.Permissions.FileIOPermissionAccess"));

    $.ImplementInterfaces(
      /* 3 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IUnrestrictedPermission"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IBuiltInPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Security.Permissions.IBuiltInPermission */ 

JSIL.MakeInterface(
  "System.Security.Permissions.IBuiltInPermission", false, [], function ($) {
  }, []);

/* class System.Security.Permissions.IsolatedStoragePermission */ 

(function IsolatedStoragePermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Security.Permissions.IsolatedStoragePermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_userQuota", $.Int64); 
    $['Field']({Static:false, Public:false}, "m_machineQuota", $.Int64); 
    $['Field']({Static:false, Public:false}, "m_expirationDays", $.Int64); 
    $['Field']({Static:false, Public:false}, "m_permanentData", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_allowed", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageContainment")); 
    $['Constant']({Static:true , Public:false}, "_strUserQuota", "UserQuota"); 
    $['Constant']({Static:true , Public:false}, "_strMachineQuota", "MachineQuota"); 
    $['Constant']({Static:true , Public:false}, "_strExpiry", "Expiry"); 
    $['Constant']({Static:true , Public:false}, "_strPermDat", "Permanent"); 
    $.Property({Static:false, Public:true }, "UserQuota", $.Int64);

    $.Property({Static:false, Public:true }, "UsageAllowed", $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStorageContainment"));

    $.ImplementInterfaces(
      /* 3 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Permissions.IsolatedStorageFilePermission */ 

(function IsolatedStorageFilePermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Security.Permissions.IsolatedStoragePermission"), 
      Name: "System.Security.Permissions.IsolatedStorageFilePermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
      /* 4 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IBuiltInPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Permissions.SecurityPermission */ 

(function SecurityPermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Security.Permissions.SecurityPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_flags", $asm_mscorlib.TypeRef("System.Security.Permissions.SecurityPermissionFlag")); 
    $['Constant']({Static:true , Public:false}, "_strHeaderAssertion", "Assertion"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderUnmanagedCode", "UnmanagedCode"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderExecution", "Execution"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderSkipVerification", "SkipVerification"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlThread", "ControlThread"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlEvidence", "ControlEvidence"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlPolicy", "ControlPolicy"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderSerializationFormatter", "SerializationFormatter"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlDomainPolicy", "ControlDomainPolicy"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlPrincipal", "ControlPrincipal"); 
    $['Constant']({Static:true , Public:false}, "_strHeaderControlAppDomain", "ControlAppDomain"); 
    $.Property({Static:false, Public:true }, "Flags", $asm_mscorlib.TypeRef("System.Security.Permissions.SecurityPermissionFlag"));

    $.ImplementInterfaces(
      /* 3 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IUnrestrictedPermission"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Security.Permissions.IBuiltInPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Security.Permissions.IUnrestrictedPermission */ 

JSIL.MakeInterface(
  "System.Security.Permissions.IUnrestrictedPermission", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Security.Principal");
/* interface System.Security.Principal.IIdentity */ 

JSIL.MakeInterface(
  "System.Security.Principal.IIdentity", true, [], function ($) {
    $.Property({}, "Name");
    $.Property({}, "AuthenticationType");
    $.Property({}, "IsAuthenticated");
  }, []);

/* interface System.Security.Principal.IPrincipal */ 

JSIL.MakeInterface(
  "System.Security.Principal.IPrincipal", true, [], function ($) {
    $.Property({}, "Identity");
  }, []);

JSIL.DeclareNamespace("System.Security.Policy");
/* interface System.Security.Policy.IUnionSemanticCodeGroup */ 

JSIL.MakeInterface(
  "System.Security.Policy.IUnionSemanticCodeGroup", false, [], function ($) {
  }, []);

/* interface System.Security.Policy.ILegacyEvidenceAdapter */ 

JSIL.MakeInterface(
  "System.Security.Policy.ILegacyEvidenceAdapter", false, [], function ($) {
    $.Property({}, "EvidenceObject");
    $.Property({}, "EvidenceType");
  }, []);

/* interface System.Security.Policy.IIdentityPermissionFactory */ 

JSIL.MakeInterface(
  "System.Security.Policy.IIdentityPermissionFactory", true, [], function ($) {
  }, []);

/* interface System.Security.Policy.IConstantMembershipCondition */ 

JSIL.MakeInterface(
  "System.Security.Policy.IConstantMembershipCondition", false, [], function ($) {
  }, []);

/* interface System.Security.Policy.IDelayEvaluatedEvidence */ 

JSIL.MakeInterface(
  "System.Security.Policy.IDelayEvaluatedEvidence", false, [], function ($) {
    $.Property({}, "IsVerified");
    $.Property({}, "WasUsed");
  }, []);

/* interface System.Security.Policy.IMembershipCondition */ 

JSIL.MakeInterface(
  "System.Security.Policy.IMembershipCondition", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Security.ISecurityEncodable"), $asm_mscorlib.TypeRef("System.Security.ISecurityPolicyEncodable")]);

/* interface System.Security.Policy.IReportMatchMembershipCondition */ 

JSIL.MakeInterface(
  "System.Security.Policy.IReportMatchMembershipCondition", false, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Security.Policy.IMembershipCondition"), $asm_mscorlib.TypeRef("System.Security.ISecurityEncodable"), $asm_mscorlib.TypeRef("System.Security.ISecurityPolicyEncodable")]);

/* interface System.Security.Policy.IRuntimeEvidenceFactory */ 

JSIL.MakeInterface(
  "System.Security.Policy.IRuntimeEvidenceFactory", false, [], function ($) {
    $.Property({}, "Target");
  }, []);

/* interface System.Security.Policy.IApplicationTrustManager */ 

JSIL.MakeInterface(
  "System.Security.Policy.IApplicationTrustManager", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Security.ISecurityEncodable")]);

JSIL.DeclareNamespace("System.Security.Util");
/* class System.Security.Util.Hex */ 

(function Hex$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Util.Hex", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Security.Util.Tokenizer+ITokenReader */ 

JSIL.MakeInterface(
  "System.Security.Util.Tokenizer+ITokenReader", false, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Resources");
/* interface System.Resources.IResourceGroveler */ 

JSIL.MakeInterface(
  "System.Resources.IResourceGroveler", false, [], function ($) {
  }, []);

/* interface System.Resources.IResourceReader */ 

JSIL.MakeInterface(
  "System.Resources.IResourceReader", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Collections.IEnumerable"), $asm_mscorlib.TypeRef("System.IDisposable")]);

/* interface System.Resources.IResourceWriter */ 

JSIL.MakeInterface(
  "System.Resources.IResourceWriter", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.IDisposable")]);

/* class System.Resources.WindowsRuntimeResourceManagerBase */ 

(function WindowsRuntimeResourceManagerBase$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Resources.WindowsRuntimeResourceManagerBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Property({Static:false, Public:true , Virtual:true }, "GlobalResourceContextBestFitCultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Resources.PRIExceptionInfo */ 

(function PRIExceptionInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Resources.PRIExceptionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:true }, "_PackageSimpleName", $.String); 
    $['Field']({Static:false, Public:true }, "_ResWFile", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Resources.ResourceManager */ 

(function ResourceManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Resources.ResourceManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm_mscorlib.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm_mscorlib.TypeRef("System.Reflection.Assembly"), 
          $asm_mscorlib.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObject", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResourceSet", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Resources.ResourceSet"), [
          $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStream", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.UnmanagedMemoryStream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStream", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.IO.UnmanagedMemoryStream"), [$.String, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])
    );

    $['Field']({Static:false, Public:false}, "BaseNameField", $.String); 
    $['Field']({Static:false, Public:false}, "ResourceSets", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Field']({Static:false, Public:false}, "_resourceSets", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm_mscorlib.TypeRef("System.Resources.ResourceSet")])); 
    $['Field']({Static:false, Public:false}, "moduleDir", $.String); 
    $['Field']({Static:false, Public:false}, "MainAssembly", $asm_mscorlib.TypeRef("System.Reflection.Assembly")); 
    $['Field']({Static:false, Public:false}, "_locationInfo", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:false, Public:false}, "_userResourceSet", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:false, Public:false}, "_neutralResourcesCulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:false, Public:false}, "_lastUsedResourceCache", $asm_mscorlib.TypeRef("System.Resources.ResourceManager+CultureNameResourceSetPair")); 
    $['Field']({Static:false, Public:false}, "_ignoreCase", $.Boolean); 
    $['Field']({Static:false, Public:false}, "UseManifest", $.Boolean); 
    $['Field']({Static:false, Public:false}, "UseSatelliteAssem", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false}, "_installedSatelliteInfo", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Field']({Static:true , Public:false}, "_checkedConfigFile", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:false, Public:false}, "_fallbackLoc", $asm_mscorlib.TypeRef("System.Resources.UltimateResourceFallbackLocation"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_satelliteContractVersion", $asm_mscorlib.TypeRef("System.Version"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_lookedForSatelliteContractVersion", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_callingAssembly", $asm_mscorlib.TypeRef("System.Reflection.Assembly"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_callingAssembly", $asm_mscorlib.TypeRef("System.Reflection.RuntimeAssembly"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "resourceGroveler", $asm_mscorlib.TypeRef("System.Resources.IResourceGroveler")); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "MagicNumber", $.Int32, -1091581234); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "HeaderVersionNumber", $.Int32, 1); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "_minResourceSet", $asm_mscorlib.TypeRef("System.Type"), function ($pi) {
        return $asm_mscorlib.System.Resources.ResourceSet.__Type__;
      }); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "ResReaderTypeName", $.String); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "ResSetTypeName", $.String); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "MscorlibName", $.String); 
    $['Constant']({Static:true , Public:false}, "ResFileExtension", ".resources"); 
    $['Constant']({Static:true , Public:false}, "ResFileExtensionLength", 10); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "DEBUG", $.Int32, 0); 
    $['Field']({Static:true , Public:false}, "s_IsAppXModel", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:false, Public:false}, "_bUsingModernResourceManagement", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_WinRTResourceManager", $asm_mscorlib.TypeRef("System.Resources.WindowsRuntimeResourceManagerBase")); 
    $['Field']({Static:false, Public:false}, "_PRIonAppXInitialized", $.Boolean); 
    $['Field']({Static:false, Public:false}, "_PRIExceptionInfo", $asm_mscorlib.TypeRef("System.Resources.PRIExceptionInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "BaseName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ResourceSetType", $asm_mscorlib.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FallbackLocation", $asm_mscorlib.TypeRef("System.Resources.UltimateResourceFallbackLocation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Resources.ResourceManager+CultureNameResourceSetPair */ 

(function CultureNameResourceSetPair$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Resources.ResourceManager+CultureNameResourceSetPair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:true }, "lastCultureName", $.String); 
    $['Field']({Static:false, Public:true }, "lastResourceSet", $asm_mscorlib.TypeRef("System.Resources.ResourceSet")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Resources.ResourceSet */ 

(function ResourceSet$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Resources.ResourceSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Resources.IResourceReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $['Field']({Static:false, Public:false}, "Reader", $asm_mscorlib.TypeRef("System.Resources.IResourceReader")); 
    $['Field']({Static:false, Public:false}, "Table", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Field']({Static:false, Public:false}, "_caseInsensitiveTable", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Resources.UltimateResourceFallbackLocation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Resources.UltimateResourceFallbackLocation", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    MainAssembly: 0, 
    Satellite: 1, 
  }
);

JSIL.DeclareNamespace("System.Globalization");
/* class System.Globalization.Calendar */ 

(function Calendar$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.Calendar", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "TicksPerMillisecond", 10000); 
    $['Constant']({Static:true , Public:false}, "TicksPerSecond", 10000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerMinute", 600000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerHour", 36000000000); 
    $['Constant']({Static:true , Public:false}, "TicksPerDay", 864000000000); 
    $['Constant']({Static:true , Public:false}, "MillisPerSecond", 1000); 
    $['Constant']({Static:true , Public:false}, "MillisPerMinute", 60000); 
    $['Constant']({Static:true , Public:false}, "MillisPerHour", 3600000); 
    $['Constant']({Static:true , Public:false}, "MillisPerDay", 86400000); 
    $['Constant']({Static:true , Public:false}, "DaysPerYear", 365); 
    $['Constant']({Static:true , Public:false}, "DaysPer4Years", 1461); 
    $['Constant']({Static:true , Public:false}, "DaysPer100Years", 36524); 
    $['Constant']({Static:true , Public:false}, "DaysPer400Years", 146097); 
    $['Constant']({Static:true , Public:false}, "DaysTo10000", 3652059); 
    $['Constant']({Static:true , Public:false}, "MaxMillis", 315537897600000); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN", 1); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN_US", 2); 
    $['Constant']({Static:true , Public:false}, "CAL_JAPAN", 3); 
    $['Constant']({Static:true , Public:false}, "CAL_TAIWAN", 4); 
    $['Constant']({Static:true , Public:false}, "CAL_KOREA", 5); 
    $['Constant']({Static:true , Public:false}, "CAL_HIJRI", 6); 
    $['Constant']({Static:true , Public:false}, "CAL_THAI", 7); 
    $['Constant']({Static:true , Public:false}, "CAL_HEBREW", 8); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN_ME_FRENCH", 9); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN_ARABIC", 10); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN_XLIT_ENGLISH", 11); 
    $['Constant']({Static:true , Public:false}, "CAL_GREGORIAN_XLIT_FRENCH", 12); 
    $['Constant']({Static:true , Public:false}, "CAL_JULIAN", 13); 
    $['Constant']({Static:true , Public:false}, "CAL_JAPANESELUNISOLAR", 14); 
    $['Constant']({Static:true , Public:false}, "CAL_CHINESELUNISOLAR", 15); 
    $['Constant']({Static:true , Public:false}, "CAL_SAKA", 16); 
    $['Constant']({Static:true , Public:false}, "CAL_LUNAR_ETO_CHN", 17); 
    $['Constant']({Static:true , Public:false}, "CAL_LUNAR_ETO_KOR", 18); 
    $['Constant']({Static:true , Public:false}, "CAL_LUNAR_ETO_ROKUYOU", 19); 
    $['Constant']({Static:true , Public:false}, "CAL_KOREANLUNISOLAR", 20); 
    $['Constant']({Static:true , Public:false}, "CAL_TAIWANLUNISOLAR", 21); 
    $['Constant']({Static:true , Public:false}, "CAL_PERSIAN", 22); 
    $['Constant']({Static:true , Public:false}, "CAL_UMALQURA", 23); 
    $['Field']({Static:false, Public:false}, "m_currentEraValue", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_isReadOnly", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:true }, "CurrentEra", 0); 
    $['Field']({Static:false, Public:false}, "twoDigitYearMax", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "MinSupportedDateTime", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "MaxSupportedDateTime", $asm_mscorlib.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false, Virtual:true }, "ID", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCalendarID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AlgorithmType", $asm_mscorlib.TypeRef("System.Globalization.CalendarAlgorithmType"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentEraValue", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Eras", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false, Virtual:true }, "DaysInYearBeforeMinSupportedYear", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "TwoDigitYearMax", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.CompareInfo */ 

(function CompareInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.CompareInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "ValidIndexMaskOffFlags", -32); 
    $['Constant']({Static:true , Public:false}, "ValidCompareMaskOffFlags", -536870944); 
    $['Constant']({Static:true , Public:false}, "ValidHashCodeOfStringMaskOffFlags", -32); 
    $['Field']({Static:false, Public:false}, "m_name", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_sortName", $.String); 
    $['Field']({Static:false, Public:false}, "m_dataHandle", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "m_handleOrigin", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "win32LCID", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "culture", $.Int32); 
    $['Constant']({Static:true , Public:false}, "LINGUISTIC_IGNORECASE", 16); 
    $['Constant']({Static:true , Public:false}, "NORM_IGNORECASE", 1); 
    $['Constant']({Static:true , Public:false}, "NORM_IGNOREKANATYPE", 65536); 
    $['Constant']({Static:true , Public:false}, "LINGUISTIC_IGNOREDIACRITIC", 32); 
    $['Constant']({Static:true , Public:false}, "NORM_IGNORENONSPACE", 2); 
    $['Constant']({Static:true , Public:false}, "NORM_IGNORESYMBOLS", 4); 
    $['Constant']({Static:true , Public:false}, "NORM_IGNOREWIDTH", 131072); 
    $['Constant']({Static:true , Public:false}, "SORT_STRINGSORT", 4096); 
    $['Constant']({Static:true , Public:false}, "COMPARE_OPTIONS_ORDINAL", 1073741824); 
    $['Constant']({Static:true , Public:false}, "NORM_LINGUISTIC_CASING", 134217728); 
    $['Constant']({Static:true , Public:false}, "RESERVED_FIND_ASCII_STRING", 536870912); 
    $['Constant']({Static:true , Public:false}, "SORT_VERSION_WHIDBEY", 4096); 
    $['Constant']({Static:true , Public:false}, "SORT_VERSION_V4", 393473); 
    $['Field']({Static:false, Public:false}, "m_SortVersion", $asm_mscorlib.TypeRef("System.Globalization.SortVersion"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "LCID", $.Int32);

    $.Property({Static:true , Public:false}, "IsLegacy20SortingBehaviorRequested", $.Boolean);

    $.Property({Static:true , Public:false}, "InternalSortVersion", $.UInt32);

    $.Property({Static:false, Public:true }, "Version", $asm_mscorlib.TypeRef("System.Globalization.SortVersion"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.CultureInfo */ 

(function CultureInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.CultureInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Globalization.CultureData"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentCulture", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentUICulture", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InvariantCulture", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TwoLetterISOLanguageName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseUserOverride", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCultureByName", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCultureInfo", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCultureInfo", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCultureInfo", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCultureInfoByIetfLanguageTag", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "m_isReadOnly", $.Boolean); 
    $['Field']({Static:false, Public:false}, "compareInfo", $asm_mscorlib.TypeRef("System.Globalization.CompareInfo")); 
    $['Field']({Static:false, Public:false}, "textInfo", $asm_mscorlib.TypeRef("System.Globalization.TextInfo")); 
    $['Field']({Static:false, Public:false}, "regionInfo", $asm_mscorlib.TypeRef("System.Globalization.RegionInfo")); 
    $['Field']({Static:false, Public:false}, "numInfo", $asm_mscorlib.TypeRef("System.Globalization.NumberFormatInfo")); 
    $['Field']({Static:false, Public:false}, "dateTimeInfo", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatInfo")); 
    $['Field']({Static:false, Public:false}, "calendar", $asm_mscorlib.TypeRef("System.Globalization.Calendar")); 
    $['Field']({Static:false, Public:false}, "m_dataItem", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "cultureID", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_cultureData", $asm_mscorlib.TypeRef("System.Globalization.CultureData")); 
    $['Field']({Static:false, Public:false}, "m_isInherited", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_isSafeCrossDomain", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_createdDomainID", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_consoleFallbackCulture", $.Type); 
    $['Field']({Static:false, Public:false}, "m_name", $.String); 
    $['Field']({Static:false, Public:false}, "m_nonSortName", $.String); 
    $['Field']({Static:false, Public:false}, "m_sortName", $.String); 
    $['Field']({Static:true , Public:false}, "s_userDefaultCulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_InvariantCultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_userDefaultUICulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_InstalledUICultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_DefaultThreadCurrentUICulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_DefaultThreadCurrentCulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:true , Public:false}, "s_LcidCachedCultures", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Field']({Static:true , Public:false}, "s_NameCachedCultures", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Field']({Static:true , Public:false}, "s_WindowsRuntimeResourceManager", $asm_mscorlib.TypeRef("System.Resources.WindowsRuntimeResourceManagerBase")); 
    $['Field']({Static:true , Public:false}, "ts_IsDoingAppXCultureInfoLookup", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_parent", $.Type); 
    $['Constant']({Static:true , Public:false}, "LOCALE_NEUTRAL", 0); 
    $['Constant']({Static:true , Public:false}, "LOCALE_USER_DEFAULT", 1024); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SYSTEM_DEFAULT", 2048); 
    $['Constant']({Static:true , Public:false}, "LOCALE_CUSTOM_DEFAULT", 3072); 
    $['Constant']({Static:true , Public:false}, "LOCALE_CUSTOM_UNSPECIFIED", 4096); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INVARIANT", 127); 
    $['Constant']({Static:true , Public:false}, "LOCALE_TRADITIONAL_SPANISH", 1034); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "init", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_useUserOverride", $.Boolean); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SORTID_MASK", 983040); 
    $['Field']({Static:true , Public:false}, "s_isTaiwanSku", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:true , Public:false}, "s_haveIsTaiwanSku", $asm_mscorlib.TypeRef("System.Boolean")); 
    $.Property({Static:false, Public:false}, "IsSafeCrossDomain", $.Boolean);

    $.Property({Static:false, Public:false}, "CreatedDomainID", $.Int32);

    $.Property({Static:true , Public:true }, "CurrentCulture", $.Type);

    $.Property({Static:true , Public:false}, "UserDefaultCulture", $.Type);

    $.Property({Static:true , Public:false}, "UserDefaultUICulture", $.Type);

    $.Property({Static:true , Public:true }, "CurrentUICulture", $.Type);

    $.Property({Static:true , Public:true }, "InstalledUICulture", $.Type);

    $.Property({Static:true , Public:true }, "DefaultThreadCurrentCulture", $.Type);

    $.Property({Static:true , Public:true }, "DefaultThreadCurrentUICulture", $.Type);

    $.Property({Static:true , Public:true }, "InvariantCulture", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "LCID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "KeyboardLayoutId", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "SortName", $.String);

    $.Property({Static:false, Public:true }, "IetfLanguageTag", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NativeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EnglishName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TwoLetterISOLanguageName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterISOLanguageName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterWindowsLanguageName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CompareInfo", $asm_mscorlib.TypeRef("System.Globalization.CompareInfo"));

    $.Property({Static:false, Public:false}, "Region", $asm_mscorlib.TypeRef("System.Globalization.RegionInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "TextInfo", $asm_mscorlib.TypeRef("System.Globalization.TextInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNeutralCulture", $.Boolean);

    $.Property({Static:false, Public:true }, "CultureTypes", $asm_mscorlib.TypeRef("System.Globalization.CultureTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "NumberFormat", $asm_mscorlib.TypeRef("System.Globalization.NumberFormatInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "DateTimeFormat", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Calendar", $asm_mscorlib.TypeRef("System.Globalization.Calendar"));

    $.Property({Static:false, Public:true , Virtual:true }, "OptionalCalendars", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Globalization.Calendar")]));

    $.Property({Static:false, Public:true }, "UseUserOverride", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "HasInvariantCultureName", $.Boolean);

    $.Property({Static:true , Public:false}, "IsTaiwanSku", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IFormatProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.DateTimeFormatInfo */ 

(function DateTimeFormatInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.DateTimeFormatInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:true , Public:false}, "invariantInfo", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatInfo")); 
    $['Field']({Static:false, Public:false}, "m_cultureData", $asm_mscorlib.TypeRef("System.Globalization.CultureData")); 
    $['Field']({Static:false, Public:false}, "m_name", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_langName", $.String); 
    $['Field']({Static:false, Public:false}, "m_compareInfo", $asm_mscorlib.TypeRef("System.Globalization.CompareInfo")); 
    $['Field']({Static:false, Public:false}, "m_cultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:false, Public:false}, "amDesignator", $.String); 
    $['Field']({Static:false, Public:false}, "pmDesignator", $.String); 
    $['Field']({Static:false, Public:false}, "dateSeparator", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "generalShortTimePattern", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "generalLongTimePattern", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "timeSeparator", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "monthDayPattern", $.String); 
    $['Field']({Static:false, Public:false}, "dateTimeOffsetPattern", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:false}, "rfc1123Pattern", "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"); 
    $['Constant']({Static:true , Public:false}, "sortableDateTimePattern", "yyyy'-'MM'-'dd'T'HH':'mm':'ss"); 
    $['Constant']({Static:true , Public:false}, "universalSortableDateTimePattern", "yyyy'-'MM'-'dd HH':'mm':'ss'Z'"); 
    $['Field']({Static:false, Public:false}, "calendar", $asm_mscorlib.TypeRef("System.Globalization.Calendar")); 
    $['Field']({Static:false, Public:false}, "firstDayOfWeek", $.Int32); 
    $['Field']({Static:false, Public:false}, "calendarWeekRule", $.Int32); 
    $['Field']({Static:false, Public:false}, "fullDateTimePattern", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "abbreviatedDayNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "m_superShortDayNames", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "dayNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "abbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "monthNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "genitiveMonthNames", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_genitiveAbbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "leapYearMonthNames", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "longDatePattern", $.String); 
    $['Field']({Static:false, Public:false}, "shortDatePattern", $.String); 
    $['Field']({Static:false, Public:false}, "yearMonthPattern", $.String); 
    $['Field']({Static:false, Public:false}, "longTimePattern", $.String); 
    $['Field']({Static:false, Public:false}, "shortTimePattern", $.String); 
    $['Field']({Static:false, Public:false}, "allYearMonthPatterns", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "allShortDatePatterns", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "allLongDatePatterns", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "allShortTimePatterns", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "allLongTimePatterns", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "m_eraNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "m_abbrevEraNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "m_abbrevEnglishEraNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "optionalCalendars", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Constant']({Static:true , Public:false}, "DEFAULT_ALL_DATETIMES_SIZE", 132); 
    $['Field']({Static:false, Public:false}, "m_isReadOnly", $.Boolean); 
    $['Field']({Static:false, Public:false}, "formatFlags", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatFlags"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false}, "preferExistingTokens", $.Boolean); 
    $['Field']({Static:false, Public:false}, "CultureID", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_useUserOverride", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "bUseCalendarInfo", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "nDataItem", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_isDefaultCalendar", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false}, "s_calendarNativeNames", $asm_mscorlib.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_dateWords", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false}, "MonthSpaces", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "m_fullTimeSpanPositivePattern", $.String); 
    $['Field']({Static:false, Public:false}, "m_fullTimeSpanNegativePattern", $.String); 
    $['Constant']({Static:true , Public:false}, "InvalidDateTimeStyles", -256); 
    $['Field']({Static:false, Public:false}, "m_dtfiTokenHash", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Globalization.TokenHashValue")])); 
    $['Constant']({Static:true , Public:false}, "TOKEN_HASH_SIZE", 199); 
    $['Constant']({Static:true , Public:false}, "SECOND_PRIME", 197); 
    $['Constant']({Static:true , Public:false}, "dateSeparatorOrTimeZoneOffset", "-"); 
    $['Constant']({Static:true , Public:false}, "invariantDateSeparator", "/"); 
    $['Constant']({Static:true , Public:false}, "invariantTimeSeparator", ":"); 
    $['Constant']({Static:true , Public:false}, "IgnorablePeriod", "."); 
    $['Constant']({Static:true , Public:false}, "IgnorableComma", ","); 
    $['Constant']({Static:true , Public:false}, "CJKYearSuff", "\u5e74"); 
    $['Constant']({Static:true , Public:false}, "CJKMonthSuff", "\u6708"); 
    $['Constant']({Static:true , Public:false}, "CJKDaySuff", "\u65e5"); 
    $['Constant']({Static:true , Public:false}, "KoreanYearSuff", "\ub144"); 
    $['Constant']({Static:true , Public:false}, "KoreanMonthSuff", "\uc6d4"); 
    $['Constant']({Static:true , Public:false}, "KoreanDaySuff", "\uc77c"); 
    $['Constant']({Static:true , Public:false}, "KoreanHourSuff", "\uc2dc"); 
    $['Constant']({Static:true , Public:false}, "KoreanMinuteSuff", "\ubd84"); 
    $['Constant']({Static:true , Public:false}, "KoreanSecondSuff", "\ucd08"); 
    $['Constant']({Static:true , Public:false}, "CJKHourSuff", "\u6642"); 
    $['Constant']({Static:true , Public:false}, "ChineseHourSuff", "\u65f6"); 
    $['Constant']({Static:true , Public:false}, "CJKMinuteSuff", "\u5206"); 
    $['Constant']({Static:true , Public:false}, "CJKSecondSuff", "\u79d2"); 
    $['Constant']({Static:true , Public:false}, "JapaneseEraStart", "\u5143"); 
    $['Constant']({Static:true , Public:false}, "LocalTimeMark", "T"); 
    $['Constant']({Static:true , Public:false}, "KoreanLangName", "ko"); 
    $['Constant']({Static:true , Public:false}, "JapaneseLangName", "ja"); 
    $['Constant']({Static:true , Public:false}, "EnglishLangName", "en"); 
    $['Field']({Static:true , Public:false}, "s_jajpDTFI", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatInfo")); 
    $['Field']({Static:true , Public:false}, "s_zhtwDTFI", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatInfo")); 
    $.Property({Static:false, Public:false}, "CultureName", $.String);

    $.Property({Static:false, Public:false}, "Culture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:false}, "LanguageName", $.String);

    $.Property({Static:true , Public:true }, "InvariantInfo", $.Type);

    $.Property({Static:true , Public:true }, "CurrentInfo", $.Type);

    $.Property({Static:false, Public:true }, "AMDesignator", $.String);

    $.Property({Static:false, Public:true }, "Calendar", $asm_mscorlib.TypeRef("System.Globalization.Calendar"));

    $.Property({Static:false, Public:false}, "OptionalCalendars", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "EraNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AbbreviatedEraNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AbbreviatedEnglishEraNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "DateSeparator", $.String);

    $.Property({Static:false, Public:true }, "FirstDayOfWeek", $asm_mscorlib.TypeRef("System.DayOfWeek"));

    $.Property({Static:false, Public:true }, "CalendarWeekRule", $asm_mscorlib.TypeRef("System.Globalization.CalendarWeekRule"));

    $.Property({Static:false, Public:true }, "FullDateTimePattern", $.String);

    $.Property({Static:false, Public:true }, "LongDatePattern", $.String);

    $.Property({Static:false, Public:true }, "LongTimePattern", $.String);

    $.Property({Static:false, Public:true }, "MonthDayPattern", $.String);

    $.Property({Static:false, Public:true }, "PMDesignator", $.String);

    $.Property({Static:false, Public:true }, "RFC1123Pattern", $.String);

    $.Property({Static:false, Public:true }, "ShortDatePattern", $.String);

    $.Property({Static:false, Public:true }, "ShortTimePattern", $.String);

    $.Property({Static:false, Public:true }, "SortableDateTimePattern", $.String);

    $.Property({Static:false, Public:false}, "GeneralShortTimePattern", $.String);

    $.Property({Static:false, Public:false}, "GeneralLongTimePattern", $.String);

    $.Property({Static:false, Public:false}, "DateTimeOffsetPattern", $.String);

    $.Property({Static:false, Public:true }, "TimeSeparator", $.String);

    $.Property({Static:false, Public:true }, "UniversalSortableDateTimePattern", $.String);

    $.Property({Static:false, Public:true }, "YearMonthPattern", $.String);

    $.Property({Static:false, Public:true }, "AbbreviatedDayNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ShortestDayNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "DayNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "AbbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "MonthNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "HasSpacesInMonthNames", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSpacesInDayNames", $.Boolean);

    $.Property({Static:false, Public:false}, "AllYearMonthPatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AllShortDatePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AllShortTimePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AllLongDatePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "AllLongTimePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "UnclonedYearMonthPatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "UnclonedShortDatePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "UnclonedLongDatePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "UnclonedShortTimePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "UnclonedLongTimePatterns", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "NativeCalendarName", $.String);

    $.Property({Static:false, Public:true }, "AbbreviatedMonthGenitiveNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "MonthGenitiveNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "FullTimeSpanPositivePattern", $.String);

    $.Property({Static:false, Public:false}, "FullTimeSpanNegativePattern", $.String);

    $.Property({Static:false, Public:false}, "CompareInfo", $asm_mscorlib.TypeRef("System.Globalization.CompareInfo"));

    $.Property({Static:false, Public:false}, "FormatFlags", $asm_mscorlib.TypeRef("System.Globalization.DateTimeFormatFlags"));

    $.Property({Static:false, Public:false}, "HasForceTwoDigitYears", $.Boolean);

    $.Property({Static:false, Public:false}, "HasYearMonthAdjustment", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IFormatProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.CodePageDataItem */ 

(function CodePageDataItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.CodePageDataItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_dataIndex", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_uiFamilyCodePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_webName", $.String); 
    $['Field']({Static:false, Public:false}, "m_headerName", $.String); 
    $['Field']({Static:false, Public:false}, "m_bodyName", $.String); 
    $['Field']({Static:false, Public:false}, "m_flags", $.UInt32); 
    $.Property({Static:false, Public:true }, "WebName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UIFamilyCodePage", $.Int32);

    $.Property({Static:false, Public:true }, "HeaderName", $.String);

    $.Property({Static:false, Public:true }, "BodyName", $.String);

    $.Property({Static:false, Public:true }, "Flags", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.RegionInfo */ 

(function RegionInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.RegionInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_name", $.String); 
    $['Field']({Static:false, Public:false}, "m_cultureData", $asm_mscorlib.TypeRef("System.Globalization.CultureData")); 
    $['Field']({Static:true , Public:false}, "s_currentRegionInfo", $asm_mscorlib.TypeRef("System.Globalization.RegionInfo")); 
    $['Field']({Static:false, Public:false}, "m_cultureId", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_dataItem", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "IdFromEverettRegionInfoDataItem", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Property({Static:true , Public:true }, "CurrentRegion", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EnglishName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NativeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TwoLetterISORegionName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterISORegionName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterWindowsRegionName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsMetric", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "GeoId", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrencyEnglishName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrencyNativeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrencySymbol", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ISOCurrencySymbol", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.TextInfo */ 

(function TextInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.TextInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_listSeparator", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_isReadOnly", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_cultureName", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_cultureData", $asm_mscorlib.TypeRef("System.Globalization.CultureData")); 
    $['Field']({Static:false, Public:false}, "m_textInfoName", $.String); 
    $['Field']({Static:false, Public:false}, "m_dataHandle", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "m_handleOrigin", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "m_IsAsciiCasingSameAsInvariant", $asm_mscorlib.TypeRef("System.Globalization.TextInfo+Tristate")); 
    $['Field']({Static:true , Public:false}, "s_Invariant", $asm_mscorlib.TypeRef("System.Globalization.TextInfo")); 
    $['Field']({Static:false, Public:false}, "customCultureName", $.String)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_nDataItem", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_useUserOverride", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_win32LangID", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:false}, "wordSeparatorMask", 536672256); 
    $.Property({Static:true , Public:false}, "Invariant", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "ANSICodePage", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OEMCodePage", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "MacCodePage", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EBCDICCodePage", $.Int32);

    $.Property({Static:false, Public:true }, "LCID", $.Int32);

    $.Property({Static:false, Public:true }, "CultureName", $.String);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ListSeparator", $.String);

    $.Property({Static:false, Public:false}, "IsAsciiCasingSameAsInvariant", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRightToLeft", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Globalization.NumberFormatInfo */ 

(function NumberFormatInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.NumberFormatInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:true , Public:false}, "invariantInfo", $asm_mscorlib.TypeRef("System.Globalization.NumberFormatInfo")); 
    $['Field']({Static:false, Public:false}, "numberGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "currencyGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "percentGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "positiveSign", $.String); 
    $['Field']({Static:false, Public:false}, "negativeSign", $.String); 
    $['Field']({Static:false, Public:false}, "numberDecimalSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "numberGroupSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "currencyGroupSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "currencyDecimalSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "currencySymbol", $.String); 
    $['Field']({Static:false, Public:false}, "ansiCurrencySymbol", $.String); 
    $['Field']({Static:false, Public:false}, "nanSymbol", $.String); 
    $['Field']({Static:false, Public:false}, "positiveInfinitySymbol", $.String); 
    $['Field']({Static:false, Public:false}, "negativeInfinitySymbol", $.String); 
    $['Field']({Static:false, Public:false}, "percentDecimalSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "percentGroupSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "percentSymbol", $.String); 
    $['Field']({Static:false, Public:false}, "perMilleSymbol", $.String); 
    $['Field']({Static:false, Public:false}, "nativeDigits", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_dataItem", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "numberDecimalDigits", $.Int32); 
    $['Field']({Static:false, Public:false}, "currencyDecimalDigits", $.Int32); 
    $['Field']({Static:false, Public:false}, "currencyPositivePattern", $.Int32); 
    $['Field']({Static:false, Public:false}, "currencyNegativePattern", $.Int32); 
    $['Field']({Static:false, Public:false}, "numberNegativePattern", $.Int32); 
    $['Field']({Static:false, Public:false}, "percentPositivePattern", $.Int32); 
    $['Field']({Static:false, Public:false}, "percentNegativePattern", $.Int32); 
    $['Field']({Static:false, Public:false}, "percentDecimalDigits", $.Int32); 
    $['Field']({Static:false, Public:false}, "digitSubstitution", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "isReadOnly", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_useUserOverride", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_isInvariant", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "validForParseAsNumber", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "validForParseAsCurrency", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:false}, "InvalidNumberStyles", -1024); 
    $.Property({Static:true , Public:true }, "InvariantInfo", $.Type);

    $.Property({Static:false, Public:true }, "CurrencyDecimalDigits", $.Int32);

    $.Property({Static:false, Public:true }, "CurrencyDecimalSeparator", $.String);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrencyGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "NumberGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "PercentGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "CurrencyGroupSeparator", $.String);

    $.Property({Static:false, Public:true }, "CurrencySymbol", $.String);

    $.Property({Static:true , Public:true }, "CurrentInfo", $.Type);

    $.Property({Static:false, Public:true }, "NaNSymbol", $.String);

    $.Property({Static:false, Public:true }, "CurrencyNegativePattern", $.Int32);

    $.Property({Static:false, Public:true }, "NumberNegativePattern", $.Int32);

    $.Property({Static:false, Public:true }, "PercentPositivePattern", $.Int32);

    $.Property({Static:false, Public:true }, "PercentNegativePattern", $.Int32);

    $.Property({Static:false, Public:true }, "NegativeInfinitySymbol", $.String);

    $.Property({Static:false, Public:true }, "NegativeSign", $.String);

    $.Property({Static:false, Public:true }, "NumberDecimalDigits", $.Int32);

    $.Property({Static:false, Public:true }, "NumberDecimalSeparator", $.String);

    $.Property({Static:false, Public:true }, "NumberGroupSeparator", $.String);

    $.Property({Static:false, Public:true }, "CurrencyPositivePattern", $.Int32);

    $.Property({Static:false, Public:true }, "PositiveInfinitySymbol", $.String);

    $.Property({Static:false, Public:true }, "PositiveSign", $.String);

    $.Property({Static:false, Public:true }, "PercentDecimalDigits", $.Int32);

    $.Property({Static:false, Public:true }, "PercentDecimalSeparator", $.String);

    $.Property({Static:false, Public:true }, "PercentGroupSeparator", $.String);

    $.Property({Static:false, Public:true }, "PercentSymbol", $.String);

    $.Property({Static:false, Public:true }, "PerMilleSymbol", $.String);

    $.Property({Static:false, Public:true }, "NativeDigits", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "DigitSubstitution", $asm_mscorlib.TypeRef("System.Globalization.DigitShapes"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IFormatProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Globalization.NumberStyles */ 

JSIL.MakeEnum(
  {
    FullName: "System.Globalization.NumberStyles", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AllowLeadingWhite: 1, 
    AllowTrailingWhite: 2, 
    AllowLeadingSign: 4, 
    Integer: 7, 
    AllowTrailingSign: 8, 
    AllowParentheses: 16, 
    AllowDecimalPoint: 32, 
    AllowThousands: 64, 
    Number: 111, 
    AllowExponent: 128, 
    Float: 167, 
    AllowCurrencySymbol: 256, 
    Currency: 383, 
    Any: 511, 
    AllowHexSpecifier: 512, 
    HexNumber: 515, 
  }
);

/* class System.Globalization.CultureData */ 

(function CultureData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Globalization.CultureData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "undef", -1); 
    $['Field']({Static:false, Public:false}, "sRealName", $.String); 
    $['Field']({Static:false, Public:false}, "sWindowsName", $.String); 
    $['Field']({Static:false, Public:false}, "sName", $.String); 
    $['Field']({Static:false, Public:false}, "sParent", $.String); 
    $['Field']({Static:false, Public:false}, "sLocalizedDisplayName", $.String); 
    $['Field']({Static:false, Public:false}, "sEnglishDisplayName", $.String); 
    $['Field']({Static:false, Public:false}, "sNativeDisplayName", $.String); 
    $['Field']({Static:false, Public:false}, "sSpecificCulture", $.String); 
    $['Field']({Static:false, Public:false}, "sISO639Language", $.String); 
    $['Field']({Static:false, Public:false}, "sLocalizedLanguage", $.String); 
    $['Field']({Static:false, Public:false}, "sEnglishLanguage", $.String); 
    $['Field']({Static:false, Public:false}, "sNativeLanguage", $.String); 
    $['Field']({Static:false, Public:false}, "sRegionName", $.String); 
    $['Field']({Static:false, Public:false}, "iGeoId", $.Int32); 
    $['Field']({Static:false, Public:false}, "sLocalizedCountry", $.String); 
    $['Field']({Static:false, Public:false}, "sEnglishCountry", $.String); 
    $['Field']({Static:false, Public:false}, "sNativeCountry", $.String); 
    $['Field']({Static:false, Public:false}, "sISO3166CountryName", $.String); 
    $['Field']({Static:false, Public:false}, "sPositiveSign", $.String); 
    $['Field']({Static:false, Public:false}, "sNegativeSign", $.String); 
    $['Field']({Static:false, Public:false}, "saNativeDigits", $jsilcore.TypeRef("System.Array", [$.String])); 
    $['Field']({Static:false, Public:false}, "iDigitSubstitution", $.Int32); 
    $['Field']({Static:false, Public:false}, "iLeadingZeros", $.Int32); 
    $['Field']({Static:false, Public:false}, "iDigits", $.Int32); 
    $['Field']({Static:false, Public:false}, "iNegativeNumber", $.Int32); 
    $['Field']({Static:false, Public:false}, "waGrouping", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "sDecimalSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "sThousandSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "sNaN", $.String); 
    $['Field']({Static:false, Public:false}, "sPositiveInfinity", $.String); 
    $['Field']({Static:false, Public:false}, "sNegativeInfinity", $.String); 
    $['Field']({Static:false, Public:false}, "iNegativePercent", $.Int32); 
    $['Field']({Static:false, Public:false}, "iPositivePercent", $.Int32); 
    $['Field']({Static:false, Public:false}, "sPercent", $.String); 
    $['Field']({Static:false, Public:false}, "sPerMille", $.String); 
    $['Field']({Static:false, Public:false}, "sCurrency", $.String); 
    $['Field']({Static:false, Public:false}, "sIntlMonetarySymbol", $.String); 
    $['Field']({Static:false, Public:false}, "sEnglishCurrency", $.String); 
    $['Field']({Static:false, Public:false}, "sNativeCurrency", $.String); 
    $['Field']({Static:false, Public:false}, "iCurrencyDigits", $.Int32); 
    $['Field']({Static:false, Public:false}, "iCurrency", $.Int32); 
    $['Field']({Static:false, Public:false}, "iNegativeCurrency", $.Int32); 
    $['Field']({Static:false, Public:false}, "waMonetaryGrouping", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "sMonetaryDecimal", $.String); 
    $['Field']({Static:false, Public:false}, "sMonetaryThousand", $.String); 
    $['Field']({Static:false, Public:false}, "iMeasure", $.Int32); 
    $['Field']({Static:false, Public:false}, "sListSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "sAM1159", $.String); 
    $['Field']({Static:false, Public:false}, "sPM2359", $.String); 
    $['Field']({Static:false, Public:false}, "sTimeSeparator", $.String); 
    $['Field']({Static:false, Public:false}, "saLongTimes", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "saShortTimes", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "saDurationFormats", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "iFirstDayOfWeek", $.Int32); 
    $['Field']({Static:false, Public:false}, "iFirstWeekOfYear", $.Int32); 
    $['Field']({Static:false, Public:false}, "waCalendars", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "calendars", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Globalization.CalendarData")])); 
    $['Field']({Static:false, Public:false}, "iReadingLayout", $.Int32); 
    $['Field']({Static:false, Public:false}, "sTextInfo", $.String); 
    $['Field']({Static:false, Public:false}, "sCompareInfo", $.String); 
    $['Field']({Static:false, Public:false}, "sScripts", $.String); 
    $['Field']({Static:false, Public:false}, "iDefaultAnsiCodePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "iDefaultOemCodePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "iDefaultMacCodePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "iDefaultEbcdicCodePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "iLanguage", $.Int32); 
    $['Field']({Static:false, Public:false}, "sAbbrevLang", $.String); 
    $['Field']({Static:false, Public:false}, "sAbbrevCountry", $.String); 
    $['Field']({Static:false, Public:false}, "sISO639Language2", $.String); 
    $['Field']({Static:false, Public:false}, "sISO3166CountryName2", $.String); 
    $['Field']({Static:false, Public:false}, "iInputLanguageHandle", $.Int32); 
    $['Field']({Static:false, Public:false}, "sConsoleFallbackName", $.String); 
    $['Field']({Static:false, Public:false}, "sKeyboardsToInstall", $.String); 
    $['Field']({Static:false, Public:false}, "fontSignature", $.String); 
    $['Field']({Static:false, Public:false}, "bUseOverrides", $.Boolean); 
    $['Field']({Static:false, Public:false}, "bNeutral", $.Boolean); 
    $['Field']({Static:false, Public:false}, "bWin32Installed", $.Boolean); 
    $['Field']({Static:false, Public:false}, "bFramework", $.Boolean); 
    $['Field']({Static:true , Public:false}, "s_RegionNames", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2")); 
    $['Field']({Static:true , Public:false}, "s_Invariant", $asm_mscorlib.TypeRef("System.Globalization.CultureData")); 
    $['Field']({Static:true , Public:false}, "MscorlibResourceSet", $asm_mscorlib.TypeRef("System.Resources.ResourceSet")); 
    $['Field']({Static:true , Public:false}, "s_cachedCultures", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_win7Version", $asm_mscorlib.TypeRef("System.Version")); 
    $['Field']({Static:true , Public:false}, "s_RegionKey", $.String, "System\\CurrentControlSet\\Control\\Nls\\RegionMapping"); 
    $['Field']({Static:true , Public:false}, "s_cachedRegions", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2")); 
    $['Field']({Static:true , Public:false}, "specificCultures", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:true , Public:false}, "s_replacementCultureNames", $asm_mscorlib.TypeRef("System.Array")); 
    $['Constant']({Static:true , Public:false}, "LOCALE_NOUSEROVERRIDE", 2147483648); 
    $['Constant']({Static:true , Public:false}, "LOCALE_RETURN_NUMBER", 536870912); 
    $['Constant']({Static:true , Public:false}, "LOCALE_RETURN_GENITIVE_NAMES", 268435456); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SLOCALIZEDDISPLAYNAME", 2); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SENGLISHDISPLAYNAME", 114); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNATIVEDISPLAYNAME", 115); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SLOCALIZEDLANGUAGENAME", 111); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SENGLISHLANGUAGENAME", 4097); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNATIVELANGUAGENAME", 4); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SLOCALIZEDCOUNTRYNAME", 6); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SENGLISHCOUNTRYNAME", 4098); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNATIVECOUNTRYNAME", 8); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVLANGNAME", 3); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ICOUNTRY", 5); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVCTRYNAME", 7); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IGEOID", 91); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTLANGUAGE", 9); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTCOUNTRY", 10); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTCODEPAGE", 11); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTANSICODEPAGE", 4100); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTMACCODEPAGE", 4113); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SLIST", 12); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IMEASURE", 13); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDECIMAL", 14); 
    $['Constant']({Static:true , Public:false}, "LOCALE_STHOUSAND", 15); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SGROUPING", 16); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDIGITS", 17); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ILZERO", 18); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGNUMBER", 4112); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNATIVEDIGITS", 19); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SCURRENCY", 20); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SINTLSYMBOL", 21); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONDECIMALSEP", 22); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHOUSANDSEP", 23); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONGROUPING", 24); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ICURRDIGITS", 25); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IINTLCURRDIGITS", 26); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ICURRENCY", 27); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGCURR", 28); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDATE", 29); 
    $['Constant']({Static:true , Public:false}, "LOCALE_STIME", 30); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTDATE", 31); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SLONGDATE", 32); 
    $['Constant']({Static:true , Public:false}, "LOCALE_STIMEFORMAT", 4099); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDATE", 33); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ILDATE", 34); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ITIME", 35); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ITIMEMARKPOSN", 4101); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ICENTURY", 36); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ITLZERO", 37); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDAYLZERO", 38); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IMONLZERO", 39); 
    $['Constant']({Static:true , Public:false}, "LOCALE_S1159", 40); 
    $['Constant']({Static:true , Public:false}, "LOCALE_S2359", 41); 
    $['Constant']({Static:true , Public:false}, "LOCALE_ICALENDARTYPE", 4105); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IOPTIONALCALENDAR", 4107); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IFIRSTDAYOFWEEK", 4108); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IFIRSTWEEKOFYEAR", 4109); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME1", 42); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME2", 43); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME3", 44); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME4", 45); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME5", 46); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME6", 47); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDAYNAME7", 48); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME1", 49); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME2", 50); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME3", 51); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME4", 52); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME5", 53); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME6", 54); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVDAYNAME7", 55); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME1", 56); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME2", 57); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME3", 58); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME4", 59); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME5", 60); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME6", 61); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME7", 62); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME8", 63); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME9", 64); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME10", 65); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME11", 66); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME12", 67); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHNAME13", 4110); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME1", 68); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME2", 69); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME3", 70); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME4", 71); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME5", 72); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME6", 73); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME7", 74); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME8", 75); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME9", 76); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME10", 77); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME11", 78); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME12", 79); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SABBREVMONTHNAME13", 4111); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SPOSITIVESIGN", 80); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNEGATIVESIGN", 81); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IPOSSIGNPOSN", 82); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGSIGNPOSN", 83); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IPOSSYMPRECEDES", 84); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IPOSSEPBYSPACE", 85); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGSYMPRECEDES", 86); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGSEPBYSPACE", 87); 
    $['Constant']({Static:true , Public:false}, "LOCALE_FONTSIGNATURE", 88); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SISO639LANGNAME", 89); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SISO3166CTRYNAME", 90); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDEFAULTEBCDICCODEPAGE", 4114); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IPAPERSIZE", 4106); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SENGCURRNAME", 4103); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNATIVECURRNAME", 4104); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SYEARMONTH", 4102); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSORTNAME", 4115); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IDIGITSUBSTITUTION", 4116); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNAME", 92); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SDURATION", 93); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SKEYBOARDSTOINSTALL", 94); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME1", 96); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME2", 97); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME3", 98); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME4", 99); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME5", 100); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME6", 101); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTESTDAYNAME7", 102); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SISO639LANGNAME2", 103); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SISO3166CTRYNAME2", 104); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNAN", 105); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SPOSINFINITY", 106); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SNEGINFINITY", 107); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSCRIPTS", 108); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SPARENT", 109); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SCONSOLEFALLBACKNAME", 110); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IREADINGLAYOUT", 112); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEUTRAL", 113); 
    $['Constant']({Static:true , Public:false}, "LOCALE_INEGATIVEPERCENT", 116); 
    $['Constant']({Static:true , Public:false}, "LOCALE_IPOSITIVEPERCENT", 117); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SPERCENT", 118); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SPERMILLE", 119); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SMONTHDAY", 120); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSHORTTIME", 121); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SOPENTYPELANGUAGETAG", 122); 
    $['Constant']({Static:true , Public:false}, "LOCALE_SSORTLOCALE", 123); 
    $['Constant']({Static:true , Public:false}, "TIME_NOSECONDS", 2); 
    $.Property({Static:true , Public:false}, "RegionNames", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:true , Public:false}, "Invariant", $.Type);

    $.Property({Static:true , Public:false}, "SpecificCultures", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Globalization.CultureInfo")]));

    $.Property({Static:false, Public:false}, "IsReplacementCulture", $.Boolean);

    $.Property({Static:false, Public:false}, "CultureName", $.String);

    $.Property({Static:false, Public:false}, "UseUserOverride", $.Boolean);

    $.Property({Static:false, Public:false}, "SNAME", $.String);

    $.Property({Static:false, Public:false}, "SPARENT", $.String);

    $.Property({Static:false, Public:false}, "SLOCALIZEDDISPLAYNAME", $.String);

    $.Property({Static:false, Public:false}, "SENGDISPLAYNAME", $.String);

    $.Property({Static:false, Public:false}, "SNATIVEDISPLAYNAME", $.String);

    $.Property({Static:false, Public:false}, "SSPECIFICCULTURE", $.String);

    $.Property({Static:false, Public:false}, "SISO639LANGNAME", $.String);

    $.Property({Static:false, Public:false}, "SISO639LANGNAME2", $.String);

    $.Property({Static:false, Public:false}, "SABBREVLANGNAME", $.String);

    $.Property({Static:false, Public:false}, "SLOCALIZEDLANGUAGE", $.String);

    $.Property({Static:false, Public:false}, "SENGLISHLANGUAGE", $.String);

    $.Property({Static:false, Public:false}, "SNATIVELANGUAGE", $.String);

    $.Property({Static:false, Public:false}, "SREGIONNAME", $.String);

    $.Property({Static:false, Public:false}, "ICOUNTRY", $.Int32);

    $.Property({Static:false, Public:false}, "IGEOID", $.Int32);

    $.Property({Static:false, Public:false}, "SLOCALIZEDCOUNTRY", $.String);

    $.Property({Static:false, Public:false}, "SENGCOUNTRY", $.String);

    $.Property({Static:false, Public:false}, "SNATIVECOUNTRY", $.String);

    $.Property({Static:false, Public:false}, "SISO3166CTRYNAME", $.String);

    $.Property({Static:false, Public:false}, "SISO3166CTRYNAME2", $.String);

    $.Property({Static:false, Public:false}, "SABBREVCTRYNAME", $.String);

    $.Property({Static:false, Public:false}, "IDEFAULTCOUNTRY", $.Int32);

    $.Property({Static:false, Public:false}, "IINPUTLANGUAGEHANDLE", $.Int32);

    $.Property({Static:false, Public:false}, "SCONSOLEFALLBACKNAME", $.String);

    $.Property({Static:false, Public:false}, "ILEADINGZEROS", $.Boolean);

    $.Property({Static:false, Public:false}, "WAGROUPING", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "SNAN", $.String);

    $.Property({Static:false, Public:false}, "SPOSINFINITY", $.String);

    $.Property({Static:false, Public:false}, "SNEGINFINITY", $.String);

    $.Property({Static:false, Public:false}, "INEGATIVEPERCENT", $.Int32);

    $.Property({Static:false, Public:false}, "IPOSITIVEPERCENT", $.Int32);

    $.Property({Static:false, Public:false}, "SPERCENT", $.String);

    $.Property({Static:false, Public:false}, "SPERMILLE", $.String);

    $.Property({Static:false, Public:false}, "SCURRENCY", $.String);

    $.Property({Static:false, Public:false}, "SINTLSYMBOL", $.String);

    $.Property({Static:false, Public:false}, "SENGLISHCURRENCY", $.String);

    $.Property({Static:false, Public:false}, "SNATIVECURRENCY", $.String);

    $.Property({Static:false, Public:false}, "WAMONGROUPING", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "IMEASURE", $.Int32);

    $.Property({Static:false, Public:false}, "SLIST", $.String);

    $.Property({Static:false, Public:false}, "IPAPERSIZE", $.Int32);

    $.Property({Static:false, Public:false}, "SAM1159", $.String);

    $.Property({Static:false, Public:false}, "SPM2359", $.String);

    $.Property({Static:false, Public:false}, "LongTimes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ShortTimes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "SADURATION", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "IFIRSTDAYOFWEEK", $.Int32);

    $.Property({Static:false, Public:false}, "IFIRSTWEEKOFYEAR", $.Int32);

    $.Property({Static:false, Public:false}, "CalendarIds", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "IsRightToLeft", $.Boolean);

    $.Property({Static:false, Public:false}, "IREADINGLAYOUT", $.Int32);

    $.Property({Static:false, Public:false}, "STEXTINFO", $.String);

    $.Property({Static:false, Public:false}, "SCOMPAREINFO", $.String);

    $.Property({Static:false, Public:false}, "IsSupplementalCustomCulture", $.Boolean);

    $.Property({Static:false, Public:false}, "SSCRIPTS", $.String);

    $.Property({Static:false, Public:false}, "SOPENTYPELANGUAGETAG", $.String);

    $.Property({Static:false, Public:false}, "FONTSIGNATURE", $.String);

    $.Property({Static:false, Public:false}, "SKEYBOARDSTOINSTALL", $.String);

    $.Property({Static:false, Public:false}, "IDEFAULTANSICODEPAGE", $.Int32);

    $.Property({Static:false, Public:false}, "IDEFAULTOEMCODEPAGE", $.Int32);

    $.Property({Static:false, Public:false}, "IDEFAULTMACCODEPAGE", $.Int32);

    $.Property({Static:false, Public:false}, "IDEFAULTEBCDICCODEPAGE", $.Int32);

    $.Property({Static:false, Public:false}, "ILANGUAGE", $.Int32);

    $.Property({Static:false, Public:false}, "IsWin32Installed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFramework", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNeutralCulture", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInvariantCulture", $.Boolean);

    $.Property({Static:false, Public:false}, "DefaultCalendar", $asm_mscorlib.TypeRef("System.Globalization.Calendar"));

    $.Property({Static:false, Public:false}, "TimeSeparator", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics");
/* class System.Diagnostics.Debugger */ 

(function Debugger$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Debugger", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_IsAttached", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $['Field']({Static:true , Public:false}, "s_triggerThreadAbortExceptionForDebugger", $.Boolean); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "DefaultCategory", $.String); 
    $.Property({Static:true , Public:true }, "IsAttached", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.DebuggerStepThroughAttribute */ 

(function DebuggerStepThroughAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Diagnostics.DebuggerStepThroughAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.DebuggerBrowsableState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.DebuggerBrowsableState", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Never: 0, 
    Collapsed: 2, 
    RootHidden: 3, 
  }
);

/* class System.Diagnostics.DebuggerBrowsableAttribute */ 

(function DebuggerBrowsableAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Diagnostics.DebuggerBrowsableAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "state", $asm_mscorlib.TypeRef("System.Diagnostics.DebuggerBrowsableState")); 
    $.Property({Static:false, Public:true }, "State", $asm_mscorlib.TypeRef("System.Diagnostics.DebuggerBrowsableState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.DebuggerDisplayAttribute */ 

(function DebuggerDisplayAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Diagnostics.DebuggerDisplayAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "$name", $.String); 
    $['Field']({Static:false, Public:false}, "value", $.String); 
    $['Field']({Static:false, Public:false}, "type", $.String); 
    $['Field']({Static:false, Public:false}, "targetName", $.String); 
    $['Field']({Static:false, Public:false}, "target", $asm_mscorlib.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:true }, "Target", $asm_mscorlib.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TargetTypeName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Diagnostics.ICustomDebuggerNotification */ 

JSIL.MakeInterface(
  "System.Diagnostics.ICustomDebuggerNotification", false, [], function ($) {
  }, []);

/* class System.Diagnostics.StackTrace */ 

(function StackTrace$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Diagnostics.StackTrace", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Exception"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Exception"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Exception"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Diagnostics.StackFrame"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.Thread"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CaptureStackTrace", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $asm_mscorlib.TypeRef("System.Threading.Thread"), $asm_mscorlib.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFrame", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Diagnostics.StackFrame"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm_mscorlib.TypeRef("System.Diagnostics.StackTrace+TraceFormat")])
    );

    $['Field']({Static:false, Public:false}, "frames", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Diagnostics.StackFrame")])); 
    $['Field']({Static:false, Public:false}, "m_iNumOfFrames", $.Int32); 
    $['Constant']({Static:true , Public:true }, "METHODS_TO_SKIP", 0); 
    $['Field']({Static:false, Public:false}, "m_iMethodsToSkip", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "FrameCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.StackFrame */ 

(function StackFrame$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Diagnostics.StackFrame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethod", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Reflection.MethodBase"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "method", $asm_mscorlib.TypeRef("System.Reflection.MethodBase")); 
    $['Field']({Static:false, Public:false}, "offset", $.Int32); 
    $['Field']({Static:false, Public:false}, "ILOffset", $.Int32); 
    $['Field']({Static:false, Public:false}, "strFileName", $.String); 
    $['Field']({Static:false, Public:false}, "iLineNumber", $.Int32); 
    $['Field']({Static:false, Public:false}, "iColumnNumber", $.Int32); 
    $['Field']({Static:false, Public:false}, "fIsLastFrameFromForeignExceptionStackTrace", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Constant']({Static:true , Public:true }, "OFFSET_UNKNOWN", -1); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.SymbolStore");
/* interface System.Diagnostics.SymbolStore.ISymbolBinder */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolBinder", true, [], function ($) {
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolBinder1 */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolBinder1", true, [], function ($) {
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolDocument */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolDocument", true, [], function ($) {
    $.Property({}, "URL");
    $.Property({}, "DocumentType");
    $.Property({}, "Language");
    $.Property({}, "LanguageVendor");
    $.Property({}, "CheckSumAlgorithmId");
    $.Property({}, "HasEmbeddedSource");
    $.Property({}, "SourceLength");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolDocumentWriter */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolDocumentWriter", true, [], function ($) {
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolMethod */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolMethod", true, [], function ($) {
    $.Property({}, "Token");
    $.Property({}, "SequencePointCount");
    $.Property({}, "RootScope");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolNamespace */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolNamespace", true, [], function ($) {
    $.Property({}, "Name");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolReader */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolReader", true, [], function ($) {
    $.Property({}, "UserEntryPoint");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolScope */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolScope", true, [], function ($) {
    $.Property({}, "Method");
    $.Property({}, "Parent");
    $.Property({}, "StartOffset");
    $.Property({}, "EndOffset");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolVariable */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolVariable", true, [], function ($) {
    $.Property({}, "Name");
    $.Property({}, "Attributes");
    $.Property({}, "AddressKind");
    $.Property({}, "AddressField1");
    $.Property({}, "AddressField2");
    $.Property({}, "AddressField3");
    $.Property({}, "StartOffset");
    $.Property({}, "EndOffset");
  }, []);

/* interface System.Diagnostics.SymbolStore.ISymbolWriter */ 

JSIL.MakeInterface(
  "System.Diagnostics.SymbolStore.ISymbolWriter", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Diagnostics.Tracing");
JSIL.DeclareNamespace("System.Diagnostics.Tracing.Internal");
/* class System.Diagnostics.Tracing.Internal.Environment */ 

(function Environment$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Diagnostics.Tracing.Internal.Environment", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_TickCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $['Field']({Static:true , Public:true , ReadOnly:true }, "NewLine", $.String); 
    $['Field']({Static:true , Public:false}, "rm", $asm_mscorlib.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:true }, "TickCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
/* class System.Collections.ArrayList */ 

(function ArrayList$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.ArrayList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Object, $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [$.Object, $asm_mscorlib.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm_mscorlib.TypeRef("System.Array"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.IEnumerator"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertRange", 
      new JSIL.MethodSignature(null, [$.Int32, $asm_mscorlib.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveRange", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reverse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reverse", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Sort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Sort", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Collections.IComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Sort", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Array"), [$asm_mscorlib.TypeRef("System.Type")])
    );

    $['Field']({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $['Field']({Static:false, Public:false}, "_size", $.Int32); 
    $['Field']({Static:false, Public:false}, "_version", $.Int32); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $['Constant']({Static:true , Public:false}, "_defaultCapacity", 4); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "emptyArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return $asm_mscorlib.EmptyArray$b1.Of($asm_mscorlib.System.Object).Value;
      }); 
    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Collections.Stack */ 

(function Stack$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Stack", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_array", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $['Field']({Static:false, Public:false}, "_size", $.Int32); 
    $['Field']({Static:false, Public:false}, "_version", $.Int32); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $['Constant']({Static:true , Public:false}, "_defaultCapacity", 10); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Collections.Hashtable */ 

(function Hashtable$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Hashtable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"), $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"), $asm_mscorlib.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"), 
          $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.IDictionary"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Collections.IDictionary"), $asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"), 
          $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.IDictionary"), $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Collections.IDictionary"), $.Single, 
          $asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"), $asm_mscorlib.TypeRef("System.Collections.IComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Collections.IDictionary"), $.Single, 
          $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $['Constant']({Static:true , Public:false}, "HashPrime", 101); 
    $['Constant']({Static:true , Public:false}, "InitialSize", 3); 
    $['Constant']({Static:true , Public:false}, "LoadFactorName", "LoadFactor"); 
    $['Constant']({Static:true , Public:false}, "VersionName", "Version"); 
    $['Constant']({Static:true , Public:false}, "ComparerName", "Comparer"); 
    $['Constant']({Static:true , Public:false}, "HashCodeProviderName", "HashCodeProvider"); 
    $['Constant']({Static:true , Public:false}, "HashSizeName", "HashSize"); 
    $['Constant']({Static:true , Public:false}, "KeysName", "Keys"); 
    $['Constant']({Static:true , Public:false}, "ValuesName", "Values"); 
    $['Constant']({Static:true , Public:false}, "KeyComparerName", "KeyComparer"); 
    $['Field']({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Collections.Hashtable+bucket")])); 
    $['Field']({Static:false, Public:false}, "count", $.Int32); 
    $['Field']({Static:false, Public:false}, "occupancy", $.Int32); 
    $['Field']({Static:false, Public:false}, "loadsize", $.Int32); 
    $['Field']({Static:false, Public:false}, "loadFactor", $.Single); 
    $['Field']({Static:false, Public:false}, "version", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "isWriterInProgress", $asm_mscorlib.TypeRef("System.Boolean")); 
    $['Field']({Static:false, Public:false}, "keys", $asm_mscorlib.TypeRef("System.Collections.ICollection")); 
    $['Field']({Static:false, Public:false}, "values", $asm_mscorlib.TypeRef("System.Collections.ICollection")); 
    $['Field']({Static:false, Public:false}, "_keycomparer", $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer")); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $.Property({Static:false, Public:false}, "hcp", $asm_mscorlib.TypeRef("System.Collections.IHashCodeProvider"));

    $.Property({Static:false, Public:false}, "comparer", $asm_mscorlib.TypeRef("System.Collections.IComparer"));

    $.Property({Static:false, Public:false}, "EqualityComparer", $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IDictionary"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* interface System.Collections.ICollection */ 

JSIL.MakeInterface(
  "System.Collections.ICollection", true, [], function ($) {
    $.Method({}, "CopyTo", new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Array"), $.Int32]));
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_IsSynchronized", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "Count");
    $.Property({}, "SyncRoot");
    $.Property({}, "IsSynchronized");
  }, [$asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.IComparer */ 

JSIL.MakeInterface(
  "System.Collections.IComparer", true, [], function ($) {
  }, []);

/* interface System.Collections.IDictionary */ 

JSIL.MakeInterface(
  "System.Collections.IDictionary", true, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.Object]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.Object, $.Object]));
    $.Method({}, "get_Keys", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.ICollection")));
    $.Method({}, "get_Values", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.ICollection")));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.Object]));
    $.Method({}, "Add", new JSIL.MethodSignature(null, [$.Object, $.Object]));
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Method({}, "GetEnumerator", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.IDictionaryEnumerator")));
    $.Method({}, "Remove", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Item");
    $.Property({}, "Keys");
    $.Property({}, "Values");
    $.Property({}, "IsReadOnly");
    $.Property({}, "IsFixedSize");
  }, [$asm_mscorlib.TypeRef("System.Collections.ICollection"), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.IDictionaryEnumerator */ 

JSIL.MakeInterface(
  "System.Collections.IDictionaryEnumerator", true, [], function ($) {
    $.Property({}, "Key");
    $.Property({}, "Value");
    $.Property({}, "Entry");
  }, [$asm_mscorlib.TypeRef("System.Collections.IEnumerator")]);

/* interface System.Collections.IEnumerable */ 

JSIL.MakeInterface(
  "System.Collections.IEnumerable", true, [], function ($) {
    $.Method({}, "GetEnumerator", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.IEnumerator")));
  }, []);

/* interface System.Collections.IEnumerator */ 

JSIL.MakeInterface(
  "System.Collections.IEnumerator", true, [], function ($) {
    $.Method({}, "MoveNext", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Current", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "Current");
  }, []);

/* interface System.Collections.IEqualityComparer */ 

JSIL.MakeInterface(
  "System.Collections.IEqualityComparer", true, [], function ($) {
  }, []);

/* interface System.Collections.IHashCodeProvider */ 

JSIL.MakeInterface(
  "System.Collections.IHashCodeProvider", true, [], function ($) {
  }, []);

/* interface System.Collections.IList */ 

JSIL.MakeInterface(
  "System.Collections.IList", true, [], function ($) {
    $.Method({}, "Add", new JSIL.MethodSignature($.Int32, [$.Object]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.Object]));
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Method({}, "get_IsFixedSize", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Remove", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Item");
    $.Property({}, "IsReadOnly");
    $.Property({}, "IsFixedSize");
  }, [$asm_mscorlib.TypeRef("System.Collections.ICollection"), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.IStructuralEquatable */ 

JSIL.MakeInterface(
  "System.Collections.IStructuralEquatable", true, [], function ($) {
  }, []);

/* interface System.Collections.IStructuralComparable */ 

JSIL.MakeInterface(
  "System.Collections.IStructuralComparable", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Collections.Concurrent");
/* interface System.Collections.Concurrent.IProducerConsumerCollection`1 */ 

JSIL.MakeInterface(
  "System.Collections.Concurrent.IProducerConsumerCollection`1", true, ["T"], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Concurrent.IProducerConsumerCollection`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), $asm_mscorlib.TypeRef("System.Collections.ICollection")]);

/* class System.Collections.Concurrent.ConcurrentDictionary`2 */ 

(function ConcurrentDictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Concurrent.ConcurrentDictionary`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_tables", $asm_mscorlib.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2+Tables")); 
    $['Field']({Static:false, Public:false}, "m_comparer", $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_growLockArray", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_keyRehashCount", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "m_budget", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_serializationArray", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $['Field']({Static:false, Public:false}, "m_serializationConcurrencyLevel", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_serializationCapacity", $.Int32); 
    $['Constant']({Static:true , Public:false}, "DEFAULT_CAPACITY", 31); 
    $['Constant']({Static:true , Public:false}, "MAX_LOCK_NUMBER", 1024); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_isValueWriteAtomic", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IReadOnlyDictionary$lTKey$cmTValue$g.Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IReadOnlyDictionary$lTKey$cmTValue$g.Values", $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.GenericProperty({Static:true , Public:false}, "DefaultConcurrencyLevel", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 7 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

JSIL.DeclareNamespace("System.Collections.ObjectModel");
/* class System.Collections.ObjectModel.Collection`1 */ 

(function Collection$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.ObjectModel.Collection`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearItems", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $['Field']({Static:false, Public:false}, "items", $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Items", $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyList`1", [$.GenericParameter("T")]), 
      /* 7 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Collections.ObjectModel.ReadOnlyCollection`1 */ 

(function ReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.ObjectModel.ReadOnlyCollection`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])])
    );

    $['Field']({Static:false, Public:false}, "list", $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false}, "Items", $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyList`1", [$.GenericParameter("T")]), 
      /* 7 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.Comparer`1 */ 

(function Comparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Comparer`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]), null)
    );

    $['Field']({Static:true , Public:false, ReadOnly:true }, "defaultComparer", $asm_mscorlib.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")])); 
    $.GenericProperty({Static:true , Public:true }, "Default", $asm_mscorlib.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.Dictionary`2 */ 

(function Dictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Dictionary`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $['Field']({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $['Field']({Static:false, Public:false}, "count", $.Int32); 
    $['Field']({Static:false, Public:false}, "version", $.Int32); 
    $['Field']({Static:false, Public:false}, "freeList", $.Int32); 
    $['Field']({Static:false, Public:false}, "freeCount", $.Int32); 
    $['Field']({Static:false, Public:false}, "comparer", $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $['Field']({Static:false, Public:false}, "keys", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $['Field']({Static:false, Public:false}, "values", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $['Constant']({Static:true , Public:false}, "VersionName", "Version"); 
    $['Constant']({Static:true , Public:false}, "HashSizeName", "HashSize"); 
    $['Constant']({Static:true , Public:false}, "KeyValuePairsName", "KeyValuePairs"); 
    $['Constant']({Static:true , Public:false}, "ComparerName", "Comparer"); 
    $.Property({Static:false, Public:true }, "Comparer", $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+KeyCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IReadOnlyDictionary$lTKey$cmTValue$g.Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "Values", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+ValueCollection", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lTKey$cmTValue$g.Values", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IReadOnlyDictionary$lTKey$cmTValue$g.Values", $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm_mscorlib.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 7 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 8 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 9 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* struct System.Collections.Generic.Dictionary`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.Dictionary`2+Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:true }, "hashCode", $.Int32); 
    $['Field']({Static:false, Public:true }, "next", $.Int32); 
    $['Field']({Static:false, Public:true }, "key", $.GenericParameter("TKey")); 
    $['Field']({Static:false, Public:true }, "value", $.GenericParameter("TValue")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.Dictionary`2+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.Dictionary`2+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $['Field']({Static:false, Public:false}, "dictionary", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $['Field']({Static:false, Public:false}, "version", $.Int32); 
    $['Field']({Static:false, Public:false}, "index", $.Int32); 
    $['Field']({Static:false, Public:false}, "current", $asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $['Field']({Static:false, Public:false}, "getEnumeratorRetType", $.Int32); 
    $['Constant']({Static:true , Public:false}, "DictEntry", 1); 
    $['Constant']({Static:true , Public:false}, "KeyValuePair", 2); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Entry", $asm_mscorlib.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Key", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.IDisposable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerator"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IDictionaryEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.Dictionary`2+KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Dictionary`2+KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $['Field']({Static:false, Public:false}, "dictionary", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTKey$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TKey")]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("TKey")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Collections.Generic.Dictionary`2+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.Dictionary`2+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $['Field']({Static:false, Public:false}, "dictionary", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTValue$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("TValue")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Collections.Generic.EqualityComparer`1 */ 

(function EqualityComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.EqualityComparer`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.EqualityComparer`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $['Field']({Static:true , Public:false, ReadOnly:true }, "defaultComparer", $asm_mscorlib.TypeRef("System.Collections.Generic.EqualityComparer`1", [$.GenericParameter("T")])); 
    $.GenericProperty({Static:true , Public:true }, "Default", $asm_mscorlib.TypeRef("System.Collections.Generic.EqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.IEqualityComparer"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Collections.Generic.ICollection`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.ICollection`1", true, ["T"], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_IsReadOnly", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Add", new JSIL.MethodSignature(null, [$.GenericParameter("T")]));
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]));
    $.Method({}, "CopyTo", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32]));
    $.Property({}, "Count");
    $.Property({}, "IsReadOnly");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IComparer`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IComparer`1", true, ["in T"], function ($) {
    $.Method({}, "Compare", new JSIL.MethodSignature($.Int32, [$.GenericParameter("T").in(), $.GenericParameter("T").in()]));
  }, []);

/* interface System.Collections.Generic.IDictionary`2 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IDictionary`2", true, ["TKey", "TValue"], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));
    $.Method({}, "get_Keys", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), null));
    $.Method({}, "get_Values", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), null));
    $.Method({}, "ContainsKey", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]));
    $.Method({}, "Add", new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));
    $.Method({}, "Remove", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]));
    $.Method({}, "TryGetValue", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])]));
    $.Property({}, "Item");
    $.Property({}, "Keys");
    $.Property({}, "Values");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")])]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")])]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IEnumerable`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IEnumerable`1", true, ["out T"], function ($) {
    $.Method({}, "GetEnumerator", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T").out()]), null));
  }, [$asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IEnumerator`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IEnumerator`1", true, ["out T"], function ($) {
    $.Method({}, "get_Current", new JSIL.MethodSignature($.GenericParameter("T").out(), null));
    $.Property({}, "Current");
  }, [$asm_mscorlib.TypeRef("System.IDisposable"), $asm_mscorlib.TypeRef("System.Collections.IEnumerator")]);

/* interface System.Collections.Generic.IEqualityComparer`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IEqualityComparer`1", true, ["in T"], function ($) {
    $.Method({}, "Equals", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T").in(), $.GenericParameter("T").in()]));
    $.Method({}, "GetHashCode", new JSIL.MethodSignature($.Int32, [$.GenericParameter("T").in()]));
  }, []);

/* interface System.Collections.Generic.IList`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IList`1", true, ["T"], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")]));
    $.Method({}, "IndexOf", new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")]));
    $.Method({}, "Insert", new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")]));
    $.Method({}, "RemoveAt", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "Item");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IReadOnlyCollection`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IReadOnlyCollection`1", true, ["out T"], function ($) {
    $.Property({}, "Count");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IReadOnlyCollection`1").out()]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IReadOnlyList`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IReadOnlyList`1", true, ["out T"], function ($) {
    $.Property({}, "Item");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IReadOnlyList`1").out()]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IReadOnlyList`1").out()]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Collections.Generic.IReadOnlyDictionary`2 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IReadOnlyDictionary`2", true, ["TKey", "TValue"], function ($) {
    $.Property({}, "Item");
    $.Property({}, "Keys");
    $.Property({}, "Values");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IReadOnlyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IReadOnlyDictionary`2")])]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IReadOnlyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IReadOnlyDictionary`2")])]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* struct System.Collections.Generic.KeyValuePair`2 */ 

(function KeyValuePair$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.KeyValuePair`2", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
    $['Field']({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
    $.Property({Static:false, Public:true }, "Key", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("TValue"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.List`1 */ 

(function List$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.List`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsReadOnly", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.GenericParameter("T"), $asm_mscorlib.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BinarySearch", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $asm_mscorlib.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")]), [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindIndex", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForEach", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Action`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRange", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.GenericParameter("T"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertRange", 
      new JSIL.MethodSignature(null, [$.Int32, $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveRange", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm_mscorlib.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Comparison`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrueForAll", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $['Constant']({Static:true , Public:false}, "_defaultCapacity", 4); 
    $['Field']({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $['Field']({Static:false, Public:false}, "_size", $.Int32); 
    $['Field']({Static:false, Public:false}, "_version", $.Int32); 
    $['Field']({Static:false, Public:false}, "_syncRoot", $.Object); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm_mscorlib.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm_mscorlib.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyList`1", [$.GenericParameter("T")]), 
      /* 7 */ $asm_mscorlib.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* interface System.Collections.Generic.IArraySortHelper`1 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IArraySortHelper`1", false, ["TKey"], function ($) {
  }, []);

/* interface System.Collections.Generic.IArraySortHelper`2 */ 

JSIL.MakeInterface(
  "System.Collections.Generic.IArraySortHelper`2", false, ["TKey", "TValue"], function ($) {
  }, []);

/* interface System.Threading.IAsyncLocal */ 

JSIL.MakeInterface(
  "System.Threading.IAsyncLocal", false, [], function ($) {
  }, []);

/* interface System.Threading.IAsyncLocalValueMap */ 

JSIL.MakeInterface(
  "System.Threading.IAsyncLocalValueMap", false, [], function ($) {
  }, []);

/* delegate System.Threading.SendOrPostCallback */ 

JSIL.MakeDelegate("System.Threading.SendOrPostCallback", true, [], 
  JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Object")));

/* enum System.Threading.SynchronizationContextProperties */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.SynchronizationContextProperties", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    RequireWaitNotification: 1, 
  }
);

/* class System.Threading.WinRTSynchronizationContextFactoryBase */ 

(function WinRTSynchronizationContextFactoryBase$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.WinRTSynchronizationContextFactoryBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.SynchronizationContext */ 

(function SynchronizationContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.SynchronizationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_props", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContextProperties")); 
    $['Field']({Static:true , Public:false}, "s_cachedPreparedType1", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:true , Public:false}, "s_cachedPreparedType2", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:true , Public:false}, "s_cachedPreparedType3", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:true , Public:false}, "s_cachedPreparedType4", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:true , Public:false}, "s_cachedPreparedType5", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:true , Public:false}, "s_winRTContextFactory", $asm_mscorlib.TypeRef("System.Threading.WinRTSynchronizationContextFactoryBase")); 
    $.Property({Static:true , Public:true }, "Current", $.Type);

    $.Property({Static:true , Public:false}, "CurrentNoFlow", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.WaitHandle */ 

(function WaitHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Threading.WaitHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:true }, "WaitTimeout", 258); 
    $['Constant']({Static:true , Public:false}, "MAX_WAITHANDLES", 64); 
    $['Field']({Static:false, Public:false}, "waitHandle", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "safeWaitHandle", $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle")); 
    $['Field']({Static:false, Public:false}, "hasThreadAffinity", $.Boolean); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "InvalidHandle", $.IntPtr); 
    $['Constant']({Static:true , Public:false}, "WAIT_OBJECT_0", 0); 
    $['Constant']({Static:true , Public:false}, "WAIT_ABANDONED", 128); 
    $['Constant']({Static:true , Public:false}, "WAIT_FAILED", 2147483647); 
    $['Constant']({Static:true , Public:false}, "ERROR_TOO_MANY_POSTS", 298); 
    function WaitHandle__cctor () {
      $thisType.InvalidHandle = new $asm_mscorlib.System.IntPtr();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      WaitHandle__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $.IntPtr);

    $.Property({Static:false, Public:true }, "SafeWaitHandle", $asm_mscorlib.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.EventWaitHandle */ 

(function EventWaitHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.Threading.EventWaitHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Threading.ContextCallback */ 

JSIL.MakeDelegate("System.Threading.ContextCallback", true, [], 
  JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Object")));

/* class System.Threading.ExecutionContext */ 

(function ExecutionContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.ExecutionContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_hostExecutionContext", $asm_mscorlib.TypeRef("System.Threading.HostExecutionContext")); 
    $['Field']({Static:false, Public:false}, "_syncContext", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContext")); 
    $['Field']({Static:false, Public:false}, "_syncContextNoFlow", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContext")); 
    $['Field']({Static:false, Public:false}, "_securityContext", $asm_mscorlib.TypeRef("System.Security.SecurityContext")); 
    $['Field']({Static:false, Public:false}, "_logicalCallContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.LogicalCallContext")); 
    $['Field']({Static:false, Public:false}, "_illogicalCallContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IllogicalCallContext")); 
    $['Field']({Static:false, Public:false}, "_flags", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext+Flags")); 
    $['Field']({Static:false, Public:false}, "_localValues", $asm_mscorlib.TypeRef("System.Threading.IAsyncLocalValueMap")); 
    $['Field']({Static:false, Public:false}, "_localChangeNotifications", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Threading.IAsyncLocal")])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_dummyDefaultEC", $.Type); 
    $.Property({Static:false, Public:false}, "isNewCapture", $.Boolean);

    $.Property({Static:false, Public:false}, "isFlowSuppressed", $.Boolean);

    $.Property({Static:true , Public:false}, "PreAllocatedDefault", $.Type);

    $.Property({Static:false, Public:false}, "IsPreAllocatedDefault", $.Boolean);

    $.Property({Static:false, Public:false}, "LogicalCallContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.LogicalCallContext"));

    $.Property({Static:false, Public:false}, "IllogicalCallContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IllogicalCallContext"));

    $.Property({Static:false, Public:false}, "SynchronizationContext", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContext"));

    $.Property({Static:false, Public:false}, "SynchronizationContextNoFlow", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContext"));

    $.Property({Static:false, Public:false}, "HostExecutionContext", $asm_mscorlib.TypeRef("System.Threading.HostExecutionContext"));

    $.Property({Static:false, Public:false}, "SecurityContext", $asm_mscorlib.TypeRef("System.Security.SecurityContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.Interlocked */ 

(function Interlocked$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Threading.Interlocked", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.Single, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.Double, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Double]), $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Object, 
          $.Object
        ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature($.IntPtr, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.IntPtr, 
          $.IntPtr
        ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
      new JSIL.MethodSignature("!!0", [
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"]), "!!0", 
          "!!0"
        ], ["T"])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "CompareExchange", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ManualResetEvent */ 

(function ManualResetEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Threading.EventWaitHandle"), 
      Name: "System.Threading.ManualResetEvent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.Monitor */ 

(function Monitor$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Threading.Monitor", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Enter", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "Enter", 
      new JSIL.MethodSignature(null, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exit", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Threading.IDeferredDisposable */ 

JSIL.MakeInterface(
  "System.Threading.IDeferredDisposable", false, [], function ($) {
  }, []);

/* class System.Threading.Thread */ 

(function Thread$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "System.Threading.Thread", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.ThreadStart"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.ThreadStart"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.ParameterizedThreadStart"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.ParameterizedThreadStart"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentCulture", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentThread", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentUICulture", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ManagedThreadId", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm_mscorlib.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm_mscorlib.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $['Field']({Static:false, Public:false}, "m_Context", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.Context")); 
    $['Field']({Static:false, Public:false}, "m_ExecutionContext", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext")); 
    $['Field']({Static:false, Public:false}, "m_Name", $.String); 
    $['Field']({Static:false, Public:false}, "m_Delegate", $asm_mscorlib.TypeRef("System.Delegate")); 
    $['Field']({Static:false, Public:false}, "m_CurrentCulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:false, Public:false}, "m_CurrentUICulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:false, Public:false}, "m_ThreadStartArg", $.Object); 
    $['Field']({Static:false, Public:false}, "DONT_USE_InternalThread", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "m_Priority", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_ManagedThreadId", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_ExecutionContextBelongsToOuterScope", $.Boolean); 
    $['Field']({Static:true , Public:false}, "s_LocalDataStoreMgr", $asm_mscorlib.TypeRef("System.LocalDataStoreMgr")); 
    $['Field']({Static:true , Public:false}, "s_LocalDataStore", $asm_mscorlib.TypeRef("System.LocalDataStoreHolder")); 
    $['Field']({Static:true , Public:false}, "s_asyncLocalCurrentCulture", $asm_mscorlib.TypeRef("System.Threading.AsyncLocal`1", [$asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])); 
    $['Field']({Static:true , Public:false}, "s_asyncLocalCurrentUICulture", $asm_mscorlib.TypeRef("System.Threading.AsyncLocal`1", [$asm_mscorlib.TypeRef("System.Globalization.CultureInfo")])); 
    $['Field']({Static:true , Public:false}, "t_currentProcessorIdCache", $.Int32); 
    $['Constant']({Static:true , Public:false}, "ProcessorIdCacheShift", 16); 
    $['Constant']({Static:true , Public:false}, "ProcessorIdCacheCountDownMask", 65535); 
    $['Constant']({Static:true , Public:false}, "ProcessorIdRefreshRate", 5000); 
    $.Property({Static:false, Public:true }, "ManagedThreadId", $.Int32);

    $.Property({Static:false, Public:false}, "ExecutionContextBelongsToCurrentScope", $.Boolean);

    $.Property({Static:false, Public:true }, "ExecutionContext", $asm_mscorlib.TypeRef("System.Threading.ExecutionContext"));

    $.Property({Static:false, Public:true }, "Priority", $asm_mscorlib.TypeRef("System.Threading.ThreadPriority"));

    $.Property({Static:false, Public:true }, "IsAlive", $.Boolean);

    $.Property({Static:false, Public:true }, "IsThreadPoolThread", $.Boolean);

    $.Property({Static:true , Public:true }, "CurrentThread", $.Type);

    $.Property({Static:false, Public:true }, "IsBackground", $.Boolean);

    $.Property({Static:false, Public:true }, "ThreadState", $asm_mscorlib.TypeRef("System.Threading.ThreadState"));

    $.Property({Static:false, Public:true }, "ApartmentState", $asm_mscorlib.TypeRef("System.Threading.ApartmentState"));

    $.Property({Static:false, Public:true }, "CurrentUICulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "CurrentCulture", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "CurrentContext", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.Context"));

    $.Property({Static:true , Public:true }, "CurrentPrincipal", $asm_mscorlib.TypeRef("System.Security.Principal.IPrincipal"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "AbortReason", $.Object);

    $.Property({Static:true , Public:false}, "LocalDataStoreManager", $asm_mscorlib.TypeRef("System.LocalDataStoreMgr"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._Thread")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Threading.WaitCallback */ 

JSIL.MakeDelegate("System.Threading.WaitCallback", true, [], 
  JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Object")));

/* interface System.Threading.IThreadPoolWorkItem */ 

JSIL.MakeInterface(
  "System.Threading.IThreadPoolWorkItem", false, [], function ($) {
  }, []);

/* delegate System.Threading.TimerCallback */ 

JSIL.MakeDelegate("System.Threading.TimerCallback", true, [], 
  JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Object")));

/* class System.Threading.SemaphoreSlim */ 

(function SemaphoreSlim$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.SemaphoreSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_currentCount", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_maxCount", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_waitCount", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_lockObj", $.Object); 
    $['Field']({Static:false, Public:false}, "m_waitHandle", $asm_mscorlib.TypeRef("System.Threading.ManualResetEvent")); 
    $['Field']({Static:false, Public:false}, "m_asyncHead", $asm_mscorlib.TypeRef("System.Threading.SemaphoreSlim+TaskNode")); 
    $['Field']({Static:false, Public:false}, "m_asyncTail", $asm_mscorlib.TypeRef("System.Threading.SemaphoreSlim+TaskNode")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_trueTask", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean])); 
    $['Constant']({Static:true , Public:false}, "NO_MAXIMUM", 2147483647); 
    $['Field']({Static:true , Public:false}, "s_cancellationTokenCanceledEventHandler", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $.Property({Static:false, Public:true }, "CurrentCount", $.Int32);

    $.Property({Static:false, Public:true }, "AvailableWaitHandle", $asm_mscorlib.TypeRef("System.Threading.WaitHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Current Count = {m_currentCount}"]; });

})();

/* class System.Threading.ManualResetEventSlim */ 

(function ManualResetEventSlim$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.ManualResetEventSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "DEFAULT_SPIN_SP", 1); 
    $['Constant']({Static:true , Public:false}, "DEFAULT_SPIN_MP", 10); 
    $['Field']({Static:false, Public:false}, "m_lock", $asm_mscorlib.TypeRef("System.Object")); 
    $['Field']({Static:false, Public:false}, "m_eventObj", $asm_mscorlib.TypeRef("System.Threading.ManualResetEvent")); 
    $['Field']({Static:false, Public:false}, "m_combinedState", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Constant']({Static:true , Public:false}, "SignalledState_BitMask", -2147483648); 
    $['Constant']({Static:true , Public:false}, "SignalledState_ShiftCount", 31); 
    $['Constant']({Static:true , Public:false}, "Dispose_BitMask", 1073741824); 
    $['Constant']({Static:true , Public:false}, "SpinCountState_BitMask", 1073217536); 
    $['Constant']({Static:true , Public:false}, "SpinCountState_ShiftCount", 19); 
    $['Constant']({Static:true , Public:false}, "SpinCountState_MaxValue", 2047); 
    $['Constant']({Static:true , Public:false}, "NumWaitersState_BitMask", 524287); 
    $['Constant']({Static:true , Public:false}, "NumWaitersState_ShiftCount", 0); 
    $['Constant']({Static:true , Public:false}, "NumWaitersState_MaxValue", 524287); 
    $['Field']({Static:true , Public:false}, "s_cancellationTokenCallback", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $.Property({Static:false, Public:true }, "WaitHandle", $asm_mscorlib.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true }, "IsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "SpinCount", $.Int32);

    $.Property({Static:false, Public:false}, "Waiters", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Set = {IsSet}"]; });

})();

/* class System.Threading.CancellationTokenSource */ 

(function CancellationTokenSource$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.CancellationTokenSource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:true , Public:false, ReadOnly:true }, "_staticSource_Set", $.Type); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "_staticSource_NotCancelable", $.Type); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_nLists", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_kernelEvent", $asm_mscorlib.TypeRef("System.Threading.ManualResetEvent")); 
    $['Field']({Static:false, Public:false}, "m_registeredCallbacksLists", $asm_mscorlib.TypeRef("System.Array")); 
    $['Constant']({Static:true , Public:false}, "CANNOT_BE_CANCELED", 0); 
    $['Constant']({Static:true , Public:false}, "NOT_CANCELED", 1); 
    $['Constant']({Static:true , Public:false}, "NOTIFYING", 2); 
    $['Constant']({Static:true , Public:false}, "NOTIFYINGCOMPLETE", 3); 
    $['Field']({Static:false, Public:false}, "m_state", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_threadIDExecutingCallbacks", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:false, Public:false}, "m_disposed", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_linkingRegistrations", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Threading.CancellationTokenRegistration")])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_LinkedTokenCancelDelegate", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $['Field']({Static:false, Public:false}, "m_executingCallback", $asm_mscorlib.TypeRef("System.Threading.CancellationCallbackInfo")); 
    $['Field']({Static:false, Public:false}, "m_timer", $asm_mscorlib.TypeRef("System.Threading.Timer")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_timerCallback", $asm_mscorlib.TypeRef("System.Threading.TimerCallback")); 
    $.Property({Static:false, Public:true }, "IsCancellationRequested", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCancellationCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "ThreadIDExecutingCallbacks", $.Int32);

    $.Property({Static:false, Public:true }, "Token", $asm_mscorlib.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:false}, "CanBeCanceled", $.Boolean);

    $.Property({Static:false, Public:false}, "WaitHandle", $asm_mscorlib.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:false}, "ExecutingCallback", $asm_mscorlib.TypeRef("System.Threading.CancellationCallbackInfo"));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Threading.CancellationToken */ 

(function CancellationToken$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Threading.CancellationToken", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_source", $asm_mscorlib.TypeRef("System.Threading.CancellationTokenSource")); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_ActionToActionObjShunt", $asm_mscorlib.TypeRef("System.Action`1", [$.Object])); 
    $.Property({Static:true , Public:true }, "None", $.Type);

    $.Property({Static:false, Public:true }, "IsCancellationRequested", $.Boolean);

    $.Property({Static:false, Public:true }, "CanBeCanceled", $.Boolean);

    $.Property({Static:false, Public:true }, "WaitHandle", $asm_mscorlib.TypeRef("System.Threading.WaitHandle"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["IsCancellationRequested = {IsCancellationRequested}"]; });

})();

/* class System.Threading.Tasks.TaskFactory`1 */ 

(function TaskFactory$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskFactory`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [$asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [
          $asm_mscorlib.TypeRef("System.Func`1", [$.GenericParameter("TResult")]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, $.GenericParameter("TResult")]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $['Field']({Static:false, Public:false}, "m_defaultCancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken")); 
    $['Field']({Static:false, Public:false}, "m_defaultScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $['Field']({Static:false, Public:false}, "m_defaultCreationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")); 
    $['Field']({Static:false, Public:false}, "m_defaultContinuationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")); 
    $.Property({Static:false, Public:false}, "DefaultScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:true }, "CancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:true }, "Scheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:true }, "CreationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"));

    $.Property({Static:false, Public:true }, "ContinuationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Threading.Tasks.TaskStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.Tasks.TaskStatus", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Created: 0, 
    WaitingForActivation: 1, 
    WaitingToRun: 2, 
    Running: 3, 
    WaitingForChildrenToComplete: 4, 
    RanToCompletion: 5, 
    Canceled: 6, 
    Faulted: 7, 
  }
);

/* enum System.Threading.Tasks.TaskCreationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.Tasks.TaskCreationOptions", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    PreferFairness: 1, 
    LongRunning: 2, 
    AttachedToParent: 4, 
    DenyChildAttach: 8, 
    HideScheduler: 16, 
    RunContinuationsAsynchronously: 64, 
  }
);

/* enum System.Threading.Tasks.TaskContinuationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.Tasks.TaskContinuationOptions", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    PreferFairness: 1, 
    LongRunning: 2, 
    AttachedToParent: 4, 
    DenyChildAttach: 8, 
    HideScheduler: 16, 
    LazyCancellation: 32, 
    RunContinuationsAsynchronously: 64, 
    NotOnRanToCompletion: 65536, 
    NotOnFaulted: 131072, 
    OnlyOnCanceled: 196608, 
    NotOnCanceled: 262144, 
    OnlyOnFaulted: 327680, 
    OnlyOnRanToCompletion: 393216, 
    ExecuteSynchronously: 524288, 
  }
);

/* class System.Threading.Tasks.StackGuard */ 

(function StackGuard$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.StackGuard", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_inliningDepth", $.Int32); 
    $['Constant']({Static:true , Public:false}, "MAX_UNCHECKED_INLINING_DEPTH", 20); 
    $['Field']({Static:false, Public:false}, "m_lastKnownWatermark", $.UInt64); 
    $['Field']({Static:true , Public:false}, "s_pageSize", $.Int32); 
    $['Constant']({Static:true , Public:false}, "STACK_RESERVED_SPACE", 65536); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Threading.Tasks.VoidTaskResult */ 

(function VoidTaskResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Threading.Tasks.VoidTaskResult", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Threading.Tasks.ITaskCompletionAction */ 

JSIL.MakeInterface(
  "System.Threading.Tasks.ITaskCompletionAction", false, [], function ($) {
  }, []);

/* class System.Threading.Tasks.TaskFactory */ 

(function TaskFactory$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action"), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.InternalTaskOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [$asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"), [
          $asm_mscorlib.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`1", ["!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`1", ["!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken")], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`1", ["!!0"]), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`1", ["!!0"]), $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm_mscorlib.TypeRef("System.Func`2", [$.Object, "!!0"]), $.Object], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, "!!0"]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, "!!0"]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")
        ], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartNew", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm_mscorlib.TypeRef("System.Func`2", [$.Object, "!!0"]), $.Object, 
          $asm_mscorlib.TypeRef("System.Threading.CancellationToken"), $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"), 
          $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TResult"])
    );

    $['Field']({Static:false, Public:false}, "m_defaultCancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken")); 
    $['Field']({Static:false, Public:false}, "m_defaultScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $['Field']({Static:false, Public:false}, "m_defaultCreationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")); 
    $['Field']({Static:false, Public:false}, "m_defaultContinuationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions")); 
    $.Property({Static:false, Public:false}, "DefaultScheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:true }, "CancellationToken", $asm_mscorlib.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:true }, "Scheduler", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:true }, "CreationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"));

    $.Property({Static:false, Public:true }, "ContinuationOptions", $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskContinuationOptions"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.Tasks.TaskScheduler */ 

(function TaskScheduler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskScheduler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:true , Public:false}, "s_activeTaskSchedulers", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $.Object])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_defaultTaskScheduler", $.Type); 
    $['Field']({Static:true , Public:false}, "s_taskSchedulerIdCounter", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_taskSchedulerId", $asm_mscorlib.TypeRef("System.Int32")); 
    $['Field']({Static:true , Public:false}, "_unobservedTaskException", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.UnobservedTaskExceptionEventArgs")])); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "_unobservedTaskExceptionLockObject", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "MaximumConcurrencyLevel", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "RequiresAtomicStartTransition", $.Boolean);

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:true , Public:true }, "Current", $.Type);

    $.Property({Static:true , Public:false}, "InternalCurrent", $.Type);

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Event({Static:true , Public:true }, "UnobservedTaskException", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.UnobservedTaskExceptionEventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Id={Id}"]; });

})();

/* class System.Threading.Tasks.UnobservedTaskExceptionEventArgs */ 

(function UnobservedTaskExceptionEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.EventArgs"), 
      Name: "System.Threading.Tasks.UnobservedTaskExceptionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_exception", $asm_mscorlib.TypeRef("System.AggregateException")); 
    $['Field']({Static:false, Public:false}, "m_observed", $.Boolean); 
    $.Property({Static:false, Public:true }, "Observed", $.Boolean);

    $.Property({Static:false, Public:true }, "Exception", $asm_mscorlib.TypeRef("System.AggregateException"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.Tasks.TaskCompletionSource`1 */ 

(function TaskCompletionSource$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskCompletionSource`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm_mscorlib.TypeRef("System.Threading.Tasks.TaskCreationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResult", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySetCanceled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySetCanceled", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySetException", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySetException", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetException", 
      new JSIL.MethodSignature($.Boolean, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Runtime.ExceptionServices.ExceptionDispatchInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySetResult", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TResult")])
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:true }, "Task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Threading.Tasks.IProducerConsumerQueue`1 */ 

JSIL.MakeInterface(
  "System.Threading.Tasks.IProducerConsumerQueue`1", false, ["T"], function ($) {
    $.Property({}, "IsEmpty");
    $.Property({}, "Count");
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Threading.Tasks.IProducerConsumerQueue`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.Assembly");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.RuntimeAssembly");

JSIL.DeclareNamespace("System.Reflection");
/* class System.Reflection.AssemblyName */ 

(function AssemblyName$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Reflection.AssemblyName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Reflection.AssemblyNameFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAssemblyName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Flags", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Reflection.AssemblyNameFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "_Name", $.String); 
    $['Field']({Static:false, Public:false}, "_PublicKey", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_PublicKeyToken", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_CultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo")); 
    $['Field']({Static:false, Public:false}, "_CodeBase", $.String); 
    $['Field']({Static:false, Public:false}, "_Version", $asm_mscorlib.TypeRef("System.Version")); 
    $['Field']({Static:false, Public:false}, "_StrongNameKeyPair", $asm_mscorlib.TypeRef("System.Reflection.StrongNameKeyPair")); 
    $['Field']({Static:false, Public:false}, "m_siInfo", $asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo")); 
    $['Field']({Static:false, Public:false}, "_HashForControl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "_HashAlgorithm", $asm_mscorlib.TypeRef("System.Configuration.Assemblies.AssemblyHashAlgorithm")); 
    $['Field']({Static:false, Public:false}, "_HashAlgorithmForControl", $asm_mscorlib.TypeRef("System.Configuration.Assemblies.AssemblyHashAlgorithm")); 
    $['Field']({Static:false, Public:false}, "_VersionCompatibility", $asm_mscorlib.TypeRef("System.Configuration.Assemblies.AssemblyVersionCompatibility")); 
    $['Field']({Static:false, Public:false}, "_Flags", $asm_mscorlib.TypeRef("System.Reflection.AssemblyNameFlags")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Version", $asm_mscorlib.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "CultureInfo", $asm_mscorlib.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "CultureName", $.String);

    $.Property({Static:false, Public:true }, "CodeBase", $.String);

    $.Property({Static:false, Public:true }, "EscapedCodeBase", $.String);

    $.Property({Static:false, Public:true }, "ProcessorArchitecture", $asm_mscorlib.TypeRef("System.Reflection.ProcessorArchitecture"));

    $.Property({Static:false, Public:true }, "ContentType", $asm_mscorlib.TypeRef("System.Reflection.AssemblyContentType"));

    $.Property({Static:false, Public:true }, "Flags", $asm_mscorlib.TypeRef("System.Reflection.AssemblyNameFlags"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm_mscorlib.TypeRef("System.Configuration.Assemblies.AssemblyHashAlgorithm"));

    $.Property({Static:false, Public:true }, "VersionCompatibility", $asm_mscorlib.TypeRef("System.Configuration.Assemblies.AssemblyVersionCompatibility"));

    $.Property({Static:false, Public:true }, "KeyPair", $asm_mscorlib.TypeRef("System.Reflection.StrongNameKeyPair"));

    $.Property({Static:false, Public:true }, "FullName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._AssemblyName"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.ICloneable"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 3 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Reflection.Binder */ 

(function Binder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Reflection.Binder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Reflection.BindingFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Reflection.BindingFlags", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    IgnoreCase: 1, 
    DeclaredOnly: 2, 
    Instance: 4, 
    Static: 8, 
    Public: 16, 
    NonPublic: 32, 
    FlattenHierarchy: 64, 
    InvokeMethod: 256, 
    CreateInstance: 512, 
    GetField: 1024, 
    SetField: 2048, 
    GetProperty: 4096, 
    SetProperty: 8192, 
    PutDispProperty: 16384, 
    PutRefDispProperty: 32768, 
    ExactBinding: 65536, 
    SuppressChangeType: 131072, 
    OptionalParamBinding: 262144, 
    IgnoreReturn: 16777216, 
  }
);

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.ConstructorInfo");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MemberInfo");

/* class System.Reflection.EventInfo */ 

(function EventInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Reflection.MemberInfo"), 
      Name: "System.Reflection.EventInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm_mscorlib.TypeRef("System.Delegate")])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAddMethod", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAddMethod", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRemoveMethod", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRemoveMethod", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm_mscorlib.TypeRef("System.Delegate")])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm_mscorlib.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm_mscorlib.TypeRef("System.Reflection.EventAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "AddMethod", $asm_mscorlib.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "RemoveMethod", $asm_mscorlib.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "RaiseMethod", $asm_mscorlib.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "EventHandlerType", $asm_mscorlib.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsSpecialName", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsMulticast", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._EventInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.FieldInfo");

/* interface System.Reflection.ICustomAttributeProvider */ 

JSIL.MakeInterface(
  "System.Reflection.ICustomAttributeProvider", true, [], function ($) {
  }, []);

/* interface System.Reflection.IReflectableType */ 

JSIL.MakeInterface(
  "System.Reflection.IReflectableType", true, [], function ($) {
  }, []);

/* interface System.Reflection.IReflect */ 

JSIL.MakeInterface(
  "System.Reflection.IReflect", true, [], function ($) {
    $.Method({}, "GetMethod", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.ParameterModifier")])
        ]));
    $.Method({}, "GetMethod", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMethods", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MethodInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetField", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.FieldInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetFields", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.FieldInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetProperty", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.PropertyInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetProperty", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.PropertyInfo"), [
          $.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $asm_mscorlib.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.ParameterModifier")])
        ]));
    $.Method({}, "GetProperties", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.PropertyInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMember", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMembers", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MemberInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "get_UnderlyingSystemType", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Type")));
    $.Property({}, "UnderlyingSystemType");
  }, []);

/* enum System.Reflection.MemberTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Reflection.MemberTypes", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Constructor: 1, 
    Event: 2, 
    Field: 4, 
    Method: 8, 
    Property: 16, 
    TypeInfo: 32, 
    Custom: 64, 
    NestedType: 128, 
    All: 191, 
  }
);

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MethodBase");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MethodInfo");

/* enum System.Reflection.ParameterAttributes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Reflection.ParameterAttributes", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    In: 1, 
    Out: 2, 
    Lcid: 4, 
    Retval: 8, 
    Optional: 16, 
    HasDefault: 4096, 
    HasFieldMarshal: 8192, 
    Reserved3: 16384, 
    Reserved4: 32768, 
    ReservedMask: 61440, 
  }
);

/* class System.Reflection.ParameterInfo */ 

(function ParameterInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Reflection.ParameterInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterType", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm_mscorlib.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $['Field']({Static:false, Public:false}, "NameImpl", $.String); 
    $['Field']({Static:false, Public:false}, "ClassImpl", $asm_mscorlib.TypeRef("System.Type")); 
    $['Field']({Static:false, Public:false}, "PositionImpl", $.Int32); 
    $['Field']({Static:false, Public:false}, "AttrsImpl", $asm_mscorlib.TypeRef("System.Reflection.ParameterAttributes")); 
    $['Field']({Static:false, Public:false}, "DefaultValueImpl", $.Object); 
    $['Field']({Static:false, Public:false}, "MemberImpl", $asm_mscorlib.TypeRef("System.Reflection.MemberInfo")); 
    $['Field']({Static:false, Public:false}, "_importer", $.IntPtr)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "_token", $.Int32)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "bExtraConstChecked", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ParameterType", $asm_mscorlib.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasDefaultValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "RawDefaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm_mscorlib.TypeRef("System.Reflection.ParameterAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm_mscorlib.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "IsIn", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOut", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLcid", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRetval", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOptional", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MetadataToken", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CustomAttributes", $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Reflection.CustomAttributeData")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.InteropServices._ParameterInfo"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Reflection.ICustomAttributeProvider"), 
      /* 2 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IObjectReference")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Reflection.ParameterModifier */ 

(function ParameterModifier$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Reflection.ParameterModifier", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_byRef", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Property({Static:false, Public:false}, "IsByRefArray", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Item", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Reflection.Pointer */ 

(function Pointer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Reflection.Pointer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_ptr", $jsilcore.TypeRef("JSIL.Pointer", [$asm_mscorlib.TypeRef("System.Void")])); 
    $['Field']({Static:false, Public:false}, "_ptrType", $asm_mscorlib.TypeRef("System.RuntimeType")); 
    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.PropertyInfo");

JSIL.DeclareNamespace("System.Deployment");
JSIL.DeclareNamespace("System.Deployment.Internal");
JSIL.DeclareNamespace("System.Deployment.Internal.Isolation");
/* interface System.Deployment.Internal.Isolation.ISection */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.ISection", false, [], function ($) {
    $.Property({}, "_NewEnum");
    $.Property({}, "Count");
    $.Property({}, "SectionID");
    $.Property({}, "SectionName");
  }, []);

/* interface System.Deployment.Internal.Isolation.ISectionWithStringKey */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.ISectionWithStringKey", false, [], function ($) {
    $.Property({}, "IsCaseInsensitive");
  }, []);

/* interface System.Deployment.Internal.Isolation.ISectionWithReferenceIdentityKey */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.ISectionWithReferenceIdentityKey", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.ISectionEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.ISectionEntry", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumUnknown */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumUnknown", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.ICDF */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.ICDF", false, [], function ($) {
    $.Property({}, "_NewEnum");
    $.Property({}, "Count");
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_FILE */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_FILE", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_SUBCATEGORY */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_SUBCATEGORY", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_INSTANCE */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_INSTANCE", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IReferenceIdentity */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IReferenceIdentity", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IDefinitionIdentity */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IDefinitionIdentity", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumDefinitionIdentity */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumDefinitionIdentity", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IEnumReferenceIdentity */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IEnumReferenceIdentity", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IDefinitionAppId */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IDefinitionAppId", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IReferenceAppId */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IReferenceAppId", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IIdentityAuthority */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IIdentityAuthority", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IAppIdAuthority */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IAppIdAuthority", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.Store+IPathLock */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Store+IPathLock", false, [], function ($) {
    $.Property({}, "Path");
  }, [$asm_mscorlib.TypeRef("System.IDisposable")]);

/* interface System.Deployment.Internal.Isolation.IStore */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IStore", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IManifestParseErrorCallback */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IManifestParseErrorCallback", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IManifestInformation */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IManifestInformation", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IActContext */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IActContext", false, [], function ($) {
  }, []);

/* interface System.Deployment.Internal.Isolation.IStateManager */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.IStateManager", false, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Deployment.Internal.Isolation.Manifest");
/* interface System.Deployment.Internal.Isolation.Manifest.ICMS */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICMS", false, [], function ($) {
    $.Property({}, "Identity");
    $.Property({}, "FileSection");
    $.Property({}, "CategoryMembershipSection");
    $.Property({}, "COMRedirectionSection");
    $.Property({}, "ProgIdRedirectionSection");
    $.Property({}, "CLRSurrogateSection");
    $.Property({}, "AssemblyReferenceSection");
    $.Property({}, "WindowClassSection");
    $.Property({}, "StringSection");
    $.Property({}, "EntryPointSection");
    $.Property({}, "PermissionSetSection");
    $.Property({}, "MetadataSectionEntry");
    $.Property({}, "AssemblyRequestSection");
    $.Property({}, "RegistryKeySection");
    $.Property({}, "DirectorySection");
    $.Property({}, "FileAssociationSection");
    $.Property({}, "CompatibleFrameworksSection");
    $.Property({}, "EventSection");
    $.Property({}, "EventMapSection");
    $.Property({}, "EventTagSection");
    $.Property({}, "CounterSetSection");
    $.Property({}, "CounterSection");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceIdLookupMapEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IMuiResourceIdLookupMapEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Count");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdStringEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdStringEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "StringIds");
    $.Property({}, "IntegerIds");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdIntEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdIntEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "StringIds");
    $.Property({}, "IntegerIds");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceMapEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IMuiResourceMapEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "ResourceTypeIdInt");
    $.Property({}, "ResourceTypeIdString");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IHashElementEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IHashElementEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "index");
    $.Property({}, "Transform");
    $.Property({}, "TransformMetadata");
    $.Property({}, "DigestMethod");
    $.Property({}, "DigestValue");
    $.Property({}, "Xml");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IFileEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IFileEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Name");
    $.Property({}, "HashAlgorithm");
    $.Property({}, "LoadFrom");
    $.Property({}, "SourcePath");
    $.Property({}, "ImportPath");
    $.Property({}, "SourceName");
    $.Property({}, "Location");
    $.Property({}, "HashValue");
    $.Property({}, "Size");
    $.Property({}, "Group");
    $.Property({}, "Flags");
    $.Property({}, "MuiMapping");
    $.Property({}, "WritableType");
    $.Property({}, "HashElements");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IFileAssociationEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IFileAssociationEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Extension");
    $.Property({}, "Description");
    $.Property({}, "ProgID");
    $.Property({}, "DefaultIcon");
    $.Property({}, "Parameter");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipDataEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipDataEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "index");
    $.Property({}, "Xml");
    $.Property({}, "Description");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ISubcategoryMembershipEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ISubcategoryMembershipEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Subcategory");
    $.Property({}, "CategoryMembershipData");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Identity");
    $.Property({}, "SubcategoryMembership");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ICOMServerEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICOMServerEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Clsid");
    $.Property({}, "Flags");
    $.Property({}, "ConfiguredGuid");
    $.Property({}, "ImplementedClsid");
    $.Property({}, "TypeLibrary");
    $.Property({}, "ThreadingModel");
    $.Property({}, "RuntimeVersion");
    $.Property({}, "HostFile");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IProgIdRedirectionEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IProgIdRedirectionEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "ProgId");
    $.Property({}, "RedirectedGuid");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ICLRSurrogateEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICLRSurrogateEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Clsid");
    $.Property({}, "RuntimeVersion");
    $.Property({}, "ClassName");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Group");
    $.Property({}, "Codebase");
    $.Property({}, "Size");
    $.Property({}, "HashValue");
    $.Property({}, "HashAlgorithm");
    $.Property({}, "Flags");
    $.Property({}, "ResourceFallbackCulture");
    $.Property({}, "Description");
    $.Property({}, "SupportUrl");
    $.Property({}, "HashElements");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "ReferenceIdentity");
    $.Property({}, "Flags");
    $.Property({}, "DependentAssembly");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IWindowClassEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IWindowClassEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "ClassName");
    $.Property({}, "HostDll");
    $.Property({}, "fVersioned");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IResourceTableMappingEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IResourceTableMappingEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "id");
    $.Property({}, "FinalStringMapped");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IEntryPointEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IEntryPointEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Name");
    $.Property({}, "CommandLine_File");
    $.Property({}, "CommandLine_Parameters");
    $.Property({}, "Identity");
    $.Property({}, "Flags");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IPermissionSetEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IPermissionSetEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Id");
    $.Property({}, "XmlSegment");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IAssemblyRequestEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IAssemblyRequestEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Name");
    $.Property({}, "permissionSetID");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IDescriptionMetadataEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IDescriptionMetadataEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "Publisher");
    $.Property({}, "Product");
    $.Property({}, "SupportUrl");
    $.Property({}, "IconFile");
    $.Property({}, "ErrorReportUrl");
    $.Property({}, "SuiteName");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IDeploymentMetadataEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IDeploymentMetadataEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "DeploymentProviderCodebase");
    $.Property({}, "MinimumRequiredVersion");
    $.Property({}, "MaximumAge");
    $.Property({}, "MaximumAge_Unit");
    $.Property({}, "DeploymentFlags");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IDependentOSMetadataEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IDependentOSMetadataEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "SupportUrl");
    $.Property({}, "Description");
    $.Property({}, "MajorVersion");
    $.Property({}, "MinorVersion");
    $.Property({}, "BuildNumber");
    $.Property({}, "ServicePackMajor");
    $.Property({}, "ServicePackMinor");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.ICompatibleFrameworksMetadataEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.ICompatibleFrameworksMetadataEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "SupportUrl");
  }, []);

/* interface System.Deployment.Internal.Isolation.Manifest.IMetadataSectionEntry */ 

JSIL.MakeInterface(
  "System.Deployment.Internal.Isolation.Manifest.IMetadataSectionEntry", false, [], function ($) {
    $.Property({}, "AllData");
    $.Property({}, "SchemaVersion");
    $.Property({}, "ManifestFlags");
    $.Property({}, "UsagePatterns");
    $.Property({}, "CdfIdentity");
    $.Property({}, "LocalPath");
    $.Property({}, "HashAlgorithm");
    $.Property({}, "ManifestHash");
    $.Property({}, "ContentType");
    $.Property({}, "RuntimeImageVersion");
    $.Property({}, "MvidValue");
    $.Property({}, "DescriptionData");
    $.Property({}, "DeploymentData");
    $.Property({}, "DependentOSData");
    $.Property({}, "defaultPermissionSetID");
    $.Property({}, "RequestedExecutionLevel");
    $.Property({}, "RequestedExecutionLevelUIAccess");
    $.Property({}, "ResourceTypeResourcesDependency");
    $.Property({}, "ResourceTypeManifestResourcesDependency");
    $.Property({}, "KeyInfoElement");
    $.Property({}, "CompatibleFrameworksData");
  }, []);

/* class System.Runtime.ConstrainedExecution.ReliabilityContractAttribute */ 

(function ReliabilityContractAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.ConstrainedExecution.ReliabilityContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_consistency", $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.Consistency")); 
    $['Field']({Static:false, Public:false}, "_cer", $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.Cer")); 
    $.Property({Static:false, Public:true }, "ConsistencyGuarantee", $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.Consistency"));

    $.Property({Static:false, Public:true }, "Cer", $asm_mscorlib.TypeRef("System.Runtime.ConstrainedExecution.Cer"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization");
/* interface System.Runtime.Serialization.IDeserializationCallback */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDeserializationCallback", true, [], function ($) {
  }, []);

/* interface System.Runtime.Serialization.IFormatter */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IFormatter", true, [], function ($) {
    $.Property({}, "SurrogateSelector");
    $.Property({}, "Binder");
    $.Property({}, "Context");
  }, []);

/* interface System.Runtime.Serialization.IFormatterConverter */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IFormatterConverter", true, [], function ($) {
  }, []);

/* interface System.Runtime.Serialization.IObjectReference */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IObjectReference", true, [], function ($) {
  }, []);

/* interface System.Runtime.Serialization.ISerializable */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.ISerializable", true, [], function ($) {
  }, []);

/* interface System.Runtime.Serialization.ISerializationSurrogate */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.ISerializationSurrogate", true, [], function ($) {
  }, []);

/* interface System.Runtime.Serialization.ISurrogateSelector */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.ISurrogateSelector", true, [], function ($) {
  }, []);

/* class System.Runtime.Serialization.OptionalFieldAttribute */ 

(function OptionalFieldAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.OptionalFieldAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "versionAdded", $.Int32); 
    $.Property({Static:false, Public:true }, "VersionAdded", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.OnSerializingAttribute */ 

(function OnSerializingAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.OnSerializingAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.OnSerializedAttribute */ 

(function OnSerializedAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.OnSerializedAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.OnDeserializingAttribute */ 

(function OnDeserializingAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.OnDeserializingAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.OnDeserializedAttribute */ 

(function OnDeserializedAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.OnDeserializedAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SerializationException */ 

(function SerializationException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.SystemException"), 
      Name: "System.Runtime.Serialization.SerializationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm_mscorlib.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $['Field']({Static:true , Public:false}, "_nullMessage", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.StreamingContext */ 

(function StreamingContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.StreamingContext", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_additionalContext", $.Object); 
    $['Field']({Static:false, Public:false}, "m_state", $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContextStates")); 
    $.Property({Static:false, Public:true }, "Context", $.Object);

    $.Property({Static:false, Public:true }, "State", $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContextStates"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.StreamingContextStates */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Serialization.StreamingContextStates", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    CrossProcess: 1, 
    CrossMachine: 2, 
    File: 4, 
    Persistence: 8, 
    Remoting: 16, 
    Other: 32, 
    Clone: 64, 
    CrossAppDomain: 128, 
    All: 255, 
  }
);

/* interface System.Runtime.Serialization.ISafeSerializationData */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.ISafeSerializationData", true, [], function ($) {
  }, []);

/* class System.Runtime.Serialization.SafeSerializationManager */ 

(function SafeSerializationManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SafeSerializationManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_serializedStates", $asm_mscorlib.TypeRef("System.Collections.Generic.IList`1", [$.Object])); 
    $['Field']({Static:false, Public:false}, "m_savedSerializationInfo", $asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo")); 
    $['Field']({Static:false, Public:false}, "m_realObject", $.Object); 
    $['Field']({Static:false, Public:false}, "m_realType", $asm_mscorlib.TypeRef("System.RuntimeType")); 
    $['Field']({Static:false, Public:false}, "SerializeObjectState", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")]))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $['Constant']({Static:true , Public:false}, "RealTypeSerializationName", "CLR_SafeSerializationManager_RealType"); 
    $.Property({Static:false, Public:false}, "IsActive", $.Boolean);

    $.Event({Static:false, Public:false}, "SerializeObjectState", $asm_mscorlib.TypeRef("System.EventHandler`1", [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.IObjectReference"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Formatters");
/* interface System.Runtime.Serialization.Formatters.ISoapMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Formatters.ISoapMessage", true, [], function ($) {
    $.Property({}, "ParamNames");
    $.Property({}, "ParamValues");
    $.Property({}, "ParamTypes");
    $.Property({}, "MethodName");
    $.Property({}, "XmlNameSpace");
    $.Property({}, "Headers");
  }, []);

/* interface System.Runtime.Serialization.Formatters.IFieldInfo */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Formatters.IFieldInfo", true, [], function ($) {
    $.Property({}, "FieldNames");
    $.Property({}, "FieldTypes");
  }, []);

JSIL.DeclareNamespace("System.Runtime.Serialization.Formatters.Binary");
/* interface System.Runtime.Serialization.Formatters.Binary.IStreamable */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Formatters.Binary.IStreamable", false, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.ExceptionServices");
/* class System.Runtime.ExceptionServices.ExceptionDispatchInfo */ 

(function ExceptionDispatchInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.ExceptionServices.ExceptionDispatchInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_Exception", $asm_mscorlib.TypeRef("System.Exception")); 
    $['Field']({Static:false, Public:false}, "m_remoteStackTrace", $.String); 
    $['Field']({Static:false, Public:false}, "m_stackTrace", $.Object); 
    $['Field']({Static:false, Public:false}, "m_dynamicMethods", $.Object); 
    $['Field']({Static:false, Public:false}, "m_IPForWatsonBuckets", $.UIntPtr); 
    $['Field']({Static:false, Public:false}, "m_WatsonBuckets", $.Object); 
    $.Property({Static:false, Public:false}, "IPForWatsonBuckets", $.UIntPtr);

    $.Property({Static:false, Public:false}, "WatsonBuckets", $.Object);

    $.Property({Static:false, Public:false}, "BinaryStackTraceArray", $.Object);

    $.Property({Static:false, Public:false}, "DynamicMethodArray", $.Object);

    $.Property({Static:false, Public:false}, "RemoteStackTrace", $.String);

    $.Property({Static:false, Public:true }, "SourceException", $asm_mscorlib.TypeRef("System.Exception"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Remoting");
/* interface System.Runtime.Remoting.IObjectHandle */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.IObjectHandle", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.IRemotingTypeInfo */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.IRemotingTypeInfo", true, [], function ($) {
    $.Property({}, "TypeName");
  }, []);

/* interface System.Runtime.Remoting.IChannelInfo */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.IChannelInfo", true, [], function ($) {
    $.Property({}, "ChannelData");
  }, []);

/* interface System.Runtime.Remoting.IEnvoyInfo */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.IEnvoyInfo", true, [], function ($) {
    $.Property({}, "EnvoySinks");
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Metadata");
JSIL.DeclareNamespace("System.Runtime.Remoting.Metadata.W3cXsd2001");
/* interface System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Services");
/* interface System.Runtime.Remoting.Services.ITrackingHandler */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Services.ITrackingHandler", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Contexts");
/* class System.Runtime.Remoting.Contexts.Context */ 

(function Context$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.Remoting.Contexts.Context", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "CTX_DEFAULT_CONTEXT", 1); 
    $['Constant']({Static:true , Public:false}, "CTX_FROZEN", 2); 
    $['Constant']({Static:true , Public:false}, "CTX_THREADPOOL_AWARE", 4); 
    $['Constant']({Static:true , Public:false}, "GROW_BY", 8); 
    $['Constant']({Static:true , Public:false}, "STATICS_BUCKET_SIZE", 8); 
    $['Field']({Static:false, Public:false}, "_ctxProps", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IContextProperty")])); 
    $['Field']({Static:false, Public:false}, "_dphCtx", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.DynamicPropertyHolder")); 
    $['Field']({Static:false, Public:false}, "_localDataStore", $asm_mscorlib.TypeRef("System.LocalDataStoreHolder")); 
    $['Field']({Static:false, Public:false}, "_serverContextChain", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessageSink")); 
    $['Field']({Static:false, Public:false}, "_clientContextChain", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessageSink")); 
    $['Field']({Static:false, Public:false}, "_appDomain", $asm_mscorlib.TypeRef("System.AppDomain")); 
    $['Field']({Static:false, Public:false}, "_ctxStatics", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $['Field']({Static:false, Public:false}, "_internalContext", $.IntPtr); 
    $['Field']({Static:false, Public:false}, "_ctxID", $.Int32); 
    $['Field']({Static:false, Public:false}, "_ctxFlags", $.Int32); 
    $['Field']({Static:false, Public:false}, "_numCtxProps", $.Int32); 
    $['Field']({Static:false, Public:false}, "_ctxStaticsCurrentBucket", $.Int32); 
    $['Field']({Static:false, Public:false}, "_ctxStaticsFreeIndex", $.Int32); 
    $['Field']({Static:true , Public:false}, "_dphGlobal", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.DynamicPropertyHolder")); 
    $['Field']({Static:true , Public:false}, "_localDataStoreMgr", $asm_mscorlib.TypeRef("System.LocalDataStoreMgr")); 
    $['Field']({Static:true , Public:false}, "_ctxIDCounter", $.Int32, 0); 
    $.Property({Static:false, Public:true , Virtual:true }, "ContextID", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "InternalContextID", $.IntPtr);

    $.Property({Static:false, Public:false, Virtual:true }, "AppDomain", $asm_mscorlib.TypeRef("System.AppDomain"));

    $.Property({Static:false, Public:false}, "IsDefaultContext", $.Boolean);

    $.Property({Static:true , Public:true }, "DefaultContext", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "IsThreadPoolAware", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ContextProperties", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IContextProperty")]));

    $.Property({Static:false, Public:false}, "MyLocalStore", $asm_mscorlib.TypeRef("System.LocalDataStore"));

    $.Property({Static:false, Public:false, Virtual:true }, "PerContextDynamicProperties", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IDynamicProperty")]));

    $.Property({Static:true , Public:false}, "GlobalDynamicSinks", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.ArrayWithSize"));

    $.Property({Static:false, Public:false, Virtual:true }, "DynamicSinks", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.ArrayWithSize"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Remoting.Contexts.IContextAttribute */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContextAttribute", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContextProperty */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContextProperty", true, [], function ($) {
    $.Property({}, "Name");
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContextPropertyActivator */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContextPropertyActivator", true, [], function ($) {
  }, []);

/* class System.Runtime.Remoting.Contexts.DynamicPropertyHolder */ 

(function DynamicPropertyHolder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.Remoting.Contexts.DynamicPropertyHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "GROW_BY", 8); 
    $['Field']({Static:false, Public:false}, "_props", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IDynamicProperty")])); 
    $['Field']({Static:false, Public:false}, "_numProps", $.Int32); 
    $['Field']({Static:false, Public:false}, "_sinks", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IDynamicMessageSink")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "DynamicProperties", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.IDynamicProperty")]));

    $.Property({Static:false, Public:false, Virtual:true }, "DynamicSinks", $asm_mscorlib.TypeRef("System.Runtime.Remoting.Contexts.ArrayWithSize"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Remoting.Contexts.IContributeClientContextSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContributeClientContextSink", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContributeDynamicSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContributeDynamicSink", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContributeEnvoySink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContributeEnvoySink", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContributeObjectSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContributeObjectSink", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IContributeServerContextSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IContributeServerContextSink", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Contexts.IDynamicProperty */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IDynamicProperty", true, [], function ($) {
    $.Property({}, "Name");
  }, []);

/* interface System.Runtime.Remoting.Contexts.IDynamicMessageSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Contexts.IDynamicMessageSink", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Lifetime");
/* interface System.Runtime.Remoting.Lifetime.ILease */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Lifetime.ILease", true, [], function ($) {
    $.Property({}, "RenewOnCallTime");
    $.Property({}, "SponsorshipTimeout");
    $.Property({}, "InitialLeaseTime");
    $.Property({}, "CurrentLeaseTime");
    $.Property({}, "CurrentState");
  }, []);

/* interface System.Runtime.Remoting.Lifetime.ISponsor */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Lifetime.ISponsor", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Channels");
/* interface System.Runtime.Remoting.Channels.IClientChannelSinkStack */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientChannelSinkStack", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack")]);

/* interface System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Channels.IServerChannelSinkStack */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IServerChannelSinkStack", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack")]);

/* interface System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Channels.IChannel */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannel", true, [], function ($) {
    $.Property({}, "ChannelPriority");
    $.Property({}, "ChannelName");
  }, []);

/* interface System.Runtime.Remoting.Channels.IChannelSender */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannelSender", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IChannel")]);

/* interface System.Runtime.Remoting.Channels.IChannelReceiver */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannelReceiver", true, [], function ($) {
    $.Property({}, "ChannelData");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IChannel")]);

/* interface System.Runtime.Remoting.Channels.IChannelReceiverHook */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannelReceiverHook", true, [], function ($) {
    $.Property({}, "ChannelScheme");
    $.Property({}, "WantsToListen");
    $.Property({}, "ChannelSinkChain");
  }, []);

/* interface System.Runtime.Remoting.Channels.IClientChannelSinkProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientChannelSinkProvider", true, [], function ($) {
    $.Property({}, "Next");
  }, []);

/* interface System.Runtime.Remoting.Channels.IServerChannelSinkProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IServerChannelSinkProvider", true, [], function ($) {
    $.Property({}, "Next");
  }, []);

/* interface System.Runtime.Remoting.Channels.IClientFormatterSinkProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientFormatterSinkProvider", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IClientChannelSinkProvider")]);

/* interface System.Runtime.Remoting.Channels.IServerFormatterSinkProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IServerFormatterSinkProvider", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IServerChannelSinkProvider")]);

/* interface System.Runtime.Remoting.Channels.IClientChannelSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientChannelSink", true, [], function ($) {
    $.Property({}, "NextChannelSink");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IChannelSinkBase")]);

/* interface System.Runtime.Remoting.Channels.IServerChannelSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IServerChannelSink", true, [], function ($) {
    $.Property({}, "NextChannelSink");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IChannelSinkBase")]);

/* interface System.Runtime.Remoting.Channels.IChannelSinkBase */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannelSinkBase", true, [], function ($) {
    $.Property({}, "Properties");
  }, []);

/* interface System.Runtime.Remoting.Channels.IClientFormatterSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IClientFormatterSink", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessageSink"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IClientChannelSink"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Channels.IChannelSinkBase")]);

/* interface System.Runtime.Remoting.Channels.IChannelDataStore */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.IChannelDataStore", true, [], function ($) {
    $.Property({}, "ChannelUris");
    $.Property({}, "Item");
  }, []);

/* interface System.Runtime.Remoting.Channels.ITransportHeaders */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.ITransportHeaders", true, [], function ($) {
    $.Property({}, "Item");
  }, []);

/* interface System.Runtime.Remoting.Channels.ISecurableChannel */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Channels.ISecurableChannel", true, [], function ($) {
    $.Property({}, "IsSecured");
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Messaging");
/* interface System.Runtime.Remoting.Messaging.IInternalMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IInternalMessage", false, [], function ($) {
    $.Property({}, "ServerIdentityObject");
    $.Property({}, "IdentityObject");
  }, []);

/* interface System.Runtime.Remoting.Messaging.IMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMessage", true, [], function ($) {
    $.Property({}, "Properties");
  }, []);

/* interface System.Runtime.Remoting.Messaging.IMessageCtrl */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMessageCtrl", true, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Messaging.IMessageSink */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMessageSink", true, [], function ($) {
    $.Property({}, "NextSink");
  }, []);

/* interface System.Runtime.Remoting.Messaging.IMethodMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMethodMessage", true, [], function ($) {
    $.Property({}, "Uri");
    $.Property({}, "MethodName");
    $.Property({}, "TypeName");
    $.Property({}, "MethodSignature");
    $.Property({}, "ArgCount");
    $.Property({}, "Args");
    $.Property({}, "HasVarArgs");
    $.Property({}, "LogicalCallContext");
    $.Property({}, "MethodBase");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessage")]);

/* interface System.Runtime.Remoting.Messaging.IMethodCallMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMethodCallMessage", true, [], function ($) {
    $.Property({}, "InArgCount");
    $.Property({}, "InArgs");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessage")]);

/* interface System.Runtime.Remoting.Messaging.IMethodReturnMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IMethodReturnMessage", true, [], function ($) {
    $.Property({}, "OutArgCount");
    $.Property({}, "OutArgs");
    $.Property({}, "Exception");
    $.Property({}, "ReturnValue");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessage")]);

/* interface System.Runtime.Remoting.Messaging.IRemotingFormatter */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.IRemotingFormatter", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.IFormatter")]);

/* interface System.Runtime.Remoting.Messaging.ISerializationRootObject */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.ISerializationRootObject", false, [], function ($) {
  }, []);

/* interface System.Runtime.Remoting.Messaging.ILogicalThreadAffinative */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Messaging.ILogicalThreadAffinative", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.Remoting.Activation");
/* interface System.Runtime.Remoting.Activation.IActivator */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Activation.IActivator", true, [], function ($) {
    $.Property({}, "NextActivator");
    $.Property({}, "Level");
  }, []);

/* interface System.Runtime.Remoting.Activation.IConstructionCallMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Activation.IConstructionCallMessage", true, [], function ($) {
    $.Property({}, "Activator");
    $.Property({}, "CallSiteActivationAttributes");
    $.Property({}, "ActivationTypeName");
    $.Property({}, "ActivationType");
    $.Property({}, "ContextProperties");
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodCallMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessage")]);

/* interface System.Runtime.Remoting.Activation.IConstructionReturnMessage */ 

JSIL.MakeInterface(
  "System.Runtime.Remoting.Activation.IConstructionReturnMessage", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodReturnMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMethodMessage"), $asm_mscorlib.TypeRef("System.Runtime.Remoting.Messaging.IMessage")]);

JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.RuntimeHelpers */ 

(function RuntimeHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "InitializeArray", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Array"), $asm_mscorlib.TypeRef("System.RuntimeFieldHandle")])
    );

    $.Property({Static:true , Public:true }, "OffsetToStringData", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CompilerGeneratedAttribute */ 

(function CompilerGeneratedAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Attribute"), 
      Name: "System.Runtime.CompilerServices.CompilerGeneratedAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ConditionalWeakTable`2 */ 

(function ConditionalWeakTable$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ConditionalWeakTable`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "_buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $['Field']({Static:false, Public:false}, "_entries", $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $['Field']({Static:false, Public:false}, "_freeList", $.Int32); 
    $['Constant']({Static:true , Public:false}, "_initialCapacity", 5); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "_lock", $.Object); 
    $['Field']({Static:false, Public:false}, "_invalid", $.Boolean); 
    $.Property({Static:false, Public:false}, "Keys", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false}, "Values", $asm_mscorlib.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback */ 

JSIL.MakeDelegate("System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback", false, ["TKey", "TValue"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback"), [new JSIL.GenericParameter("TKey", "System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback")]));

/* struct System.Runtime.CompilerServices.ConditionalWeakTable`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.ConditionalWeakTable`2+Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:true }, "depHnd", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.DependentHandle")); 
    $['Field']({Static:false, Public:true }, "hashCode", $.Int32); 
    $['Field']({Static:false, Public:true }, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.ITuple */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.ITuple", true, [], function ($) {
    $.Property({}, "Length");
    $.Property({}, "Item");
  }, []);

/* struct System.Runtime.CompilerServices.AsyncVoidMethodBuilder */ 

(function AsyncVoidMethodBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.AsyncVoidMethodBuilder", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "AwaitOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AwaitUnsafeOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetException", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TStateMachine"])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $['Field']({Static:false, Public:false}, "m_synchronizationContext", $asm_mscorlib.TypeRef("System.Threading.SynchronizationContext")); 
    $['Field']({Static:false, Public:false}, "m_coreState", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.AsyncMethodBuilderCore")); 
    $['Field']({Static:false, Public:false}, "m_task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task")); 
    $.Property({Static:false, Public:false}, "Task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"));

    $.Property({Static:false, Public:false}, "ObjectIdForDebugger", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.CompilerServices.AsyncTaskMethodBuilder */ 

(function AsyncTaskMethodBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.AsyncTaskMethodBuilder", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "AwaitOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AwaitUnsafeOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetException", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TStateMachine"])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_cachedCompleted", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.VoidTaskResult")]), function ($pi) {
        return $asm_mscorlib.System.Runtime.CompilerServices.AsyncTaskMethodBuilder$b1.Of($asm_mscorlib.System.Threading.Tasks.VoidTaskResult).s_defaultResultTask;
      }); 
    $['Field']({Static:false, Public:false}, "m_builder", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", [$asm_mscorlib.TypeRef("System.Threading.Tasks.VoidTaskResult")])); 
    $.Property({Static:false, Public:true }, "Task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task"));

    $.Property({Static:false, Public:false}, "ObjectIdForDebugger", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1 */ 

(function AsyncTaskMethodBuilder$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "AwaitOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AwaitUnsafeOnCompleted", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["TAwaiter", "TStateMachine"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetException", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResult", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResult", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TStateMachine"])
    )
      .Attribute($asm_mscorlib.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $['Field']({Static:true , Public:false, ReadOnly:true }, "s_defaultResultTask", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])); 
    $['Field']({Static:false, Public:false}, "m_coreState", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.AsyncMethodBuilderCore")); 
    $['Field']({Static:false, Public:false}, "m_task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:true }, "Task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false}, "ObjectIdForDebugger", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.CompilerServices.AsyncMethodBuilderCore */ 

(function AsyncMethodBuilderCore$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.AsyncMethodBuilderCore", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_stateMachine", $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")); 
    $['Field']({Static:false, Public:false}, "m_defaultContextAction", $asm_mscorlib.TypeRef("System.Action")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.IAsyncStateMachine */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IAsyncStateMachine", true, [], function ($) {
  }, []);

/* interface System.Runtime.CompilerServices.INotifyCompletion */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.INotifyCompletion", true, [], function ($) {
    $.Method({}, "OnCompleted", JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Action")));
  }, []);

/* interface System.Runtime.CompilerServices.ICriticalNotifyCompletion */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.ICriticalNotifyCompletion", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.CompilerServices.INotifyCompletion")]);

/* struct System.Runtime.CompilerServices.TaskAwaiter */ 

(function TaskAwaiter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.TaskAwaiter", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompleted", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Action"))
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task")); 
    $.Property({Static:false, Public:true }, "IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ICriticalNotifyCompletion"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.INotifyCompletion")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.CompilerServices.TaskAwaiter`1 */ 

(function TaskAwaiter$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.CompilerServices.TaskAwaiter`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetResult", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompleted", 
      JSIL.MethodSignature.Action($asm_mscorlib.TypeRef("System.Action"))
    );

    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_task", $asm_mscorlib.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:true }, "IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.ICriticalNotifyCompletion"), 
      /* 1 */ $asm_mscorlib.TypeRef("System.Runtime.CompilerServices.INotifyCompletion")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.InteropServices._Activator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Activator", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._Attribute */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Attribute", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._Thread */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Thread", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._Type */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Type", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "GUID");
    $.Property({}, "Module");
    $.Property({}, "Assembly");
    $.Property({}, "TypeHandle");
    $.Property({}, "FullName");
    $.Property({}, "Namespace");
    $.Property({}, "AssemblyQualifiedName");
    $.Property({}, "BaseType");
    $.Property({}, "UnderlyingSystemType");
    $.Property({}, "TypeInitializer");
    $.Property({}, "Attributes");
    $.Property({}, "IsNotPublic");
    $.Property({}, "IsPublic");
    $.Property({}, "IsNestedPublic");
    $.Property({}, "IsNestedPrivate");
    $.Property({}, "IsNestedFamily");
    $.Property({}, "IsNestedAssembly");
    $.Property({}, "IsNestedFamANDAssem");
    $.Property({}, "IsNestedFamORAssem");
    $.Property({}, "IsAutoLayout");
    $.Property({}, "IsLayoutSequential");
    $.Property({}, "IsExplicitLayout");
    $.Property({}, "IsClass");
    $.Property({}, "IsInterface");
    $.Property({}, "IsValueType");
    $.Property({}, "IsAbstract");
    $.Property({}, "IsSealed");
    $.Property({}, "IsEnum");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsImport");
    $.Property({}, "IsSerializable");
    $.Property({}, "IsAnsiClass");
    $.Property({}, "IsUnicodeClass");
    $.Property({}, "IsAutoClass");
    $.Property({}, "IsArray");
    $.Property({}, "IsByRef");
    $.Property({}, "IsPointer");
    $.Property({}, "IsPrimitive");
    $.Property({}, "IsCOMObject");
    $.Property({}, "HasElementType");
    $.Property({}, "IsContextful");
    $.Property({}, "IsMarshalByRef");
  }, []);

/* interface System.Runtime.InteropServices._Assembly */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Assembly", true, [], function ($) {
    $.Property({}, "CodeBase");
    $.Property({}, "EscapedCodeBase");
    $.Property({}, "FullName");
    $.Property({}, "EntryPoint");
    $.Property({}, "Location");
    $.Property({}, "Evidence");
    $.Property({}, "GlobalAssemblyCache");
  }, []);

/* interface System.Runtime.InteropServices._MemberInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._MemberInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
  }, []);

/* interface System.Runtime.InteropServices._MethodBase */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._MethodBase", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "MethodHandle");
    $.Property({}, "Attributes");
    $.Property({}, "CallingConvention");
    $.Property({}, "IsPublic");
    $.Property({}, "IsPrivate");
    $.Property({}, "IsFamily");
    $.Property({}, "IsAssembly");
    $.Property({}, "IsFamilyAndAssembly");
    $.Property({}, "IsFamilyOrAssembly");
    $.Property({}, "IsStatic");
    $.Property({}, "IsFinal");
    $.Property({}, "IsVirtual");
    $.Property({}, "IsHideBySig");
    $.Property({}, "IsAbstract");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsConstructor");
  }, []);

/* interface System.Runtime.InteropServices._MethodInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._MethodInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "MethodHandle");
    $.Property({}, "Attributes");
    $.Property({}, "CallingConvention");
    $.Property({}, "IsPublic");
    $.Property({}, "IsPrivate");
    $.Property({}, "IsFamily");
    $.Property({}, "IsAssembly");
    $.Property({}, "IsFamilyAndAssembly");
    $.Property({}, "IsFamilyOrAssembly");
    $.Property({}, "IsStatic");
    $.Property({}, "IsFinal");
    $.Property({}, "IsVirtual");
    $.Property({}, "IsHideBySig");
    $.Property({}, "IsAbstract");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsConstructor");
    $.Property({}, "ReturnType");
    $.Property({}, "ReturnTypeCustomAttributes");
  }, []);

/* interface System.Runtime.InteropServices._ConstructorInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ConstructorInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "MethodHandle");
    $.Property({}, "Attributes");
    $.Property({}, "CallingConvention");
    $.Property({}, "IsPublic");
    $.Property({}, "IsPrivate");
    $.Property({}, "IsFamily");
    $.Property({}, "IsAssembly");
    $.Property({}, "IsFamilyAndAssembly");
    $.Property({}, "IsFamilyOrAssembly");
    $.Property({}, "IsStatic");
    $.Property({}, "IsFinal");
    $.Property({}, "IsVirtual");
    $.Property({}, "IsHideBySig");
    $.Property({}, "IsAbstract");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsConstructor");
  }, []);

/* interface System.Runtime.InteropServices._FieldInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._FieldInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "FieldType");
    $.Property({}, "FieldHandle");
    $.Property({}, "Attributes");
    $.Property({}, "IsPublic");
    $.Property({}, "IsPrivate");
    $.Property({}, "IsFamily");
    $.Property({}, "IsAssembly");
    $.Property({}, "IsFamilyAndAssembly");
    $.Property({}, "IsFamilyOrAssembly");
    $.Property({}, "IsStatic");
    $.Property({}, "IsInitOnly");
    $.Property({}, "IsLiteral");
    $.Property({}, "IsNotSerialized");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsPinvokeImpl");
  }, []);

/* interface System.Runtime.InteropServices._PropertyInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._PropertyInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "PropertyType");
    $.Property({}, "Attributes");
    $.Property({}, "CanRead");
    $.Property({}, "CanWrite");
    $.Property({}, "IsSpecialName");
  }, []);

/* interface System.Runtime.InteropServices._EventInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._EventInfo", true, [], function ($) {
    $.Property({}, "MemberType");
    $.Property({}, "Name");
    $.Property({}, "DeclaringType");
    $.Property({}, "ReflectedType");
    $.Property({}, "Attributes");
    $.Property({}, "EventHandlerType");
    $.Property({}, "IsSpecialName");
    $.Property({}, "IsMulticast");
  }, []);

/* interface System.Runtime.InteropServices._ParameterInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ParameterInfo", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._Module */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Module", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._AssemblyName */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._AssemblyName", true, [], function ($) {
  }, []);

/* enum System.Runtime.InteropServices.GCHandleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.InteropServices.GCHandleType", 
    BaseType: $asm_mscorlib.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Weak: 0, 
    WeakTrackResurrection: 1, 
    Normal: 2, 
    Pinned: 3, 
  }
);

/* struct System.Runtime.InteropServices.GCHandle */ 

(function GCHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.ValueType"), 
      Name: "System.Runtime.InteropServices.GCHandle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm_mscorlib.TypeRef("System.Runtime.InteropServices.GCHandleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddrOfPinnedObject", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "Alloc", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Alloc", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm_mscorlib.TypeRef("System.Runtime.InteropServices.GCHandleType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Free", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $['Constant']({Static:true , Public:false}, "MaxHandleType", 3); 
    $['Field']({Static:false, Public:false}, "m_handle", $.IntPtr); 
    $['Field']({Static:true , Public:false}, "s_cookieTable", $asm_mscorlib.TypeRef("System.Runtime.InteropServices.GCHandleCookieTable")); 
    $['Field']({Static:true , Public:false}, "s_probeIsActive", $asm_mscorlib.TypeRef("System.Boolean")); 
    $.Property({Static:false, Public:true }, "Target", $.Object);

    $.Property({Static:false, Public:true }, "IsAllocated", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InteropServices.GCHandleCookieTable */ 

(function GCHandleCookieTable$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Runtime.InteropServices.GCHandleCookieTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Constant']({Static:true , Public:false}, "InitialHandleCount", 10); 
    $['Constant']({Static:true , Public:false}, "MaxListSize", 16777215); 
    $['Constant']({Static:true , Public:false}, "CookieMaskIndex", 16777215); 
    $['Constant']({Static:true , Public:false}, "CookieMaskSentinal", 4278190080); 
    $['Field']({Static:false, Public:false}, "m_HandleToCookieMap", $asm_mscorlib.TypeRef("System.Collections.Generic.Dictionary`2", [$.IntPtr, $.IntPtr])); 
    $['Field']({Static:false, Public:false}, "m_HandleList", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "m_CycleCounts", $asm_mscorlib.TypeRef("System.Array")); 
    $['Field']({Static:false, Public:false}, "m_FreeIndex", $.Int32); 
    $['Field']({Static:false, Public:false, ReadOnly:true }, "m_syncObject", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.InteropServices.ICustomMarshaler */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ICustomMarshaler", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._Exception */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Exception", true, [], function ($) {
    $.Property({}, "Message");
    $.Property({}, "StackTrace");
    $.Property({}, "HelpLink");
    $.Property({}, "Source");
    $.Property({}, "InnerException");
    $.Property({}, "TargetSite");
  }, []);

/* class System.Runtime.InteropServices.Marshal */ 

(function Marshal$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.InteropServices.Marshal", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "OffsetOf", 
      new JSIL.MethodSignature($.IntPtr, [$asm_mscorlib.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OffsetOf", 
      new JSIL.MethodSignature($.IntPtr, [$.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SizeOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "SizeOf", 
      new JSIL.MethodSignature($.Int32, ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SizeOf", 
      new JSIL.MethodSignature($.Int32, [$asm_mscorlib.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SizeOf", 
      new JSIL.MethodSignature($.Int32, null, ["T"])
    );

    $['Constant']({Static:true , Public:false}, "LMEM_FIXED", 0); 
    $['Constant']({Static:true , Public:false}, "LMEM_MOVEABLE", 2); 
    $['Constant']({Static:true , Public:false}, "HIWORDMASK", -65536); 
    $['Field']({Static:true , Public:false}, "IID_IUnknown", $asm_mscorlib.TypeRef("System.Guid")); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "SystemDefaultCharSize", $.Int32, 2); 
    $['Field']({Static:true , Public:true , ReadOnly:true }, "SystemMaxDBCSCharSize", $.Int32); 
    $['Constant']({Static:true , Public:false}, "s_strConvertedTypeInfoAssemblyName", "InteropDynamicTypes"); 
    $['Constant']({Static:true , Public:false}, "s_strConvertedTypeInfoAssemblyTitle", "Interop Dynamic Types"); 
    $['Constant']({Static:true , Public:false}, "s_strConvertedTypeInfoAssemblyDesc", "Type dynamically generated from ITypeInfo's"); 
    $['Constant']({Static:true , Public:false}, "s_strConvertedTypeInfoNameSpace", "InteropDynamicTypes"); 
    $['Field']({Static:true , Public:false, ReadOnly:true }, "ManagedNameGuid", $asm_mscorlib.TypeRef("System.Guid")); 
    function Marshal__cctor () {
      $thisType.IID_IUnknown = new $asm_mscorlib.System.Guid();
      $thisType.ManagedNameGuid = new $asm_mscorlib.System.Guid();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Marshal__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.InteropServices.ICustomAdapter */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ICustomAdapter", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ICustomFactory */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ICustomFactory", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ICustomQueryInterface */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ICustomQueryInterface", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.IRegistrationServices */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.IRegistrationServices", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ITypeLibImporterNotifySink */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ITypeLibImporterNotifySink", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ITypeLibExporterNotifySink */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ITypeLibExporterNotifySink", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ITypeLibConverter */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ITypeLibConverter", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ITypeLibExporterNameProvider */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ITypeLibExporterNameProvider", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIBindCtx */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIBindCtx", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIConnectionPointContainer */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIConnectionPointContainer", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIConnectionPoint */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIConnectionPoint", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumerable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumerable", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumerator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumerator", false, [], function ($) {
    $.Property({}, "Current");
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumMoniker */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumMoniker", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumConnections */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumConnections", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumConnectionPoints */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumConnectionPoints", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumString */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumString", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIEnumVARIANT */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIEnumVARIANT", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIExpando */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIExpando", false, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.UCOMIReflect")]);

/* interface System.Runtime.InteropServices.UCOMIMoniker */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIMoniker", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIPersistFile */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIPersistFile", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIReflect */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIReflect", false, [], function ($) {
    $.Property({}, "UnderlyingSystemType");
  }, []);

/* interface System.Runtime.InteropServices.UCOMIRunningObjectTable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIRunningObjectTable", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMIStream */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMIStream", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMITypeComp */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMITypeComp", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMITypeInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMITypeInfo", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.UCOMITypeLib */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.UCOMITypeLib", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.NativeMethods+IDispatch */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.NativeMethods+IDispatch", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._AssemblyBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._AssemblyBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._ConstructorBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ConstructorBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._CustomAttributeBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._CustomAttributeBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._EnumBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._EnumBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._EventBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._EventBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._FieldBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._FieldBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._ILGenerator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ILGenerator", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._LocalBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._LocalBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._MethodBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._MethodBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._MethodRental */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._MethodRental", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._ModuleBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ModuleBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._ParameterBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._ParameterBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._PropertyBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._PropertyBuilder", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._SignatureHelper */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._SignatureHelper", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices._TypeBuilder */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices._TypeBuilder", true, [], function ($) {
  }, []);

JSIL.DeclareNamespace("System.Runtime.InteropServices.WindowsRuntime");
/* interface System.Runtime.InteropServices.WindowsRuntime.IActivationFactory */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IActivationFactory", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IRestrictedErrorInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IRestrictedErrorInfo", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IManagedActivationFactory */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IManagedActivationFactory", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IClosable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IClosable", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IStringable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IStringable", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IPropertyValue */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IPropertyValue", false, [], function ($) {
    $.Property({}, "Type");
    $.Property({}, "IsNumericScalar");
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IReference`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IReference`1", false, ["T"], function ($) {
    $.Property({}, "Value");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IPropertyValue")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IReferenceArray`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IReferenceArray`1", false, ["T"], function ($) {
    $.Property({}, "Value");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IPropertyValue")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.ICustomPropertyProvider */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.ICustomPropertyProvider", false, [], function ($) {
    $.Property({}, "Type");
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IGetProxyTarget */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IGetProxyTarget", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.ICustomProperty */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.ICustomProperty", false, [], function ($) {
    $.Property({}, "Type");
    $.Property({}, "Name");
    $.Property({}, "CanWrite");
    $.Property({}, "CanRead");
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IWinRTClassActivator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IWinRTClassActivator", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IIterable`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IIterable`1", false, ["T"], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IIterable`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IBindableIterable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IBindableIterable", false, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IIterator`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IIterator`1", false, ["T"], function ($) {
    $.Property({}, "Current");
    $.Property({}, "HasCurrent");
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IBindableIterator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IBindableIterator", false, [], function ($) {
    $.Property({}, "Current");
    $.Property({}, "HasCurrent");
  }, []);

/* interface System.Runtime.InteropServices.WindowsRuntime.IVector`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IVector`1", false, ["T"], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IIterable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVector`1")]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVector`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IVector_Raw`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IVector_Raw`1", false, ["T"], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IIterable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVector_Raw`1")]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVector_Raw`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IVectorView`1 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IVectorView`1", false, ["T"], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IIterable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVectorView`1")]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.InteropServices.WindowsRuntime.IVectorView`1")]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IBindableVector */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IBindableVector", false, [], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IBindableIterable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IBindableVectorView */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IBindableVectorView", false, [], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IBindableIterable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IMap`2 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IMap`2", false, ["K", "V"], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IIterable`1", [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", [new JSIL.GenericParameter("K", "System.Runtime.InteropServices.WindowsRuntime.IMap`2"), new JSIL.GenericParameter("V", "System.Runtime.InteropServices.WindowsRuntime.IMap`2")])]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", [new JSIL.GenericParameter("K", "System.Runtime.InteropServices.WindowsRuntime.IMap`2"), new JSIL.GenericParameter("V", "System.Runtime.InteropServices.WindowsRuntime.IMap`2")])]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IMapView`2 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IMapView`2", false, ["K", "V"], function ($) {
    $.Property({}, "Size");
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IIterable`1", [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", [new JSIL.GenericParameter("K", "System.Runtime.InteropServices.WindowsRuntime.IMapView`2"), new JSIL.GenericParameter("V", "System.Runtime.InteropServices.WindowsRuntime.IMapView`2")])]), $asm_mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", [new JSIL.GenericParameter("K", "System.Runtime.InteropServices.WindowsRuntime.IMapView`2"), new JSIL.GenericParameter("V", "System.Runtime.InteropServices.WindowsRuntime.IMapView`2")])]), $asm_mscorlib.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.WindowsRuntime.IKeyValuePair`2", false, ["K", "V"], function ($) {
    $.Property({}, "Key");
    $.Property({}, "Value");
  }, []);

JSIL.DeclareNamespace("System.Runtime.InteropServices.Expando");
/* interface System.Runtime.InteropServices.Expando.IExpando */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.Expando.IExpando", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Reflection.IReflect")]);

JSIL.DeclareNamespace("System.Runtime.InteropServices.ComTypes");
/* interface System.Runtime.InteropServices.ComTypes.IBindCtx */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IBindCtx", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IConnectionPointContainer */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IConnectionPointContainer", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IConnectionPoint */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IConnectionPoint", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumerable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumerable", false, [], function ($) {
    $.Method({}, "GetEnumerator", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Collections.IEnumerator")));
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumerator */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumerator", false, [], function ($) {
    $.Method({}, "MoveNext", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Current", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "Current");
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumMoniker */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumMoniker", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumConnections */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumConnections", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumString */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumString", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IEnumVARIANT */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IEnumVARIANT", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IExpando */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IExpando", false, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.ComTypes.IReflect")]);

/* interface System.Runtime.InteropServices.ComTypes.IMoniker */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IMoniker", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IPersistFile */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IPersistFile", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IReflect */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IReflect", false, [], function ($) {
    $.Method({}, "GetMethod", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.ParameterModifier")])
        ]));
    $.Method({}, "GetMethod", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMethods", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MethodInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetField", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.FieldInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetFields", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.FieldInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetProperty", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.PropertyInfo"), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetProperty", new JSIL.MethodSignature($asm_mscorlib.TypeRef("System.Reflection.PropertyInfo"), [
          $.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags"), 
          $asm_mscorlib.TypeRef("System.Reflection.Binder"), $asm_mscorlib.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.ParameterModifier")])
        ]));
    $.Method({}, "GetProperties", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.PropertyInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMember", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "GetMembers", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm_mscorlib.TypeRef("System.Reflection.MemberInfo")]), [$asm_mscorlib.TypeRef("System.Reflection.BindingFlags")]));
    $.Method({}, "get_UnderlyingSystemType", JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Type")));
    $.Property({}, "UnderlyingSystemType");
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IRunningObjectTable */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IRunningObjectTable", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.IStream */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.IStream", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.ITypeComp */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.ITypeComp", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.ITypeInfo */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.ITypeInfo", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.ITypeLib */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.ITypeLib", true, [], function ($) {
  }, []);

/* interface System.Runtime.InteropServices.ComTypes.ITypeLib2 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.ITypeLib2", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib")]);

/* interface System.Runtime.InteropServices.ComTypes.ITypeInfo2 */ 

JSIL.MakeInterface(
  "System.Runtime.InteropServices.ComTypes.ITypeInfo2", true, [], function ($) {
  }, [$asm_mscorlib.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo")]);

JSIL.DeclareNamespace("System.Text");
/* class System.Text.StringBuilder */ 

(function StringBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.StringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm_mscorlib.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm_mscorlib.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _
        });

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.IFormatProvider"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.IFormatProvider"), $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.IFormatProvider"), $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFormat", 
      new JSIL.MethodSignature($.Type, [
          $asm_mscorlib.TypeRef("System.IFormatProvider"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _
        });

    $.ExternalMethod({Static:false, Public:true }, "AppendLine", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendLine", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Chars", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.SByte])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $asm_mscorlib.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.UInt16])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.UInt64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Replace", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Replace", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Replace", 
      new JSIL.MethodSignature($.Type, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Replace", 
      new JSIL.MethodSignature($.Type, [
          $.Char, $.Char, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Length", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $['Field']({Static:false, Public:false}, "m_ChunkChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $['Field']({Static:false, Public:false}, "m_ChunkPrevious", $.Type); 
    $['Field']({Static:false, Public:false}, "m_ChunkLength", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_ChunkOffset", $.Int32); 
    $['Field']({Static:false, Public:false}, "m_MaxCapacity", $.Int32); 
    $['Constant']({Static:true , Public:false}, "DefaultCapacity", 16); 
    $['Constant']({Static:true , Public:false}, "CapacityField", "Capacity"); 
    $['Constant']({Static:true , Public:false}, "MaxCapacityField", "m_MaxCapacity"); 
    $['Constant']({Static:true , Public:false}, "StringValueField", "m_StringValue"); 
    $['Constant']({Static:true , Public:false}, "ThreadIDField", "m_currentThread"); 
    $['Constant']({Static:true , Public:false}, "MaxChunkSize", 8000); 
    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true }, "MaxCapacity", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true }, "Chars", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.Encoding */ 

(function Encoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.Encoding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm_mscorlib.TypeRef("System.Text.EncoderFallback"), 
          $asm_mscorlib.TypeRef("System.Text.DecoderFallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ASCII", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BigEndianUnicode", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Unicode", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UTF7", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UTF8", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $asm_mscorlib.TypeRef("System.Text.EncoderNLS")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $asm_mscorlib.TypeRef("System.Text.EncoderNLS")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $asm_mscorlib.TypeRef("System.Text.DecoderNLS")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $asm_mscorlib.TypeRef("System.Text.DecoderNLS")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecoder", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Text.Decoder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

//     $['Field']({Static:true , Public:false, ReadOnly:true }, "s_defaultUtf8EncodingNoBom", $asm_mscorlib.TypeRef("System.Text.UTF8Encoding+UTF8EncodingSealed")); 
    $['Field']({Static:true , Public:false}, "defaultEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "unicodeEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "bigEndianUnicode", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "utf7Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "utf8Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "utf32Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "asciiEncoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "latin1Encoding", $asm_mscorlib.TypeRef("System.Text.Encoding")); 
    $['Field']({Static:true , Public:false}, "encodings", $asm_mscorlib.TypeRef("System.Collections.Hashtable")); 
    $['Constant']({Static:true , Public:false}, "MIMECONTF_MAILNEWS", 1); 
    $['Constant']({Static:true , Public:false}, "MIMECONTF_BROWSER", 2); 
    $['Constant']({Static:true , Public:false}, "MIMECONTF_SAVABLE_MAILNEWS", 256); 
    $['Constant']({Static:true , Public:false}, "MIMECONTF_SAVABLE_BROWSER", 512); 
    $['Constant']({Static:true , Public:false}, "CodePageDefault", 0); 
    $['Constant']({Static:true , Public:false}, "CodePageNoOEM", 1); 
    $['Constant']({Static:true , Public:false}, "CodePageNoMac", 2); 
    $['Constant']({Static:true , Public:false}, "CodePageNoThread", 3); 
    $['Constant']({Static:true , Public:false}, "CodePageNoSymbol", 42); 
    $['Constant']({Static:true , Public:false}, "CodePageUnicode", 1200); 
    $['Constant']({Static:true , Public:false}, "CodePageBigEndian", 1201); 
    $['Constant']({Static:true , Public:false}, "CodePageWindows1252", 1252); 
    $['Constant']({Static:true , Public:false}, "CodePageMacGB2312", 10008); 
    $['Constant']({Static:true , Public:false}, "CodePageGB2312", 20936); 
    $['Constant']({Static:true , Public:false}, "CodePageMacKorean", 10003); 
    $['Constant']({Static:true , Public:false}, "CodePageDLLKorean", 20949); 
    $['Constant']({Static:true , Public:false}, "ISO2022JP", 50220); 
    $['Constant']({Static:true , Public:false}, "ISO2022JPESC", 50221); 
    $['Constant']({Static:true , Public:false}, "ISO2022JPSISO", 50222); 
    $['Constant']({Static:true , Public:false}, "ISOKorean", 50225); 
    $['Constant']({Static:true , Public:false}, "ISOSimplifiedCN", 50227); 
    $['Constant']({Static:true , Public:false}, "EUCJP", 51932); 
    $['Constant']({Static:true , Public:false}, "ChineseHZ", 52936); 
    $['Constant']({Static:true , Public:false}, "DuplicateEUCCN", 51936); 
    $['Constant']({Static:true , Public:false}, "EUCCN", 936); 
    $['Constant']({Static:true , Public:false}, "EUCKR", 51949); 
    $['Constant']({Static:true , Public:false}, "CodePageASCII", 20127); 
    $['Constant']({Static:true , Public:false}, "ISO_8859_1", 28591); 
    $['Constant']({Static:true , Public:false}, "ISCIIAssemese", 57006); 
    $['Constant']({Static:true , Public:false}, "ISCIIBengali", 57003); 
    $['Constant']({Static:true , Public:false}, "ISCIIDevanagari", 57002); 
    $['Constant']({Static:true , Public:false}, "ISCIIGujarathi", 57010); 
    $['Constant']({Static:true , Public:false}, "ISCIIKannada", 57008); 
    $['Constant']({Static:true , Public:false}, "ISCIIMalayalam", 57009); 
    $['Constant']({Static:true , Public:false}, "ISCIIOriya", 57007); 
    $['Constant']({Static:true , Public:false}, "ISCIIPanjabi", 57011); 
    $['Constant']({Static:true , Public:false}, "ISCIITamil", 57004); 
    $['Constant']({Static:true , Public:false}, "ISCIITelugu", 57005); 
    $['Constant']({Static:true , Public:false}, "GB18030", 54936); 
    $['Constant']({Static:true , Public:false}, "ISO_8859_8I", 38598); 
    $['Constant']({Static:true , Public:false}, "ISO_8859_8_Visual", 28598); 
    $['Constant']({Static:true , Public:false}, "ENC50229", 50229); 
    $['Constant']({Static:true , Public:false}, "CodePageUTF7", 65000); 
    $['Constant']({Static:true , Public:false}, "CodePageUTF8", 65001); 
    $['Constant']({Static:true , Public:false}, "CodePageUTF32", 12000); 
    $['Constant']({Static:true , Public:false}, "CodePageUTF32BE", 12001); 
    $['Field']({Static:false, Public:false}, "m_codePage", $.Int32); 
    $['Field']({Static:false, Public:false}, "dataItem", $asm_mscorlib.TypeRef("System.Globalization.CodePageDataItem")); 
    $['Field']({Static:false, Public:false}, "m_deserializedFromEverett", $.Boolean); 
    $['Field']({Static:false, Public:false}, "m_isReadOnly", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "encoderFallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "decoderFallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback"))
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "BodyName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HeaderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "WebName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "WindowsCodePage", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsBrowserDisplay", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsBrowserSave", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsMailNewsDisplay", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsMailNewsSave", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSingleByte", $.Boolean);

    $.Property({Static:false, Public:true }, "EncoderFallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback"));

    $.Property({Static:false, Public:true }, "DecoderFallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:true , Public:true }, "ASCII", $.Type);

    $.Property({Static:true , Public:false}, "Latin1", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "CodePage", $.Int32);

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:true , Public:true }, "Unicode", $.Type);

    $.Property({Static:true , Public:true }, "BigEndianUnicode", $.Type);

    $.Property({Static:true , Public:true }, "UTF7", $.Type);

    $.Property({Static:true , Public:true }, "UTF8", $.Type);

    $.Property({Static:true , Public:true }, "UTF32", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm_mscorlib.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.ASCIIEncoding */ 

(function ASCIIEncoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.ASCIIEncoding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsSingleByte", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.Decoder */ 

(function Decoder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.Decoder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $.Boolean
        ])
    );

    $['Field']({Static:false, Public:false}, "m_fallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback")); 
    $['Field']({Static:false, Public:false}, "m_fallbackBuffer", $asm_mscorlib.TypeRef("System.Text.DecoderFallbackBuffer")); 
    $.Property({Static:false, Public:true }, "Fallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback"));

    $.Property({Static:false, Public:true }, "FallbackBuffer", $asm_mscorlib.TypeRef("System.Text.DecoderFallbackBuffer"));

    $.Property({Static:false, Public:false}, "InternalHasFallbackBuffer", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.DecoderFallback */ 

(function DecoderFallback$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.DecoderFallback", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "bIsMicrosoftBestFitFallback", $.Boolean); 
    $['Field']({Static:true , Public:false}, "replacementFallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback")); 
    $['Field']({Static:true , Public:false}, "exceptionFallback", $asm_mscorlib.TypeRef("System.Text.DecoderFallback")); 
    $['Field']({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:true }, "ReplacementFallback", $.Type);

    $.Property({Static:true , Public:true }, "ExceptionFallback", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxCharCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsMicrosoftBestFitFallback", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.DecoderFallbackBuffer */ 

(function DecoderFallbackBuffer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.DecoderFallbackBuffer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $['Field']({Static:false, Public:false}, "byteStart", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $['Field']({Static:false, Public:false}, "charEnd", $jsilcore.TypeRef("JSIL.Pointer", [$.Char])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Remaining", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.Encoder */ 

(function Encoder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.Encoder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "m_fallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback")); 
    $['Field']({Static:false, Public:false}, "m_fallbackBuffer", $asm_mscorlib.TypeRef("System.Text.EncoderFallbackBuffer")); 
    $.Property({Static:false, Public:true }, "Fallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback"));

    $.Property({Static:false, Public:true }, "FallbackBuffer", $asm_mscorlib.TypeRef("System.Text.EncoderFallbackBuffer"));

    $.Property({Static:false, Public:false}, "InternalHasFallbackBuffer", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.EncoderFallback */ 

(function EncoderFallback$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Object"), 
      Name: "System.Text.EncoderFallback", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $['Field']({Static:false, Public:false}, "bIsMicrosoftBestFitFallback", $.Boolean); 
    $['Field']({Static:true , Public:false}, "replacementFallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback")); 
    $['Field']({Static:true , Public:false}, "exceptionFallback", $asm_mscorlib.TypeRef("System.Text.EncoderFallback")); 
    $['Field']({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:true }, "ReplacementFallback", $.Type);

    $.Property({Static:true , Public:true }, "ExceptionFallback", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxCharCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.UnicodeEncoding */ 

(function UnicodeEncoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.UnicodeEncoding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $['Field']({Static:false, Public:false}, "isThrowException", $.Boolean)
      .Attribute($asm_mscorlib.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $['Field']({Static:false, Public:false}, "bigEndian", $.Boolean); 
    $['Field']({Static:false, Public:false}, "byteOrderMark", $.Boolean); 
    $['Constant']({Static:true , Public:true }, "CharSize", 2); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.UTF8Encoding */ 

(function UTF8Encoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.UTF8Encoding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecoder", 
      JSIL.MethodSignature.Return($asm_mscorlib.TypeRef("System.Text.Decoder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $['Constant']({Static:true , Public:false}, "UTF8_CODEPAGE", 65001); 
    $['Field']({Static:false, Public:false}, "emitUTF8Identifier", $.Boolean); 
    $['Field']({Static:false, Public:false}, "isThrowException", $.Boolean); 
    $['Constant']({Static:true , Public:false}, "FinalByte", 536870912); 
    $['Constant']({Static:true , Public:false}, "SupplimentarySeq", 268435456); 
    $['Constant']({Static:true , Public:false}, "ThreeByteSeq", 134217728); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.UTF8Encoding+UTF8EncodingSealed */ 

(function UTF8EncodingSealed$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm_mscorlib.TypeRef("System.Text.UTF8Encoding"), 
      Name: "System.Text.UTF8Encoding+UTF8EncodingSealed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

